logical_negation
add_attribute("e", "e", "BOOLEAN")
generate_java_code
add_call_chain(<<C,C,A,b,A,b,e,b>>)
generate_java_code
less_than
add_call_chain(<<C,A,D,d,c,B,c,C>>)
add_call_chain(<<INTEGER,c>>)
less_than
int_value (15)
logical_negation
disjunction
generate_java_code
add_attribute("b", "b", "BOOLEAN")
disjunction
add_attribute("BOOLEAN", "a", "INTEGER")
add_class(e)
add_call_chain(<<INTEGER,A,B>>)
add_query("c", "D", <<["c", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["INTEGER", "INTEGER"], ["d", "A"], ["e", "BOOLEAN"], ["a", "INTEGER"], ["e", "INTEGER"]>>, "a")
add_query("a", "C", <<["d", "c"], ["C", "e"], ["d", "BOOLEAN"], ["C", "BOOLEAN"], ["D", "BOOLEAN"]>>, "a")
int_value (6)
add_call_chain(<<B,a,BOOLEAN,e,D>>)
add_query("b", "A", <<["D", "BOOLEAN"], ["C", "d"], ["e", "INTEGER"], ["A", "BOOLEAN"], ["B", "INTEGER"], ["C", "BOOLEAN"]>>, "D")
bool_value (true)
add_attribute("A", "B", "BOOLEAN")
logical_negation
conjunction
add_call_chain(<<D,a,A,c,e>>)
disjunction
add_query("e", "e", <<["A", "INTEGER"], ["B", "C"], ["B", "INTEGER"], ["e", "BOOLEAN"], ["BOOLEAN", "A"], ["BOOLEAN", "BOOLEAN"], ["c", "INTEGER"], ["A", "B"], ["BOOLEAN", "INTEGER"]>>, "d")
add_attribute("d", "b", "c")
add_command("B", "C", <<["A", "INTEGER"], ["d", "C"]>>)
quotient
add_call_chain(<<c,A,B,c>>)
add_class(c)
add_query("c", "c", <<["b", "A"], ["a", "B"], ["D", "B"], ["D", "BOOLEAN"]>>, "d")
add_query("e", "b", <<["A", "INTEGER"], ["e", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["b", "e"], ["B", "BOOLEAN"]>>, "B")
generate_java_code
int_value (2)
disjunction
add_query("D", "C", <<["D", "INTEGER"], ["C", "B"], ["D", "a"]>>, "B")
int_value (17)
logical_negation
int_value (8)
add_command("B", "A", <<["BOOLEAN", "INTEGER"], ["D", "BOOLEAN"], ["c", "a"], ["D", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "BOOLEAN"], ["b", "B"]>>)
add_call_chain(<<INTEGER>>)
quotient
type_check
bool_value (true)
add_query("c", "BOOLEAN", <<["d", "INTEGER"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["B", "e"], ["A", "a"], ["b", "e"], ["d", "INTEGER"]>>, "b")
generate_java_code
add_class(e)
add_call_chain(<<c>>)
add_query("D", "INTEGER", <<["e", "BOOLEAN"], ["B", "A"], ["C", "INTEGER"], ["B", "INTEGER"], ["C", "a"], ["B", "c"], ["D", "BOOLEAN"]>>, "D")
add_query("d", "INTEGER", <<["c", "INTEGER"], ["a", "BOOLEAN"], ["C", "BOOLEAN"], ["B", "BOOLEAN"], ["c", "INTEGER"], ["a", "INTEGER"], ["B", "BOOLEAN"], ["b", "a"]>>, "D")
int_value (32)
logical_negation
add_query("c", "b", <<["C", "INTEGER"], ["D", "BOOLEAN"], ["INTEGER", "INTEGER"], ["D", "INTEGER"], ["D", "BOOLEAN"], ["a", "D"]>>, "c")
generate_java_code
int_value (24)
numerical_negation
generate_java_code
add_query("A", "BOOLEAN", <<["d", "e"], ["d", "BOOLEAN"], ["a", "d"], ["e", "C"], ["a", "INTEGER"], ["e", "INTEGER"], ["e", "INTEGER"], ["c", "BOOLEAN"]>>, "a")
numerical_negation
add_call_chain(<<INTEGER,C>>)
add_command("b", "D", <<["e", "BOOLEAN"], ["B", "d"], ["C", "INTEGER"], ["B", "INTEGER"]>>)
numerical_negation
bool_value (true)
int_value (29)
type_check
bool_value (false)
add_class(a)
add_class(B)
add_call_chain(<<D,D,BOOLEAN,c,d,C>>)
add_call_chain(<<C>>)
type_check
add_query("C", "c", <<["e", "e"]>>, "c")
add_attribute("b", "c", "A")
numerical_negation
add_attribute("C", "A", "INTEGER")
logical_negation
multiplication
type_check
add_call_chain(<<B,B,C,BOOLEAN,d,a,D,e>>)
add_command("A", "e", <<["A", "INTEGER"], ["e", "c"], ["c", "BOOLEAN"], ["C", "a"], ["c", "BOOLEAN"], ["INTEGER", "e"], ["e", "INTEGER"]>>)
add_call_chain(<<a,D,b,C,d,D,A>>)
numerical_negation
add_command("c", "a", <<["e", "BOOLEAN"], ["b", "BOOLEAN"], ["B", "a"], ["B", "BOOLEAN"], ["d", "INTEGER"], ["C", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["e", "INTEGER"], ["D", "BOOLEAN"]>>)
add_call_chain(<<A,b,B,A,e,A,A>>)
conjunction
add_query("d", "BOOLEAN", <<["c", "INTEGER"], ["BOOLEAN", "INTEGER"], ["A", "A"], ["B", "INTEGER"], ["A", "BOOLEAN"]>>, "INTEGER")
add_command("C", "D", <<["c", "INTEGER"], ["c", "INTEGER"], ["c", "INTEGER"], ["c", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "B"], ["e", "a"]>>)
add_query("e", "b", <<["e", "BOOLEAN"], ["A", "INTEGER"]>>, "d")
add_call_chain(<<A,e>>)
add_class(A)
add_query("BOOLEAN", "b", <<["c", "BOOLEAN"]>>, "BOOLEAN")
add_command("A", "B", <<["INTEGER", "C"], ["INTEGER", "B"], ["A", "BOOLEAN"], ["BOOLEAN", "B"], ["b", "BOOLEAN"], ["B", "C"], ["INTEGER", "BOOLEAN"]>>)
type_check
add_call_chain(<<B,e,c,A,c,D,B>>)
type_check
add_call_chain(<<b>>)
add_query("B", "b", <<["d", "B"], ["B", "INTEGER"], ["C", "BOOLEAN"]>>, "B")
add_query("d", "BOOLEAN", <<["D", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "INTEGER"], ["B", "a"], ["D", "INTEGER"], ["A", "BOOLEAN"], ["a", "C"]>>, "a")
add_class(b)
add_class(b)
add_query("a", "d", <<["D", "D"]>>, "D")
add_attribute("C", "a", "a")
addition
logical_negation
add_call_chain(<<c>>)
logical_negation
greater_than
int_value (48)
bool_value (false)
add_attribute("e", "A", "INTEGER")
add_command("D", "C", <<["B", "A"], ["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "BOOLEAN"], ["D", "INTEGER"]>>)
add_attribute("B", "c", "B")
add_class(D)
add_call_chain(<<BOOLEAN,e,D,d,a>>)
type_check
add_command("BOOLEAN", "D", <<["c", "INTEGER"], ["B", "BOOLEAN"], ["D", "INTEGER"], ["D", "B"], ["INTEGER", "INTEGER"], ["c", "d"], ["INTEGER", "BOOLEAN"]>>)
bool_value (false)
bool_value (true)
add_query("A", "C", <<["C", "BOOLEAN"], ["D", "INTEGER"]>>, "e")
add_call_chain(<<b,e,C>>)
bool_value (false)
greater_than
add_call_chain(<<INTEGER,C,b,d,c,B>>)
generate_java_code
logical_negation
numerical_negation
add_class(B)
generate_java_code
add_attribute("d", "INTEGER", "INTEGER")
generate_java_code
generate_java_code
add_attribute("a", "INTEGER", "a")
add_command("b", "e", <<["d", "BOOLEAN"], ["c", "a"], ["INTEGER", "INTEGER"], ["A", "BOOLEAN"], ["a", "c"], ["A", "BOOLEAN"], ["B", "INTEGER"], ["d", "BOOLEAN"], ["B", "BOOLEAN"]>>)
disjunction
numerical_negation
int_value (10)
numerical_negation
greater_than
int_value (48)
int_value (4)
int_value (26)
equals
logical_negation
int_value (20)
add_attribute("a", "c", "INTEGER")
add_attribute("D", "d", "BOOLEAN")
numerical_negation
add_query("e", "B", <<["INTEGER", "BOOLEAN"], ["a", "BOOLEAN"]>>, "C")
type_check
add_command("D", "e", <<["D", "BOOLEAN"], ["C", "BOOLEAN"], ["B", "INTEGER"], ["d", "BOOLEAN"], ["a", "INTEGER"], ["b", "BOOLEAN"], ["e", "e"], ["D", "INTEGER"]>>)
add_call_chain(<<d,D,B,A,a,b>>)
add_query("A", "C", <<["C", "BOOLEAN"], ["INTEGER", "c"]>>, "a")
add_call_chain(<<C,INTEGER,e>>)
numerical_negation
numerical_negation
type_check
logical_negation
add_query("A", "B", <<["a", "INTEGER"], ["c", "INTEGER"], ["c", "BOOLEAN"]>>, "b")
generate_java_code
add_attribute("A", "D", "INTEGER")
type_check
add_call_chain(<<c,d>>)
add_call_chain(<<A,B,B,BOOLEAN,B,b,d,D>>)
add_command("D", "a", <<["B", "BOOLEAN"], ["c", "b"], ["C", "A"], ["c", "BOOLEAN"]>>)
add_command("b", "B", <<["b", "a"], ["a", "A"]>>)
bool_value (true)
generate_java_code
add_class(e)
add_query("C", "BOOLEAN", <<["D", "D"], ["b", "BOOLEAN"], ["d", "BOOLEAN"], ["B", "INTEGER"], ["e", "e"]>>, "D")
add_query("b", "b", <<["D", "BOOLEAN"], ["B", "BOOLEAN"], ["c", "BOOLEAN"], ["B", "c"], ["C", "BOOLEAN"], ["c", "B"]>>, "C")
quotient
int_value (2)
add_attribute("B", "INTEGER", "BOOLEAN")
type_check
add_attribute("e", "e", "INTEGER")
add_call_chain(<<e,d,A,d,d,B,D,a>>)
greater_than
add_command("e", "c", <<["a", "BOOLEAN"], ["C", "INTEGER"]>>)
conjunction
add_attribute("A", "d", "d")
quotient
type_check
add_command("D", "D", <<["a", "INTEGER"]>>)
numerical_negation
addition
add_attribute("d", "e", "BOOLEAN")
add_command("a", "a", <<["BOOLEAN", "INTEGER"], ["C", "A"], ["A", "INTEGER"], ["d", "BOOLEAN"], ["a", "D"], ["C", "INTEGER"]>>)
add_call_chain(<<c,A,b>>)
add_class(B)
add_call_chain(<<e,A,D>>)
add_attribute("b", "C", "d")
add_attribute("INTEGER", "B", "B")
add_command("B", "e", <<["c", "BOOLEAN"]>>)
int_value (39)
bool_value (false)
add_call_chain(<<e,BOOLEAN,A,B,C,C,b,B>>)
add_call_chain(<<B,D,b,b,e>>)
modulo
generate_java_code
logical_negation
logical_negation
type_check
bool_value (false)
generate_java_code
type_check
add_call_chain(<<a,e,C,B>>)
logical_negation
add_command("C", "INTEGER", <<["B", "INTEGER"], ["b", "e"], ["b", "INTEGER"], ["BOOLEAN", "D"], ["a", "INTEGER"], ["a", "BOOLEAN"], ["d", "INTEGER"], ["C", "BOOLEAN"]>>)
add_query("c", "e", <<["a", "BOOLEAN"], ["d", "BOOLEAN"], ["B", "INTEGER"], ["c", "e"], ["D", "INTEGER"], ["b", "D"], ["D", "BOOLEAN"], ["INTEGER", "D"]>>, "A")
add_query("INTEGER", "d", <<["C", "BOOLEAN"], ["B", "BOOLEAN"]>>, "c")
add_command("B", "A", <<["INTEGER", "e"], ["a", "BOOLEAN"], ["a", "INTEGER"], ["e", "B"], ["a", "BOOLEAN"], ["c", "BOOLEAN"], ["c", "BOOLEAN"]>>)
add_query("e", "D", <<["C", "INTEGER"], ["BOOLEAN", "INTEGER"], ["a", "INTEGER"], ["D", "INTEGER"], ["a", "BOOLEAN"], ["A", "e"], ["A", "BOOLEAN"], ["c", "b"], ["d", "INTEGER"]>>, "D")
int_value (17)
type_check
add_command("D", "c", <<["a", "C"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["INTEGER", "INTEGER"], ["c", "A"], ["B", "BOOLEAN"]>>)
add_command("b", "D", <<["B", "a"], ["A", "BOOLEAN"]>>)
add_command("A", "e", <<["D", "BOOLEAN"], ["C", "INTEGER"], ["b", "BOOLEAN"]>>)
add_call_chain(<<b,c,a,A>>)
add_command("c", "e", <<["e", "INTEGER"], ["D", "BOOLEAN"], ["e", "INTEGER"], ["e", "INTEGER"]>>)
generate_java_code
greater_than
add_call_chain(<<INTEGER,D,b,d,A,B,d,d>>)
add_query("A", "d", <<["e", "A"]>>, "e")
less_than
add_call_chain(<<BOOLEAN,a,B,d,B>>)
add_command("B", "d", <<["C", "BOOLEAN"]>>)
type_check
greater_than
less_than
int_value (25)
add_attribute("A", "D", "BOOLEAN")
type_check
disjunction
greater_than
add_call_chain(<<A,a,C,b,B,C>>)
add_attribute("B", "INTEGER", "BOOLEAN")
add_command("C", "A", <<["B", "INTEGER"], ["INTEGER", "BOOLEAN"], ["b", "INTEGER"], ["c", "BOOLEAN"], ["c", "c"], ["A", "BOOLEAN"], ["a", "INTEGER"], ["e", "C"], ["a", "BOOLEAN"]>>)
bool_value (true)
logical_negation
bool_value (false)
add_attribute("d", "a", "INTEGER")
add_command("C", "d", <<["c", "INTEGER"], ["D", "BOOLEAN"], ["e", "INTEGER"], ["B", "BOOLEAN"], ["A", "INTEGER"], ["B", "B"]>>)
add_command("D", "B", <<["b", "INTEGER"], ["C", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["a", "A"], ["C", "c"], ["B", "A"], ["D", "BOOLEAN"]>>)
add_query("a", "D", <<["e", "A"]>>, "D")
add_query("a", "INTEGER", <<["C", "INTEGER"], ["d", "INTEGER"], ["e", "INTEGER"], ["A", "BOOLEAN"], ["C", "BOOLEAN"]>>, "D")
add_query("INTEGER", "BOOLEAN", <<["d", "BOOLEAN"]>>, "C")
add_call_chain(<<b,A,B,b>>)
add_command("INTEGER", "e", <<["A", "INTEGER"], ["e", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["a", "INTEGER"], ["b", "INTEGER"], ["C", "BOOLEAN"]>>)
add_call_chain(<<c,C>>)
equals
add_query("C", "a", <<["b", "c"], ["e", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["e", "INTEGER"], ["a", "b"], ["D", "INTEGER"], ["BOOLEAN", "e"]>>, "D")
add_query("B", "d", <<["e", "INTEGER"], ["e", "d"], ["BOOLEAN", "INTEGER"], ["C", "B"], ["e", "BOOLEAN"], ["d", "INTEGER"], ["c", "b"], ["A", "INTEGER"], ["b", "BOOLEAN"]>>, "A")
add_command("B", "D", <<["INTEGER", "a"], ["c", "INTEGER"], ["b", "INTEGER"], ["b", "INTEGER"], ["a", "BOOLEAN"]>>)
add_class(d)
add_class(D)
add_command("B", "BOOLEAN", <<["C", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>)
add_query("d", "BOOLEAN", <<["c", "A"], ["e", "b"], ["B", "INTEGER"], ["C", "d"]>>, "B")
add_query("c", "B", <<["BOOLEAN", "BOOLEAN"], ["D", "d"], ["B", "C"], ["BOOLEAN", "d"], ["e", "c"], ["BOOLEAN", "BOOLEAN"], ["D", "INTEGER"]>>, "D")
disjunction
add_call_chain(<<B,BOOLEAN,A>>)
int_value (22)
int_value (26)
generate_java_code
add_call_chain(<<d,INTEGER,A,c,e,D>>)
less_than
numerical_negation
add_query("B", "c", <<["b", "BOOLEAN"], ["C", "INTEGER"], ["B", "BOOLEAN"], ["e", "BOOLEAN"], ["a", "BOOLEAN"], ["b", "c"]>>, "D")
equals
add_query("C", "d", <<["e", "INTEGER"], ["e", "BOOLEAN"], ["e", "c"], ["C", "BOOLEAN"], ["d", "INTEGER"]>>, "D")
add_query("A", "D", <<["b", "BOOLEAN"], ["A", "INTEGER"], ["D", "INTEGER"], ["D", "BOOLEAN"]>>, "a")
bool_value (true)
add_attribute("e", "D", "d")
add_call_chain(<<BOOLEAN,c,c,B,d,a,B,d>>)
equals
generate_java_code
add_call_chain(<<d,B,INTEGER,d,A,b,INTEGER,c>>)
int_value (25)
add_class(D)
add_call_chain(<<A>>)
int_value (8)
add_command("c", "B", <<["d", "BOOLEAN"], ["b", "BOOLEAN"]>>)
addition
