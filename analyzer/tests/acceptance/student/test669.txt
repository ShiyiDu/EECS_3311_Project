add_class(BOOLEAN)
add_command("D", "a", <<["d", "B"]>>)
quotient
add_query("d", "C", <<["B", "BOOLEAN"], ["e", "B"], ["A", "BOOLEAN"], ["B", "INTEGER"], ["A", "INTEGER"], ["D", "INTEGER"]>>, "a")
add_command("A", "C", <<["D", "BOOLEAN"], ["c", "e"], ["BOOLEAN", "INTEGER"], ["d", "BOOLEAN"], ["c", "c"], ["D", "INTEGER"]>>)
type_check
conjunction
add_call_chain(<<b,b,C,A,B,D,d,c,BOOLEAN>>)
int_value (32)
add_query("C", "B", <<["C", "INTEGER"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["C", "b"], ["e", "INTEGER"], ["b", "a"], ["b", "BOOLEAN"], ["D", "INTEGER"], ["d", "INTEGER"]>>, "D")
type_check
add_call_chain(<<e,b,D,e,c>>)
add_query("A", "INTEGER", <<["BOOLEAN", "INTEGER"], ["a", "INTEGER"]>>, "a")
add_command("e", "a", <<["a", "BOOLEAN"]>>)
add_call_chain(<<C,D,d>>)
int_value (29)
less_than
int_value (4)
add_call_chain(<<b,BOOLEAN,a,BOOLEAN,a,c>>)
add_call_chain(<<A,C,B,c,C,a>>)
add_query("c", "e", <<["A", "INTEGER"], ["C", "INTEGER"], ["D", "A"], ["c", "BOOLEAN"], ["B", "D"], ["C", "INTEGER"]>>, "D")
add_command("d", "C", <<["B", "C"], ["d", "INTEGER"], ["c", "INTEGER"], ["B", "INTEGER"], ["INTEGER", "INTEGER"], ["e", "BOOLEAN"], ["c", "BOOLEAN"]>>)
logical_negation
logical_negation
equals
add_command("C", "B", <<["D", "INTEGER"], ["B", "e"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["b", "a"], ["b", "D"], ["D", "INTEGER"], ["B", "INTEGER"], ["b", "INTEGER"]>>)
multiplication
less_than
numerical_negation
generate_java_code
generate_java_code
int_value (19)
add_attribute("a", "BOOLEAN", "A")
add_command("C", "C", <<["d", "B"], ["A", "INTEGER"], ["d", "b"], ["a", "INTEGER"], ["d", "B"], ["D", "INTEGER"], ["B", "d"], ["d", "C"]>>)
numerical_negation
int_value (26)
conjunction
add_call_chain(<<INTEGER,B,BOOLEAN>>)
add_class(C)
add_command("B", "C", <<["D", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "INTEGER"], ["b", "BOOLEAN"], ["D", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["A", "c"], ["D", "a"]>>)
add_attribute("a", "a", "INTEGER")
numerical_negation
add_call_chain(<<c,c>>)
int_value (47)
generate_java_code
numerical_negation
add_query("d", "B", <<["C", "D"]>>, "D")
add_query("b", "c", <<["d", "A"], ["b", "a"], ["B", "a"], ["d", "INTEGER"], ["B", "INTEGER"], ["d", "A"]>>, "d")
numerical_negation
quotient
add_command("D", "d", <<["d", "INTEGER"], ["a", "C"], ["C", "BOOLEAN"], ["b", "BOOLEAN"], ["B", "INTEGER"], ["c", "BOOLEAN"]>>)
add_call_chain(<<B,e,C,A,e,c,e>>)
add_call_chain(<<A,e,C,B,B,D,d,BOOLEAN,b>>)
addition
add_attribute("BOOLEAN", "B", "BOOLEAN")
logical_negation
conjunction
bool_value (true)
bool_value (false)
add_class(d)
add_call_chain(<<e,D,D,C,D,e,D,INTEGER,c>>)
add_command("D", "e", <<["e", "INTEGER"]>>)
add_attribute("C", "INTEGER", "A")
disjunction
modulo
add_call_chain(<<c,b,c>>)
bool_value (true)
add_call_chain(<<e,C,A,A,C>>)
less_than
add_command("INTEGER", "C", <<["d", "C"], ["A", "INTEGER"], ["D", "INTEGER"]>>)
add_class(BOOLEAN)
add_command("A", "b", <<["e", "BOOLEAN"], ["A", "BOOLEAN"], ["c", "BOOLEAN"], ["c", "C"], ["c", "BOOLEAN"]>>)
logical_negation
add_attribute("INTEGER", "c", "INTEGER")
type_check
bool_value (true)
add_call_chain(<<A,c,A,D>>)
add_attribute("c", "a", "BOOLEAN")
add_command("C", "D", <<["B", "INTEGER"], ["B", "C"], ["e", "BOOLEAN"], ["d", "b"], ["C", "BOOLEAN"], ["C", "INTEGER"], ["d", "BOOLEAN"], ["a", "INTEGER"]>>)
type_check
int_value (2)
add_call_chain(<<C,D,BOOLEAN,c,D,D,e,a>>)
generate_java_code
add_call_chain(<<INTEGER,D,d,BOOLEAN>>)
int_value (35)
add_attribute("BOOLEAN", "BOOLEAN", "BOOLEAN")
add_query("D", "D", <<["B", "INTEGER"], ["D", "BOOLEAN"], ["D", "D"]>>, "b")
add_call_chain(<<b,A,B,d,e,INTEGER,B,A,c>>)
disjunction
disjunction
modulo
conjunction
greater_than
int_value (25)
int_value (29)
add_query("BOOLEAN", "D", <<["b", "INTEGER"], ["a", "INTEGER"]>>, "B")
add_query("C", "b", <<["D", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "BOOLEAN"], ["e", "BOOLEAN"], ["INTEGER", "INTEGER"]>>, "a")
add_call_chain(<<c,e>>)
add_command("b", "D", <<["A", "d"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["A", "INTEGER"], ["c", "b"], ["INTEGER", "d"]>>)
add_query("b", "B", <<["B", "INTEGER"], ["D", "INTEGER"]>>, "BOOLEAN")
add_call_chain(<<D,INTEGER,e,b>>)
add_call_chain(<<C,BOOLEAN,INTEGER,C,b,B>>)
add_query("BOOLEAN", "b", <<["d", "INTEGER"], ["b", "BOOLEAN"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["BOOLEAN", "A"], ["a", "a"], ["B", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>, "b")
add_attribute("C", "B", "INTEGER")
add_call_chain(<<C,C,D,b,A>>)
add_attribute("e", "a", "INTEGER")
add_query("BOOLEAN", "a", <<["A", "BOOLEAN"], ["b", "C"]>>, "B")
less_than
add_attribute("A", "INTEGER", "INTEGER")
add_call_chain(<<c,BOOLEAN,a,INTEGER>>)
generate_java_code
add_call_chain(<<A,a,B,d,INTEGER,c>>)
disjunction
add_attribute("BOOLEAN", "c", "BOOLEAN")
add_attribute("C", "b", "A")
type_check
add_attribute("D", "BOOLEAN", "INTEGER")
int_value (23)
add_call_chain(<<D,d,C,B,c,C,d,D,c>>)
add_call_chain(<<d,b,A>>)
quotient
logical_negation
logical_negation
bool_value (false)
add_command("A", "D", <<["b", "BOOLEAN"], ["b", "C"]>>)
add_query("d", "BOOLEAN", <<["A", "D"], ["A", "d"], ["e", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "B"], ["D", "INTEGER"], ["c", "INTEGER"]>>, "D")
numerical_negation
int_value (7)
add_attribute("A", "BOOLEAN", "b")
add_call_chain(<<b,B,a,b,d,A,A,d,INTEGER>>)
int_value (37)
bool_value (false)
add_class(c)
add_class(C)
conjunction
type_check
type_check
addition
modulo
add_call_chain(<<D,INTEGER,C,d,D,e>>)
add_command("A", "B", <<["D", "INTEGER"], ["A", "INTEGER"], ["C", "C"]>>)
add_call_chain(<<b>>)
less_than
conjunction
int_value (31)
int_value (19)
logical_negation
numerical_negation
conjunction
add_query("C", "A", <<["INTEGER", "BOOLEAN"], ["c", "INTEGER"], ["C", "BOOLEAN"]>>, "D")
logical_negation
add_call_chain(<<C,d,a,d,INTEGER>>)
conjunction
add_command("e", "D", <<["c", "B"], ["b", "BOOLEAN"], ["C", "INTEGER"], ["d", "d"], ["A", "INTEGER"], ["d", "BOOLEAN"]>>)
add_call_chain(<<d,B,e,b>>)
add_attribute("C", "e", "BOOLEAN")
add_query("BOOLEAN", "c", <<["b", "INTEGER"], ["b", "BOOLEAN"]>>, "e")
type_check
add_query("D", "D", <<["INTEGER", "BOOLEAN"], ["C", "INTEGER"], ["B", "INTEGER"], ["e", "b"], ["c", "c"], ["C", "b"], ["a", "INTEGER"], ["d", "D"], ["c", "BOOLEAN"]>>, "A")
add_query("d", "A", <<["c", "INTEGER"], ["INTEGER", "BOOLEAN"], ["d", "B"], ["e", "INTEGER"], ["B", "a"], ["a", "INTEGER"], ["A", "b"], ["c", "INTEGER"], ["D", "C"]>>, "BOOLEAN")
add_call_chain(<<A,a,c,a,B,B>>)
add_attribute("d", "e", "c")
add_call_chain(<<b,A,d,e,b,d,d,a>>)
add_call_chain(<<C,c>>)
add_call_chain(<<BOOLEAN,e,BOOLEAN,C,B>>)
add_call_chain(<<B,B,e,BOOLEAN,c,b,a,D,b>>)
logical_negation
int_value (23)
disjunction
equals
add_class(a)
add_call_chain(<<A,e,a,b,e,A,d,C,c>>)
type_check
add_class(c)
add_attribute("e", "c", "INTEGER")
add_call_chain(<<A,d,e,a,C,D,B,e,e>>)
add_command("d", "a", <<["B", "INTEGER"], ["C", "INTEGER"]>>)
less_than
bool_value (true)
add_command("d", "d", <<["B", "BOOLEAN"], ["INTEGER", "C"]>>)
add_command("BOOLEAN", "c", <<["BOOLEAN", "C"]>>)
bool_value (true)
add_attribute("b", "c", "A")
add_attribute("B", "C", "BOOLEAN")
add_call_chain(<<D>>)
add_query("C", "e", <<["BOOLEAN", "INTEGER"], ["a", "e"], ["C", "a"]>>, "d")
numerical_negation
modulo
int_value (27)
bool_value (false)
int_value (45)
bool_value (true)
generate_java_code
disjunction
add_query("a", "C", <<["D", "INTEGER"], ["C", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "B"], ["A", "INTEGER"], ["b", "BOOLEAN"], ["C", "BOOLEAN"]>>, "a")
add_class(e)
numerical_negation
int_value (42)
add_class(B)
generate_java_code
logical_negation
int_value (33)
bool_value (false)
add_call_chain(<<b,a,d,e,B,D,e>>)
int_value (41)
add_class(d)
add_command("D", "d", <<["BOOLEAN", "BOOLEAN"], ["e", "BOOLEAN"], ["a", "INTEGER"], ["C", "BOOLEAN"], ["A", "INTEGER"]>>)
logical_negation
less_than
add_query("d", "b", <<["e", "B"], ["c", "D"], ["c", "c"], ["a", "BOOLEAN"], ["A", "e"]>>, "C")
equals
int_value (23)
add_query("A", "B", <<["C", "INTEGER"], ["a", "c"], ["d", "INTEGER"], ["a", "C"], ["A", "INTEGER"], ["b", "BOOLEAN"]>>, "A")
generate_java_code
type_check
add_attribute("b", "e", "INTEGER")
logical_negation
add_attribute("a", "A", "INTEGER")
type_check
numerical_negation
addition
add_command("A", "c", <<["e", "BOOLEAN"], ["e", "BOOLEAN"]>>)
add_call_chain(<<A,c,C,C,a>>)
add_call_chain(<<A,B>>)
type_check
add_call_chain(<<a,B,b,INTEGER,c>>)
