numerical_negation
disjunction
add_attribute("d", "D", "BOOLEAN")
add_call_chain(<<C,d>>)
add_query("B", "B", <<["C", "e"], ["B", "D"], ["B", "INTEGER"], ["D", "INTEGER"], ["a", "b"], ["A", "INTEGER"]>>, "A")
generate_java_code
add_call_chain(<<d,c,e,e>>)
add_query("A", "B", <<["e", "d"], ["e", "A"], ["INTEGER", "INTEGER"], ["A", "BOOLEAN"], ["C", "INTEGER"], ["d", "BOOLEAN"]>>, "c")
disjunction
add_attribute("a", "D", "B")
add_call_chain(<<a,C,D,A,a,C,b,C>>)
type_check
add_call_chain(<<a,a,B,D,INTEGER>>)
add_call_chain(<<d,D,D,d>>)
add_call_chain(<<A,d,B,c,A,B,a,b>>)
add_call_chain(<<A,d,INTEGER>>)
logical_negation
bool_value (true)
numerical_negation
add_query("e", "B", <<["D", "BOOLEAN"], ["a", "INTEGER"], ["C", "BOOLEAN"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["B", "INTEGER"], ["b", "INTEGER"]>>, "C")
greater_than
disjunction
generate_java_code
bool_value (true)
add_query("A", "B", <<["A", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["A", "BOOLEAN"], ["B", "INTEGER"], ["A", "b"], ["b", "INTEGER"]>>, "C")
add_class(C)
generate_java_code
add_call_chain(<<B>>)
less_than
generate_java_code
add_class(C)
add_query("A", "A", <<["INTEGER", "e"], ["A", "BOOLEAN"], ["D", "C"]>>, "BOOLEAN")
add_query("A", "C", <<["b", "BOOLEAN"], ["INTEGER", "INTEGER"], ["BOOLEAN", "INTEGER"], ["B", "INTEGER"], ["B", "A"], ["c", "INTEGER"]>>, "A")
bool_value (true)
bool_value (false)
add_attribute("A", "e", "B")
add_query("b", "e", <<["a", "BOOLEAN"], ["b", "d"], ["a", "e"], ["BOOLEAN", "INTEGER"], ["b", "INTEGER"], ["D", "INTEGER"], ["b", "D"], ["c", "INTEGER"], ["BOOLEAN", "b"]>>, "BOOLEAN")
add_call_chain(<<C,C,d,e,b,b,a,d,d>>)
bool_value (true)
int_value (28)
type_check
type_check
disjunction
add_call_chain(<<BOOLEAN>>)
generate_java_code
add_class(e)
add_attribute("D", "b", "BOOLEAN")
type_check
modulo
add_call_chain(<<C,B,B>>)
add_call_chain(<<INTEGER,A,B,A,B,A,BOOLEAN,D>>)
less_than
add_call_chain(<<B,c>>)
numerical_negation
int_value (30)
add_query("e", "c", <<["A", "BOOLEAN"], ["a", "e"], ["D", "D"], ["C", "INTEGER"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["b", "INTEGER"]>>, "C")
add_class(B)
greater_than
add_attribute("A", "e", "INTEGER")
int_value (13)
add_class(d)
add_query("e", "e", <<["e", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["D", "BOOLEAN"], ["a", "INTEGER"]>>, "C")
generate_java_code
add_class(a)
logical_negation
add_call_chain(<<C,a,C,a,d,c,A>>)
add_query("d", "C", <<["A", "D"], ["D", "INTEGER"]>>, "a")
numerical_negation
add_query("d", "e", <<["a", "BOOLEAN"], ["A", "INTEGER"], ["C", "INTEGER"], ["a", "BOOLEAN"], ["D", "INTEGER"], ["b", "BOOLEAN"], ["D", "C"]>>, "B")
int_value (31)
greater_than
add_command("D", "A", <<["BOOLEAN", "INTEGER"], ["d", "INTEGER"], ["e", "INTEGER"], ["c", "BOOLEAN"], ["e", "INTEGER"], ["a", "BOOLEAN"], ["A", "e"], ["C", "A"], ["C", "BOOLEAN"]>>)
modulo
add_call_chain(<<A>>)
add_call_chain(<<b,B,d>>)
add_call_chain(<<BOOLEAN,C,c,e,d,B,D>>)
generate_java_code
int_value (9)
add_command("A", "C", <<["b", "B"], ["e", "a"], ["C", "INTEGER"]>>)
logical_negation
add_call_chain(<<b>>)
generate_java_code
add_call_chain(<<BOOLEAN,D,d,a,e,a>>)
bool_value (true)
add_call_chain(<<B,e,a>>)
add_attribute("e", "B", "B")
modulo
logical_negation
generate_java_code
add_command("e", "BOOLEAN", <<["c", "BOOLEAN"], ["INTEGER", "INTEGER"]>>)
bool_value (true)
logical_negation
add_query("c", "INTEGER", <<["a", "e"], ["BOOLEAN", "BOOLEAN"], ["D", "INTEGER"], ["d", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "BOOLEAN"], ["b", "BOOLEAN"], ["INTEGER", "c"]>>, "BOOLEAN")
int_value (35)
add_call_chain(<<c,D,c,a,a,BOOLEAN>>)
add_class(A)
add_call_chain(<<d,b,D>>)
add_call_chain(<<b,b,e,C,D,B>>)
multiplication
add_attribute("a", "BOOLEAN", "BOOLEAN")
bool_value (true)
bool_value (false)
type_check
add_attribute("C", "a", "INTEGER")
add_command("c", "b", <<["B", "INTEGER"], ["c", "a"], ["c", "INTEGER"], ["B", "BOOLEAN"], ["a", "BOOLEAN"], ["A", "A"], ["d", "BOOLEAN"], ["INTEGER", "d"], ["BOOLEAN", "A"]>>)
numerical_negation
multiplication
bool_value (true)
add_command("b", "c", <<["e", "e"], ["b", "d"], ["d", "e"], ["B", "A"], ["BOOLEAN", "D"], ["d", "INTEGER"], ["B", "BOOLEAN"], ["B", "A"], ["b", "e"]>>)
add_call_chain(<<a,BOOLEAN,C,A,B,B,A,C>>)
add_call_chain(<<C,D>>)
numerical_negation
bool_value (true)
add_query("B", "C", <<["B", "A"], ["INTEGER", "BOOLEAN"], ["A", "INTEGER"], ["a", "BOOLEAN"], ["D", "INTEGER"]>>, "b")
subtraction
bool_value (true)
add_attribute("b", "b", "C")
bool_value (false)
bool_value (true)
equals
add_attribute("c", "C", "INTEGER")
less_than
bool_value (true)
int_value (20)
logical_negation
greater_than
int_value (10)
add_call_chain(<<C>>)
add_command("C", "c", <<["INTEGER", "INTEGER"], ["e", "c"], ["B", "INTEGER"], ["a", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["A", "A"]>>)
disjunction
logical_negation
generate_java_code
add_class(d)
add_command("b", "B", <<["BOOLEAN", "INTEGER"], ["d", "INTEGER"], ["A", "BOOLEAN"], ["A", "BOOLEAN"], ["B", "a"], ["B", "INTEGER"]>>)
add_command("d", "e", <<["a", "BOOLEAN"], ["c", "BOOLEAN"], ["a", "a"], ["d", "INTEGER"], ["c", "b"], ["d", "INTEGER"]>>)
subtraction
int_value (43)
add_command("c", "d", <<["a", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "D"]>>)
add_call_chain(<<c,e>>)
add_attribute("b", "A", "BOOLEAN")
add_class(B)
add_call_chain(<<c>>)
int_value (4)
add_query("b", "BOOLEAN", <<["a", "BOOLEAN"], ["A", "INTEGER"], ["B", "INTEGER"], ["c", "INTEGER"], ["c", "d"], ["A", "A"], ["B", "C"], ["B", "BOOLEAN"], ["c", "B"]>>, "A")
bool_value (true)
bool_value (false)
logical_negation
add_call_chain(<<C,e,A,C,c,e,b>>)
logical_negation
add_command("C", "c", <<["B", "INTEGER"]>>)
add_query("a", "e", <<["D", "BOOLEAN"], ["a", "BOOLEAN"], ["b", "A"], ["c", "BOOLEAN"], ["D", "BOOLEAN"]>>, "c")
add_call_chain(<<B>>)
bool_value (true)
multiplication
less_than
add_attribute("c", "D", "INTEGER")
add_call_chain(<<c,d>>)
add_command("e", "d", <<["A", "INTEGER"], ["c", "INTEGER"], ["INTEGER", "INTEGER"], ["INTEGER", "INTEGER"], ["e", "INTEGER"]>>)
generate_java_code
generate_java_code
bool_value (true)
add_attribute("B", "a", "BOOLEAN")
add_attribute("b", "C", "INTEGER")
addition
subtraction
type_check
disjunction
generate_java_code
add_command("c", "C", <<["D", "a"], ["d", "BOOLEAN"], ["D", "d"], ["D", "INTEGER"], ["d", "a"]>>)
add_command("e", "a", <<["B", "c"], ["C", "BOOLEAN"], ["e", "A"], ["A", "BOOLEAN"]>>)
add_class(b)
add_call_chain(<<b,c>>)
add_call_chain(<<c>>)
add_call_chain(<<a,c,c,a,BOOLEAN,c,a,C,BOOLEAN>>)
add_call_chain(<<A,c,b,b,b,INTEGER,b,D>>)
add_query("d", "D", <<["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "D"], ["d", "b"], ["c", "b"], ["D", "INTEGER"]>>, "C")
conjunction
greater_than
add_call_chain(<<C,A>>)
numerical_negation
add_command("INTEGER", "C", <<["d", "c"], ["INTEGER", "INTEGER"], ["a", "D"], ["d", "INTEGER"], ["c", "e"], ["d", "INTEGER"], ["b", "B"], ["c", "INTEGER"], ["BOOLEAN", "INTEGER"]>>)
multiplication
add_class(A)
add_attribute("c", "a", "BOOLEAN")
subtraction
quotient
add_call_chain(<<C,d,c>>)
add_call_chain(<<C,e,B,D,BOOLEAN,B,A,D>>)
add_call_chain(<<d>>)
logical_negation
add_query("e", "d", <<["B", "d"], ["e", "BOOLEAN"], ["B", "BOOLEAN"], ["e", "INTEGER"], ["C", "INTEGER"], ["A", "C"], ["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["c", "INTEGER"]>>, "INTEGER")
add_command("C", "A", <<["e", "A"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["B", "BOOLEAN"], ["b", "INTEGER"], ["B", "D"], ["C", "BOOLEAN"]>>)
add_class(D)
add_call_chain(<<a,b,B,D,D,B,c>>)
numerical_negation
equals
multiplication
add_call_chain(<<a,b,A,b>>)
numerical_negation
numerical_negation
int_value (19)
add_query("a", "B", <<["a", "a"], ["A", "INTEGER"], ["e", "INTEGER"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["b", "INTEGER"], ["B", "BOOLEAN"]>>, "c")
bool_value (false)
add_call_chain(<<C>>)
add_attribute("e", "a", "INTEGER")
add_command("c", "a", <<["d", "INTEGER"]>>)
bool_value (false)
add_call_chain(<<INTEGER,D,c,a>>)
bool_value (false)
bool_value (true)
int_value (37)
add_query("D", "a", <<["c", "A"], ["d", "BOOLEAN"], ["B", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["b", "e"], ["BOOLEAN", "BOOLEAN"], ["c", "BOOLEAN"], ["B", "e"]>>, "d")
equals
equals
type_check
type_check
generate_java_code
bool_value (true)
generate_java_code
bool_value (false)
add_command("C", "B", <<["d", "D"], ["b", "C"], ["d", "INTEGER"], ["B", "INTEGER"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "BOOLEAN"], ["e", "b"], ["e", "c"]>>)
modulo
add_attribute("BOOLEAN", "C", "BOOLEAN")
add_command("D", "d", <<["A", "BOOLEAN"], ["C", "BOOLEAN"], ["INTEGER", "INTEGER"]>>)
add_command("C", "A", <<["a", "INTEGER"], ["e", "INTEGER"]>>)
add_class(BOOLEAN)
int_value (37)
bool_value (false)
logical_negation
subtraction
add_query("d", "e", <<["C", "INTEGER"], ["C", "INTEGER"], ["D", "A"], ["d", "INTEGER"], ["D", "INTEGER"], ["b", "b"], ["a", "BOOLEAN"]>>, "b")
add_class(D)
bool_value (false)
numerical_negation
bool_value (false)
generate_java_code
generate_java_code
add_class(c)
numerical_negation
generate_java_code
add_attribute("B", "c", "INTEGER")
add_query("e", "B", <<["e", "D"], ["INTEGER", "BOOLEAN"]>>, "D")
int_value (10)
disjunction
add_call_chain(<<B,B>>)
add_command("B", "c", <<["d", "BOOLEAN"], ["a", "BOOLEAN"]>>)
add_call_chain(<<BOOLEAN,B,D,A,d>>)
conjunction
add_attribute("c", "b", "e")
int_value (30)
add_attribute("A", "a", "a")
type_check
int_value (15)
bool_value (true)
add_class(c)
add_call_chain(<<c>>)
add_command("B", "e", <<["e", "B"], ["a", "INTEGER"], ["c", "BOOLEAN"]>>)
numerical_negation
numerical_negation
add_command("D", "c", <<["BOOLEAN", "INTEGER"], ["D", "BOOLEAN"]>>)
add_attribute("B", "A", "INTEGER")
less_than
add_attribute("A", "A", "INTEGER")
add_call_chain(<<e,d,C,BOOLEAN,c>>)
conjunction
add_call_chain(<<b,A,C,BOOLEAN,e,C,a>>)
bool_value (true)
less_than
add_call_chain(<<C,B,e,B,B>>)
equals
logical_negation
add_query("a", "b", <<["D", "BOOLEAN"], ["d", "INTEGER"], ["A", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "c"], ["INTEGER", "INTEGER"], ["INTEGER", "BOOLEAN"], ["c", "BOOLEAN"]>>, "a")
bool_value (false)
greater_than
add_class(A)
add_query("D", "D", <<["C", "BOOLEAN"], ["B", "INTEGER"], ["b", "INTEGER"], ["C", "INTEGER"], ["D", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "INTEGER"]>>, "C")
add_call_chain(<<e,a,B>>)
add_query("A", "e", <<["D", "BOOLEAN"]>>, "INTEGER")
add_command("B", "b", <<["d", "C"], ["D", "INTEGER"], ["A", "D"], ["C", "e"]>>)
