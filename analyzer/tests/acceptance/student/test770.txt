bool_value (false)
add_call_chain(<<B,BOOLEAN,BOOLEAN,d,C,INTEGER,a,C,C>>)
bool_value (false)
add_command("BOOLEAN", "BOOLEAN", <<["a", "BOOLEAN"], ["C", "INTEGER"], ["C", "b"], ["b", "INTEGER"], ["B", "INTEGER"], ["B", "BOOLEAN"], ["B", "BOOLEAN"]>>)
type_check
type_check
modulo
modulo
int_value (6)
add_command("C", "C", <<["A", "a"], ["e", "INTEGER"], ["a", "a"], ["A", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["C", "BOOLEAN"], ["B", "INTEGER"], ["d", "INTEGER"]>>)
numerical_negation
disjunction
add_command("C", "B", <<["D", "INTEGER"]>>)
numerical_negation
add_call_chain(<<d,c>>)
add_query("D", "B", <<["a", "BOOLEAN"]>>, "B")
add_call_chain(<<d,D>>)
add_command("c", "D", <<["C", "BOOLEAN"], ["a", "BOOLEAN"], ["e", "INTEGER"], ["A", "B"], ["BOOLEAN", "b"], ["a", "A"], ["B", "b"]>>)
int_value (43)
add_call_chain(<<a,A,C,A,A,B,C,b,C>>)
equals
add_call_chain(<<a,BOOLEAN,a,d,b,e>>)
generate_java_code
less_than
numerical_negation
int_value (31)
add_command("A", "c", <<["b", "INTEGER"], ["B", "INTEGER"], ["e", "INTEGER"], ["b", "D"], ["c", "INTEGER"], ["b", "B"], ["A", "INTEGER"], ["A", "INTEGER"], ["a", "BOOLEAN"]>>)
type_check
numerical_negation
add_attribute("a", "b", "C")
add_call_chain(<<D,d,b>>)
add_command("a", "D", <<["D", "INTEGER"], ["a", "BOOLEAN"], ["D", "BOOLEAN"]>>)
add_call_chain(<<e,d,C,D,B,c,A,BOOLEAN>>)
conjunction
add_attribute("C", "b", "b")
numerical_negation
add_call_chain(<<c,a,BOOLEAN,BOOLEAN,C>>)
bool_value (false)
int_value (34)
int_value (12)
add_class(A)
add_query("d", "d", <<["C", "INTEGER"], ["B", "C"], ["b", "BOOLEAN"], ["D", "INTEGER"], ["C", "BOOLEAN"], ["A", "INTEGER"]>>, "a")
numerical_negation
addition
add_command("c", "d", <<["BOOLEAN", "BOOLEAN"], ["C", "A"]>>)
bool_value (true)
bool_value (false)
int_value (21)
generate_java_code
add_command("D", "d", <<["INTEGER", "INTEGER"], ["d", "BOOLEAN"], ["D", "C"], ["b", "BOOLEAN"], ["D", "INTEGER"], ["a", "BOOLEAN"]>>)
addition
add_attribute("c", "c", "INTEGER")
logical_negation
add_call_chain(<<b,a,e,a,B,INTEGER,e,a>>)
add_class(D)
bool_value (true)
subtraction
generate_java_code
bool_value (false)
add_call_chain(<<b,D,D,a,b,INTEGER,c,B>>)
add_command("D", "INTEGER", <<["e", "D"], ["a", "INTEGER"], ["a", "BOOLEAN"], ["D", "BOOLEAN"], ["b", "INTEGER"], ["d", "a"], ["A", "c"]>>)
add_call_chain(<<B,C,B,D>>)
add_command("c", "d", <<["D", "BOOLEAN"], ["BOOLEAN", "C"], ["BOOLEAN", "BOOLEAN"], ["b", "INTEGER"], ["B", "D"], ["BOOLEAN", "e"], ["C", "INTEGER"], ["e", "B"], ["A", "BOOLEAN"]>>)
add_command("B", "BOOLEAN", <<["e", "BOOLEAN"], ["e", "INTEGER"], ["A", "BOOLEAN"], ["c", "d"]>>)
add_command("e", "B", <<["e", "d"], ["INTEGER", "INTEGER"], ["a", "INTEGER"]>>)
add_class(INTEGER)
logical_negation
add_call_chain(<<D,D,A,c,b,C,a,C>>)
quotient
numerical_negation
generate_java_code
numerical_negation
generate_java_code
logical_negation
numerical_negation
bool_value (false)
add_class(e)
int_value (34)
add_call_chain(<<D,B,C>>)
quotient
add_query("c", "c", <<["c", "A"], ["B", "d"], ["e", "INTEGER"], ["D", "BOOLEAN"], ["INTEGER", "INTEGER"], ["e", "BOOLEAN"], ["B", "a"], ["b", "D"]>>, "BOOLEAN")
type_check
add_class(B)
add_call_chain(<<A,c,c,e,d,C,D,e,B>>)
numerical_negation
int_value (48)
add_call_chain(<<C,d,B,D,A>>)
add_call_chain(<<d,A,c,C,D,e,c>>)
add_call_chain(<<A,a,c,a,c>>)
numerical_negation
add_attribute("a", "C", "INTEGER")
greater_than
add_command("a", "A", <<["C", "INTEGER"], ["B", "b"], ["d", "INTEGER"], ["B", "INTEGER"], ["D", "D"], ["a", "c"]>>)
logical_negation
add_attribute("b", "A", "INTEGER")
bool_value (true)
int_value (39)
int_value (30)
int_value (29)
int_value (39)
logical_negation
disjunction
add_command("D", "INTEGER", <<["d", "b"], ["INTEGER", "BOOLEAN"], ["d", "INTEGER"], ["a", "BOOLEAN"], ["d", "INTEGER"], ["B", "INTEGER"], ["a", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["e", "BOOLEAN"]>>)
modulo
add_class(D)
logical_negation
add_query("C", "B", <<["b", "A"], ["e", "BOOLEAN"], ["a", "BOOLEAN"], ["BOOLEAN", "c"], ["B", "A"]>>, "D")
add_call_chain(<<d,d,D,d,A>>)
add_command("a", "a", <<["B", "BOOLEAN"], ["B", "INTEGER"], ["e", "INTEGER"], ["D", "BOOLEAN"], ["A", "B"], ["C", "INTEGER"]>>)
numerical_negation
type_check
add_command("a", "e", <<["D", "BOOLEAN"], ["A", "BOOLEAN"], ["A", "B"], ["B", "INTEGER"], ["e", "INTEGER"], ["a", "INTEGER"], ["INTEGER", "BOOLEAN"]>>)
add_call_chain(<<a,C,B,C,b>>)
multiplication
add_call_chain(<<c,D,c,e,b,D>>)
less_than
generate_java_code
add_call_chain(<<B,A,d,INTEGER,D,BOOLEAN,BOOLEAN,A,d>>)
numerical_negation
add_query("D", "BOOLEAN", <<["D", "BOOLEAN"], ["C", "INTEGER"], ["INTEGER", "BOOLEAN"], ["c", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>, "INTEGER")
bool_value (true)
add_call_chain(<<C,A,C,b,INTEGER,BOOLEAN>>)
add_command("d", "e", <<["e", "D"]>>)
generate_java_code
disjunction
add_command("C", "d", <<["c", "BOOLEAN"]>>)
bool_value (true)
add_command("C", "e", <<["e", "INTEGER"]>>)
add_command("INTEGER", "BOOLEAN", <<["INTEGER", "BOOLEAN"], ["A", "BOOLEAN"], ["C", "INTEGER"], ["c", "A"]>>)
type_check
add_command("INTEGER", "d", <<["e", "e"]>>)
less_than
bool_value (false)
add_call_chain(<<B,b,B,D,e,d>>)
add_query("c", "b", <<["e", "INTEGER"], ["c", "C"], ["b", "d"], ["e", "C"], ["b", "INTEGER"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["INTEGER", "A"], ["c", "BOOLEAN"]>>, "a")
logical_negation
logical_negation
disjunction
generate_java_code
bool_value (true)
add_attribute("a", "d", "C")
add_call_chain(<<D,a>>)
add_call_chain(<<B,b,A,b,a,BOOLEAN,C,B>>)
bool_value (true)
add_query("INTEGER", "a", <<["C", "A"], ["A", "INTEGER"], ["b", "BOOLEAN"], ["c", "INTEGER"]>>, "b")
bool_value (true)
numerical_negation
add_attribute("d", "D", "INTEGER")
add_attribute("D", "INTEGER", "BOOLEAN")
add_query("INTEGER", "B", <<["BOOLEAN", "INTEGER"], ["B", "INTEGER"], ["D", "INTEGER"], ["a", "INTEGER"], ["c", "BOOLEAN"], ["a", "INTEGER"]>>, "C")
less_than
add_call_chain(<<C,a>>)
add_attribute("C", "c", "D")
bool_value (true)
add_call_chain(<<D>>)
add_command("D", "b", <<["b", "INTEGER"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "BOOLEAN"]>>)
add_command("b", "A", <<["D", "D"], ["e", "INTEGER"], ["a", "INTEGER"], ["C", "INTEGER"], ["c", "BOOLEAN"]>>)
add_command("a", "D", <<["A", "INTEGER"], ["A", "INTEGER"], ["INTEGER", "BOOLEAN"], ["A", "BOOLEAN"], ["C", "B"], ["a", "INTEGER"], ["B", "INTEGER"], ["e", "B"], ["B", "BOOLEAN"]>>)
add_call_chain(<<A,D,d,d,C,B,a>>)
conjunction
add_query("D", "B", <<["b", "B"], ["c", "INTEGER"]>>, "D")
bool_value (false)
bool_value (false)
disjunction
add_command("A", "D", <<["a", "BOOLEAN"], ["C", "INTEGER"], ["A", "B"], ["A", "BOOLEAN"], ["a", "BOOLEAN"], ["D", "BOOLEAN"]>>)
conjunction
bool_value (true)
add_attribute("A", "BOOLEAN", "BOOLEAN")
logical_negation
add_class(d)
less_than
numerical_negation
add_attribute("c", "C", "INTEGER")
logical_negation
add_call_chain(<<a,a,e,A>>)
add_class(A)
add_call_chain(<<d,INTEGER,b>>)
add_query("INTEGER", "e", <<["a", "INTEGER"], ["A", "INTEGER"]>>, "b")
bool_value (true)
add_call_chain(<<A,c,A>>)
add_command("a", "C", <<["INTEGER", "INTEGER"]>>)
conjunction
numerical_negation
add_query("D", "b", <<["B", "INTEGER"], ["B", "A"], ["A", "a"], ["D", "INTEGER"]>>, "a")
add_call_chain(<<e,d,INTEGER,D,d>>)
numerical_negation
add_query("a", "A", <<["b", "INTEGER"], ["C", "BOOLEAN"], ["B", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "BOOLEAN"]>>, "a")
add_class(C)
add_query("d", "c", <<["e", "BOOLEAN"], ["c", "INTEGER"], ["d", "d"], ["d", "BOOLEAN"], ["a", "BOOLEAN"], ["b", "BOOLEAN"], ["B", "BOOLEAN"], ["d", "INTEGER"], ["e", "INTEGER"]>>, "b")
generate_java_code
bool_value (false)
int_value (31)
less_than
add_call_chain(<<e,B,B>>)
add_command("D", "C", <<["D", "b"], ["INTEGER", "b"], ["B", "D"]>>)
add_attribute("e", "b", "INTEGER")
add_class(BOOLEAN)
add_command("A", "d", <<["A", "INTEGER"], ["D", "BOOLEAN"], ["e", "INTEGER"], ["c", "D"], ["e", "INTEGER"], ["d", "C"], ["e", "d"]>>)
modulo
add_class(c)
subtraction
add_attribute("d", "INTEGER", "B")
numerical_negation
addition
add_attribute("a", "C", "INTEGER")
add_call_chain(<<D,d,d,D,C,INTEGER>>)
add_call_chain(<<a,d,A,b,INTEGER,e,C,D,c>>)
numerical_negation
add_call_chain(<<C,B,INTEGER,c,A,a>>)
bool_value (true)
add_call_chain(<<a,d,d,a,a,d>>)
add_class(B)
add_class(INTEGER)
int_value (26)
