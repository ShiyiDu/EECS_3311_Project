add_attribute("B", "B", "BOOLEAN")
add_attribute("D", "B", "BOOLEAN")
add_call_chain(<<c,e,D,C>>)
add_call_chain(<<a,B,C,c,c,e,A,d,INTEGER>>)
int_value (42)
add_call_chain(<<B,e,b,A,A,c,b,e,d>>)
add_attribute("C", "e", "B")
logical_negation
numerical_negation
generate_java_code
add_call_chain(<<BOOLEAN>>)
add_call_chain(<<B>>)
int_value (20)
less_than
add_attribute("b", "e", "INTEGER")
int_value (16)
logical_negation
conjunction
bool_value (true)
type_check
generate_java_code
add_command("INTEGER", "c", <<["a", "BOOLEAN"], ["d", "A"], ["d", "BOOLEAN"]>>)
add_query("D", "B", <<["d", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "INTEGER"], ["b", "BOOLEAN"], ["a", "BOOLEAN"]>>, "INTEGER")
bool_value (true)
add_class(d)
conjunction
add_attribute("D", "c", "e")
disjunction
add_call_chain(<<B,b,D,B,c>>)
numerical_negation
conjunction
generate_java_code
int_value (9)
add_call_chain(<<D,a,b>>)
int_value (13)
add_call_chain(<<a,c>>)
type_check
add_command("INTEGER", "e", <<["A", "INTEGER"], ["D", "INTEGER"], ["e", "INTEGER"], ["A", "D"], ["B", "BOOLEAN"]>>)
add_call_chain(<<INTEGER,c,INTEGER,B>>)
bool_value (false)
numerical_negation
add_call_chain(<<d,B,e,a,D>>)
disjunction
numerical_negation
addition
add_call_chain(<<B,b,A,d,C,BOOLEAN,A,b>>)
add_call_chain(<<BOOLEAN,D,b>>)
add_call_chain(<<INTEGER,A,B,D,d>>)
bool_value (true)
add_query("A", "A", <<["INTEGER", "BOOLEAN"], ["B", "INTEGER"], ["e", "e"], ["A", "A"], ["B", "C"], ["B", "INTEGER"], ["b", "INTEGER"], ["d", "D"], ["d", "INTEGER"]>>, "b")
logical_negation
add_query("a", "a", <<["a", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "INTEGER"], ["b", "e"], ["a", "C"], ["A", "BOOLEAN"], ["c", "BOOLEAN"], ["e", "a"], ["A", "INTEGER"]>>, "b")
logical_negation
add_query("A", "e", <<["d", "d"], ["c", "B"], ["C", "INTEGER"]>>, "A")
int_value (19)
add_class(c)
add_attribute("A", "a", "d")
disjunction
numerical_negation
int_value (33)
int_value (16)
add_query("A", "A", <<["e", "BOOLEAN"], ["a", "BOOLEAN"], ["D", "INTEGER"], ["c", "INTEGER"], ["C", "INTEGER"], ["D", "b"], ["d", "INTEGER"]>>, "d")
add_query("d", "d", <<["D", "d"], ["b", "INTEGER"], ["B", "BOOLEAN"], ["d", "BOOLEAN"], ["d", "INTEGER"], ["e", "BOOLEAN"], ["e", "BOOLEAN"], ["a", "d"]>>, "a")
add_command("b", "c", <<["c", "BOOLEAN"]>>)
logical_negation
add_call_chain(<<b,a,INTEGER,a,C,A>>)
type_check
add_command("INTEGER", "c", <<["d", "INTEGER"], ["B", "BOOLEAN"], ["D", "INTEGER"]>>)
generate_java_code
add_call_chain(<<B,B,e,e,A>>)
add_query("D", "A", <<["A", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>, "d")
add_query("C", "d", <<["b", "a"], ["d", "BOOLEAN"], ["D", "INTEGER"], ["B", "INTEGER"], ["A", "INTEGER"], ["BOOLEAN", "e"]>>, "c")
add_query("e", "D", <<["a", "BOOLEAN"], ["c", "c"], ["b", "e"], ["B", "a"], ["D", "INTEGER"]>>, "D")
add_attribute("D", "D", "A")
add_call_chain(<<b,b,INTEGER,BOOLEAN,C>>)
add_class(C)
int_value (23)
int_value (27)
type_check
add_call_chain(<<INTEGER,B,b,a>>)
add_command("D", "b", <<["BOOLEAN", "INTEGER"], ["INTEGER", "e"], ["C", "C"]>>)
add_command("D", "d", <<["D", "b"], ["INTEGER", "C"], ["d", "BOOLEAN"], ["e", "INTEGER"], ["d", "INTEGER"]>>)
quotient
generate_java_code
add_command("A", "a", <<["a", "INTEGER"], ["B", "INTEGER"], ["a", "INTEGER"], ["a", "b"], ["B", "a"], ["b", "BOOLEAN"], ["e", "BOOLEAN"]>>)
bool_value (false)
add_command("c", "c", <<["b", "BOOLEAN"]>>)
add_attribute("d", "b", "BOOLEAN")
numerical_negation
quotient
add_command("A", "A", <<["C", "BOOLEAN"], ["D", "INTEGER"], ["BOOLEAN", "INTEGER"], ["A", "INTEGER"], ["e", "A"], ["C", "INTEGER"]>>)
int_value (37)
add_command("B", "A", <<["b", "BOOLEAN"], ["INTEGER", "B"], ["B", "c"], ["a", "INTEGER"]>>)
add_attribute("B", "C", "BOOLEAN")
add_query("A", "a", <<["a", "INTEGER"], ["B", "BOOLEAN"], ["a", "b"], ["C", "B"], ["b", "BOOLEAN"], ["a", "B"], ["b", "d"], ["D", "INTEGER"]>>, "c")
add_query("BOOLEAN", "C", <<["BOOLEAN", "D"], ["C", "D"], ["e", "BOOLEAN"], ["C", "a"], ["INTEGER", "INTEGER"], ["a", "BOOLEAN"]>>, "D")
add_call_chain(<<D,C>>)
bool_value (true)
add_command("A", "C", <<["C", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["D", "A"]>>)
logical_negation
add_call_chain(<<C,b,c,d>>)
add_attribute("a", "INTEGER", "BOOLEAN")
add_query("D", "a", <<["A", "BOOLEAN"], ["INTEGER", "e"], ["c", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "B"]>>, "d")
numerical_negation
add_call_chain(<<C,d,e,C,D,e>>)
addition
disjunction
add_command("b", "b", <<["B", "BOOLEAN"], ["c", "BOOLEAN"], ["e", "INTEGER"], ["b", "d"], ["B", "INTEGER"], ["b", "BOOLEAN"], ["D", "BOOLEAN"], ["d", "a"], ["C", "INTEGER"]>>)
type_check
add_call_chain(<<A,B,BOOLEAN,e,INTEGER,A,A,C>>)
add_command("a", "c", <<["b", "INTEGER"], ["a", "d"], ["B", "c"], ["C", "b"], ["c", "BOOLEAN"]>>)
int_value (9)
add_call_chain(<<C,a,C,D,B,e,BOOLEAN>>)
add_call_chain(<<C,c,B,B>>)
add_command("A", "e", <<["A", "BOOLEAN"], ["B", "BOOLEAN"], ["e", "INTEGER"]>>)
add_call_chain(<<d,e,c,a,d,D>>)
less_than
numerical_negation
type_check
add_query("b", "D", <<["b", "INTEGER"], ["c", "INTEGER"], ["C", "BOOLEAN"]>>, "INTEGER")
add_attribute("B", "e", "INTEGER")
add_command("D", "c", <<["D", "INTEGER"], ["c", "BOOLEAN"], ["d", "INTEGER"], ["d", "BOOLEAN"]>>)
add_command("b", "a", <<["a", "D"], ["b", "INTEGER"], ["e", "INTEGER"], ["c", "INTEGER"], ["D", "INTEGER"], ["C", "A"], ["c", "INTEGER"]>>)
add_call_chain(<<INTEGER,BOOLEAN,C,e>>)
add_attribute("D", "C", "INTEGER")
generate_java_code
bool_value (false)
less_than
bool_value (true)
numerical_negation
bool_value (false)
generate_java_code
add_class(A)
generate_java_code
add_command("b", "e", <<["e", "INTEGER"], ["c", "INTEGER"], ["B", "b"], ["C", "D"], ["B", "B"], ["INTEGER", "INTEGER"]>>)
add_query("b", "D", <<["A", "BOOLEAN"], ["A", "INTEGER"], ["C", "b"], ["d", "e"], ["BOOLEAN", "BOOLEAN"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["b", "BOOLEAN"], ["e", "BOOLEAN"]>>, "a")
numerical_negation
add_query("e", "d", <<["B", "c"], ["b", "a"]>>, "b")
add_query("e", "a", <<["BOOLEAN", "BOOLEAN"], ["e", "BOOLEAN"], ["A", "INTEGER"], ["D", "INTEGER"]>>, "D")
add_query("b", "B", <<["A", "a"]>>, "BOOLEAN")
add_query("B", "B", <<["D", "A"], ["INTEGER", "D"], ["B", "INTEGER"], ["D", "INTEGER"], ["e", "BOOLEAN"], ["d", "INTEGER"]>>, "d")
add_attribute("C", "a", "INTEGER")
numerical_negation
add_call_chain(<<c>>)
disjunction
logical_negation
add_call_chain(<<a,A,B>>)
add_attribute("D", "a", "INTEGER")
generate_java_code
add_attribute("a", "d", "INTEGER")
int_value (10)
add_call_chain(<<a,B,A,B,B,b,e,D,b>>)
add_call_chain(<<BOOLEAN,C,C,a,b,A>>)
bool_value (true)
add_call_chain(<<b,C,b,c>>)
add_attribute("C", "e", "BOOLEAN")
bool_value (false)
numerical_negation
logical_negation
bool_value (true)
add_attribute("C", "INTEGER", "BOOLEAN")
add_query("e", "a", <<["e", "c"], ["INTEGER", "BOOLEAN"], ["e", "INTEGER"], ["d", "C"], ["C", "BOOLEAN"], ["B", "INTEGER"]>>, "INTEGER")
add_query("c", "C", <<["D", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["BOOLEAN", "D"], ["e", "INTEGER"], ["D", "b"], ["e", "INTEGER"], ["A", "b"], ["B", "INTEGER"]>>, "a")
conjunction
logical_negation
modulo
add_call_chain(<<a>>)
modulo
int_value (15)
add_command("A", "a", <<["A", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["INTEGER", "c"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["c", "BOOLEAN"]>>)
add_call_chain(<<e,D,C>>)
add_call_chain(<<D,c,B,d>>)
add_query("C", "e", <<["d", "BOOLEAN"], ["c", "BOOLEAN"], ["a", "BOOLEAN"], ["e", "BOOLEAN"], ["c", "C"]>>, "C")
less_than
add_query("B", "d", <<["a", "BOOLEAN"], ["c", "BOOLEAN"]>>, "b")
add_query("e", "D", <<["b", "BOOLEAN"], ["a", "BOOLEAN"], ["e", "INTEGER"]>>, "b")
multiplication
int_value (31)
add_command("a", "e", <<["D", "e"], ["D", "INTEGER"], ["C", "INTEGER"], ["e", "b"], ["b", "INTEGER"], ["C", "D"]>>)
generate_java_code
add_call_chain(<<c,d,A,B,B,b,a,a,D>>)
add_attribute("e", "INTEGER", "A")
add_call_chain(<<D,A,INTEGER,D,d,INTEGER,b,d>>)
bool_value (true)
add_query("A", "C", <<["e", "INTEGER"], ["e", "BOOLEAN"], ["B", "INTEGER"], ["D", "INTEGER"], ["D", "b"], ["C", "A"]>>, "B")
add_attribute("b", "C", "C")
add_call_chain(<<B,INTEGER,C,C,A,A,BOOLEAN,a,B>>)
add_class(b)
numerical_negation
logical_negation
add_command("INTEGER", "e", <<["D", "BOOLEAN"], ["c", "D"], ["d", "INTEGER"], ["A", "a"], ["B", "c"], ["C", "BOOLEAN"], ["a", "BOOLEAN"], ["a", "A"], ["D", "INTEGER"]>>)
generate_java_code
numerical_negation
add_attribute("a", "D", "BOOLEAN")
int_value (9)
add_attribute("BOOLEAN", "BOOLEAN", "BOOLEAN")
add_call_chain(<<A,INTEGER,D,D,C,A>>)
logical_negation
