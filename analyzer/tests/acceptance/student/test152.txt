add_query("a", "a", <<["e", "INTEGER"]>>, "C")
int_value (23)
logical_negation
generate_java_code
numerical_negation
type_check
bool_value (true)
add_call_chain(<<e>>)
add_attribute("INTEGER", "c", "INTEGER")
bool_value (false)
add_command("a", "A", <<["D", "BOOLEAN"], ["e", "INTEGER"], ["D", "e"], ["INTEGER", "INTEGER"]>>)
numerical_negation
add_call_chain(<<b,B,d,a,A,A,C>>)
conjunction
int_value (16)
add_command("D", "INTEGER", <<["INTEGER", "BOOLEAN"], ["e", "BOOLEAN"], ["INTEGER", "INTEGER"], ["C", "d"], ["BOOLEAN", "BOOLEAN"], ["a", "e"], ["INTEGER", "INTEGER"], ["c", "BOOLEAN"], ["c", "B"]>>)
add_call_chain(<<c,B,INTEGER>>)
conjunction
int_value (44)
numerical_negation
add_attribute("e", "D", "INTEGER")
add_command("d", "B", <<["c", "BOOLEAN"], ["e", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "b"], ["d", "BOOLEAN"], ["e", "INTEGER"], ["e", "BOOLEAN"]>>)
add_call_chain(<<e,d,D,b,c,B,INTEGER>>)
add_call_chain(<<e,c,INTEGER>>)
greater_than
add_call_chain(<<D,e,b,D>>)
add_call_chain(<<a,c,C>>)
add_attribute("INTEGER", "INTEGER", "BOOLEAN")
add_command("e", "B", <<["a", "d"], ["c", "BOOLEAN"], ["c", "A"], ["c", "BOOLEAN"], ["e", "INTEGER"]>>)
int_value (18)
greater_than
addition
add_command("b", "INTEGER", <<["c", "BOOLEAN"], ["c", "INTEGER"], ["C", "e"], ["D", "C"], ["B", "BOOLEAN"], ["d", "INTEGER"]>>)
add_query("C", "A", <<["d", "C"], ["c", "BOOLEAN"], ["B", "INTEGER"], ["A", "BOOLEAN"]>>, "e")
add_class(B)
add_command("e", "D", <<["D", "INTEGER"], ["C", "c"], ["BOOLEAN", "BOOLEAN"], ["D", "INTEGER"], ["B", "C"]>>)
add_call_chain(<<C,c,e,a,BOOLEAN,A,A,a,D>>)
add_call_chain(<<A,B>>)
add_query("C", "e", <<["A", "A"], ["d", "a"], ["a", "BOOLEAN"], ["A", "d"]>>, "A")
add_attribute("e", "b", "e")
conjunction
type_check
add_call_chain(<<a,e,a,b,b>>)
add_query("B", "e", <<["A", "BOOLEAN"], ["A", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["C", "INTEGER"], ["b", "INTEGER"], ["D", "BOOLEAN"], ["B", "INTEGER"]>>, "C")
add_class(D)
add_call_chain(<<b>>)
subtraction
add_attribute("B", "a", "BOOLEAN")
numerical_negation
add_query("INTEGER", "b", <<["C", "INTEGER"], ["D", "BOOLEAN"], ["e", "BOOLEAN"], ["B", "BOOLEAN"], ["d", "BOOLEAN"], ["B", "INTEGER"], ["C", "BOOLEAN"], ["C", "INTEGER"], ["INTEGER", "BOOLEAN"]>>, "BOOLEAN")
logical_negation
type_check
add_query("C", "c", <<["INTEGER", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["D", "BOOLEAN"], ["A", "d"], ["C", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "b"], ["D", "b"], ["c", "BOOLEAN"]>>, "A")
add_query("D", "D", <<["d", "BOOLEAN"], ["D", "D"]>>, "d")
logical_negation
int_value (44)
add_command("BOOLEAN", "C", <<["c", "INTEGER"], ["b", "INTEGER"], ["D", "BOOLEAN"], ["A", "D"], ["b", "c"]>>)
add_query("a", "B", <<["D", "BOOLEAN"], ["B", "INTEGER"], ["B", "BOOLEAN"], ["A", "INTEGER"], ["d", "D"], ["B", "INTEGER"], ["A", "INTEGER"], ["b", "b"]>>, "A")
conjunction
add_query("e", "A", <<["C", "e"], ["D", "D"], ["c", "C"], ["c", "BOOLEAN"], ["e", "a"], ["b", "INTEGER"], ["a", "BOOLEAN"], ["D", "INTEGER"], ["C", "A"]>>, "e")
add_command("e", "B", <<["c", "BOOLEAN"], ["c", "INTEGER"], ["B", "INTEGER"], ["C", "INTEGER"], ["c", "INTEGER"], ["b", "d"]>>)
int_value (6)
add_query("D", "C", <<["A", "d"], ["B", "INTEGER"], ["INTEGER", "BOOLEAN"], ["B", "INTEGER"], ["B", "BOOLEAN"], ["B", "BOOLEAN"], ["b", "INTEGER"], ["A", "c"]>>, "D")
add_class(a)
subtraction
bool_value (false)
numerical_negation
add_command("e", "B", <<["A", "INTEGER"]>>)
add_call_chain(<<B,c,a,C,B,e,D>>)
add_command("C", "c", <<["C", "BOOLEAN"], ["b", "BOOLEAN"], ["C", "B"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["INTEGER", "BOOLEAN"]>>)
add_call_chain(<<a>>)
add_call_chain(<<C,A>>)
add_call_chain(<<e,a,D>>)
multiplication
int_value (30)
conjunction
add_call_chain(<<A>>)
int_value (49)
logical_negation
numerical_negation
add_query("e", "b", <<["a", "BOOLEAN"], ["D", "A"], ["b", "d"]>>, "C")
add_query("A", "A", <<["C", "INTEGER"], ["B", "INTEGER"], ["d", "BOOLEAN"], ["b", "BOOLEAN"], ["e", "BOOLEAN"], ["A", "BOOLEAN"]>>, "c")
add_attribute("A", "B", "INTEGER")
numerical_negation
generate_java_code
bool_value (false)
disjunction
type_check
type_check
bool_value (true)
generate_java_code
disjunction
subtraction
add_attribute("A", "A", "INTEGER")
less_than
bool_value (true)
int_value (21)
int_value (25)
add_query("A", "b", <<["e", "A"], ["B", "INTEGER"], ["C", "c"], ["A", "INTEGER"]>>, "C")
add_call_chain(<<B,C,e,INTEGER,c,b,D>>)
add_class(C)
add_call_chain(<<c,a,INTEGER,a>>)
greater_than
add_query("B", "D", <<["D", "A"], ["A", "BOOLEAN"], ["c", "INTEGER"], ["C", "BOOLEAN"]>>, "c")
generate_java_code
type_check
disjunction
disjunction
logical_negation
bool_value (false)
numerical_negation
add_attribute("A", "a", "INTEGER")
add_call_chain(<<A,A,C,C,b>>)
bool_value (true)
add_call_chain(<<A,B,B,e,D,c,D,e,INTEGER>>)
add_call_chain(<<b,C,D>>)
add_call_chain(<<INTEGER,e,A,b,B,C,INTEGER,e,A>>)
add_command("C", "C", <<["C", "BOOLEAN"], ["d", "b"], ["BOOLEAN", "d"], ["c", "INTEGER"], ["b", "INTEGER"]>>)
add_query("c", "B", <<["B", "BOOLEAN"]>>, "a")
add_call_chain(<<a,b,B,C>>)
numerical_negation
add_query("d", "D", <<["d", "e"], ["b", "BOOLEAN"], ["b", "BOOLEAN"], ["e", "INTEGER"], ["B", "INTEGER"], ["b", "BOOLEAN"], ["D", "c"], ["a", "b"]>>, "INTEGER")
add_class(e)
type_check
add_call_chain(<<a,d,BOOLEAN,c,A,c,d,C,C>>)
add_command("B", "c", <<["C", "BOOLEAN"], ["d", "e"], ["C", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "BOOLEAN"], ["INTEGER", "b"], ["e", "BOOLEAN"], ["a", "BOOLEAN"], ["B", "D"]>>)
subtraction
add_command("A", "a", <<["BOOLEAN", "INTEGER"], ["D", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["a", "INTEGER"], ["B", "BOOLEAN"], ["a", "C"], ["INTEGER", "BOOLEAN"]>>)
logical_negation
type_check
generate_java_code
bool_value (false)
less_than
int_value (5)
int_value (28)
type_check
numerical_negation
greater_than
add_call_chain(<<e,a,c,C,A,c,c,A,D>>)
add_command("d", "e", <<["b", "INTEGER"]>>)
add_call_chain(<<c,a,D,A>>)
bool_value (true)
int_value (3)
bool_value (false)
quotient
add_command("C", "A", <<["c", "INTEGER"], ["e", "BOOLEAN"], ["C", "INTEGER"], ["d", "BOOLEAN"], ["e", "BOOLEAN"]>>)
add_command("A", "B", <<["B", "e"], ["b", "INTEGER"], ["C", "INTEGER"], ["e", "BOOLEAN"]>>)
add_attribute("BOOLEAN", "c", "INTEGER")
add_attribute("C", "b", "A")
add_query("b", "c", <<["e", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["BOOLEAN", "B"]>>, "c")
generate_java_code
add_class(a)
logical_negation
add_attribute("c", "B", "B")
add_call_chain(<<C,B,BOOLEAN,B,a,BOOLEAN>>)
add_call_chain(<<c>>)
add_command("c", "b", <<["B", "b"], ["d", "BOOLEAN"]>>)
logical_negation
int_value (36)
add_command("e", "b", <<["e", "BOOLEAN"], ["A", "INTEGER"], ["C", "a"], ["A", "BOOLEAN"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["d", "INTEGER"]>>)
add_call_chain(<<C,b,A,d,INTEGER,D,B>>)
add_call_chain(<<BOOLEAN,C,D,d,e,C,b,B,c>>)
int_value (6)
int_value (26)
bool_value (false)
disjunction
add_attribute("A", "BOOLEAN", "BOOLEAN")
add_query("c", "e", <<["d", "INTEGER"]>>, "B")
multiplication
logical_negation
equals
int_value (9)
bool_value (false)
