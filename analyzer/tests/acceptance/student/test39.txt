add_query("b", "BOOLEAN", <<["B", "INTEGER"], ["a", "c"], ["A", "a"]>>, "D")
quotient
add_attribute("e", "A", "d")
add_call_chain(<<e,A,d>>)
bool_value (false)
logical_negation
add_command("a", "a", <<["e", "BOOLEAN"], ["b", "INTEGER"], ["A", "BOOLEAN"], ["b", "INTEGER"], ["c", "INTEGER"], ["a", "INTEGER"], ["D", "BOOLEAN"], ["C", "INTEGER"]>>)
add_call_chain(<<BOOLEAN,INTEGER,A,a,C,C,C,c,c>>)
logical_negation
bool_value (false)
add_class(A)
add_call_chain(<<D,d,e,a,B>>)
add_command("d", "A", <<["c", "e"], ["b", "INTEGER"], ["D", "c"], ["e", "INTEGER"], ["c", "e"], ["B", "INTEGER"], ["B", "D"]>>)
int_value (8)
type_check
multiplication
add_attribute("B", "BOOLEAN", "INTEGER")
conjunction
numerical_negation
bool_value (false)
add_command("b", "e", <<["INTEGER", "INTEGER"]>>)
generate_java_code
logical_negation
bool_value (true)
add_call_chain(<<INTEGER,B,b,A,b,A,D,c>>)
int_value (44)
addition
add_query("c", "d", <<["D", "INTEGER"], ["C", "INTEGER"], ["BOOLEAN", "INTEGER"], ["A", "BOOLEAN"], ["A", "BOOLEAN"]>>, "e")
add_command("e", "c", <<["A", "D"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["A", "BOOLEAN"]>>)
addition
add_attribute("A", "a", "INTEGER")
bool_value (false)
add_call_chain(<<BOOLEAN,INTEGER,B,C>>)
int_value (25)
equals
bool_value (true)
add_call_chain(<<A,e,B,D>>)
bool_value (true)
numerical_negation
numerical_negation
add_call_chain(<<B>>)
int_value (47)
bool_value (true)
add_call_chain(<<c,d,C,b>>)
int_value (9)
int_value (39)
type_check
multiplication
equals
add_query("D", "B", <<["C", "INTEGER"], ["a", "BOOLEAN"], ["e", "INTEGER"], ["A", "INTEGER"], ["C", "BOOLEAN"], ["B", "C"], ["c", "INTEGER"], ["b", "INTEGER"], ["c", "d"]>>, "a")
logical_negation
generate_java_code
modulo
int_value (47)
disjunction
generate_java_code
add_attribute("b", "D", "INTEGER")
add_command("B", "INTEGER", <<["D", "d"]>>)
multiplication
add_command("B", "e", <<["e", "a"], ["e", "C"], ["D", "INTEGER"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["A", "d"]>>)
add_command("D", "C", <<["b", "INTEGER"]>>)
bool_value (true)
add_call_chain(<<b,d,D>>)
add_call_chain(<<INTEGER,C>>)
add_call_chain(<<D>>)
add_class(a)
conjunction
add_command("b", "a", <<["A", "INTEGER"]>>)
add_class(a)
type_check
numerical_negation
modulo
disjunction
int_value (46)
logical_negation
bool_value (true)
int_value (24)
logical_negation
bool_value (true)
quotient
less_than
quotient
add_attribute("c", "e", "d")
add_attribute("d", "c", "BOOLEAN")
add_class(d)
int_value (27)
add_call_chain(<<a>>)
generate_java_code
add_class(D)
generate_java_code
add_call_chain(<<A,d,BOOLEAN,B,D,C>>)
quotient
int_value (32)
numerical_negation
modulo
add_class(A)
int_value (4)
bool_value (true)
add_call_chain(<<C,A>>)
add_command("b", "B", <<["C", "B"], ["B", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "INTEGER"], ["b", "INTEGER"], ["D", "B"], ["BOOLEAN", "BOOLEAN"]>>)
type_check
add_call_chain(<<C,A,B,a>>)
less_than
add_call_chain(<<B,D,BOOLEAN,B,b,B,c,c>>)
equals
add_query("c", "D", <<["e", "INTEGER"], ["A", "c"], ["B", "e"], ["C", "BOOLEAN"]>>, "d")
add_command("A", "B", <<["C", "D"]>>)
add_class(BOOLEAN)
add_attribute("BOOLEAN", "A", "BOOLEAN")
add_call_chain(<<C,A,B,C,e>>)
add_query("c", "A", <<["c", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["B", "INTEGER"], ["c", "INTEGER"], ["c", "C"], ["c", "a"], ["a", "INTEGER"], ["D", "INTEGER"], ["c", "INTEGER"]>>, "B")
add_attribute("B", "D", "BOOLEAN")
bool_value (false)
bool_value (true)
add_attribute("C", "a", "B")
add_call_chain(<<c,a,D,a>>)
add_command("INTEGER", "a", <<["d", "d"], ["C", "d"], ["a", "INTEGER"], ["D", "b"]>>)
add_call_chain(<<b,a,e,d>>)
add_attribute("A", "D", "INTEGER")
add_call_chain(<<B,D,D,A,B,BOOLEAN>>)
conjunction
logical_negation
numerical_negation
add_attribute("d", "INTEGER", "BOOLEAN")
add_call_chain(<<INTEGER,a,d,e,A,d,b,d,b>>)
generate_java_code
add_command("B", "a", <<["D", "BOOLEAN"], ["INTEGER", "INTEGER"]>>)
add_call_chain(<<b,d,A,A,B>>)
logical_negation
logical_negation
logical_negation
add_call_chain(<<b,A,B,B,a,A>>)
add_query("b", "A", <<["c", "INTEGER"], ["A", "BOOLEAN"], ["C", "b"], ["e", "a"], ["e", "BOOLEAN"]>>, "BOOLEAN")
add_call_chain(<<B,e,a,B,D,B,B,c,a>>)
type_check
add_query("INTEGER", "A", <<["B", "INTEGER"], ["c", "BOOLEAN"], ["c", "INTEGER"], ["e", "d"], ["D", "BOOLEAN"]>>, "c")
add_command("a", "c", <<["A", "INTEGER"], ["A", "BOOLEAN"], ["B", "c"], ["B", "INTEGER"], ["c", "A"]>>)
conjunction
bool_value (false)
conjunction
add_call_chain(<<c,A,d,e,B,D,B>>)
int_value (27)
conjunction
add_call_chain(<<a,INTEGER,B,d,b>>)
int_value (47)
type_check
logical_negation
conjunction
add_call_chain(<<C,c,d,D,e>>)
add_query("c", "c", <<["D", "INTEGER"], ["B", "INTEGER"], ["b", "INTEGER"], ["C", "BOOLEAN"]>>, "b")
numerical_negation
add_call_chain(<<b,D,e,b,C,B>>)
logical_negation
logical_negation
numerical_negation
add_call_chain(<<INTEGER,d,b,b,a,D,d,C>>)
logical_negation
type_check
int_value (44)
generate_java_code
int_value (38)
int_value (10)
add_call_chain(<<b,e,c>>)
add_call_chain(<<d,d>>)
generate_java_code
add_call_chain(<<b,B,B,e>>)
add_query("A", "A", <<["A", "d"], ["INTEGER", "a"], ["C", "D"], ["B", "INTEGER"]>>, "D")
add_query("a", "D", <<["d", "INTEGER"], ["D", "BOOLEAN"]>>, "B")
add_command("c", "A", <<["A", "INTEGER"], ["INTEGER", "INTEGER"], ["b", "BOOLEAN"], ["C", "A"]>>)
add_call_chain(<<C>>)
add_command("C", "d", <<["D", "BOOLEAN"]>>)
logical_negation
subtraction
add_call_chain(<<c,D>>)
numerical_negation
conjunction
bool_value (false)
add_call_chain(<<INTEGER,D,B,c,BOOLEAN,d,D,A,c>>)
add_query("c", "C", <<["B", "BOOLEAN"], ["D", "BOOLEAN"]>>, "B")
add_call_chain(<<D,A,B>>)
add_call_chain(<<INTEGER,d,d,A,a,D,e,A,A>>)
add_query("c", "e", <<["D", "INTEGER"], ["e", "BOOLEAN"], ["d", "BOOLEAN"], ["A", "BOOLEAN"], ["C", "INTEGER"], ["e", "INTEGER"], ["C", "a"]>>, "D")
add_query("e", "a", <<["b", "D"], ["b", "INTEGER"], ["A", "INTEGER"], ["BOOLEAN", "e"], ["d", "BOOLEAN"]>>, "e")
add_class(B)
add_query("D", "A", <<["a", "c"], ["a", "INTEGER"]>>, "c")
add_attribute("a", "A", "INTEGER")
int_value (4)
type_check
add_call_chain(<<D,d,a,A>>)
type_check
add_query("BOOLEAN", "a", <<["INTEGER", "BOOLEAN"], ["A", "INTEGER"]>>, "d")
add_command("e", "B", <<["b", "D"], ["e", "e"], ["A", "INTEGER"], ["D", "BOOLEAN"], ["c", "INTEGER"], ["C", "d"], ["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>)
add_attribute("B", "d", "INTEGER")
add_class(b)
int_value (15)
add_attribute("C", "C", "c")
less_than
equals
add_command("A", "D", <<["BOOLEAN", "BOOLEAN"], ["a", "BOOLEAN"]>>)
bool_value (true)
bool_value (true)
int_value (10)
numerical_negation
int_value (25)
add_call_chain(<<C>>)
add_command("C", "B", <<["a", "INTEGER"], ["e", "BOOLEAN"], ["c", "BOOLEAN"]>>)
add_query("e", "D", <<["b", "B"], ["A", "INTEGER"]>>, "B")
subtraction
add_attribute("A", "b", "BOOLEAN")
numerical_negation
add_command("D", "INTEGER", <<["D", "INTEGER"], ["c", "INTEGER"], ["a", "BOOLEAN"]>>)
add_query("B", "B", <<["a", "INTEGER"], ["D", "INTEGER"], ["C", "INTEGER"], ["A", "BOOLEAN"], ["BOOLEAN", "D"], ["B", "INTEGER"]>>, "C")
add_query("B", "b", <<["c", "INTEGER"], ["B", "BOOLEAN"], ["b", "BOOLEAN"], ["a", "BOOLEAN"], ["b", "INTEGER"], ["INTEGER", "INTEGER"], ["c", "INTEGER"]>>, "d")
conjunction
add_command("B", "C", <<["b", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["BOOLEAN", "INTEGER"], ["A", "e"], ["e", "INTEGER"]>>)
add_class(b)
add_call_chain(<<b,D,e,a,B,c>>)
conjunction
int_value (8)
conjunction
generate_java_code
add_query("D", "e", <<["A", "INTEGER"], ["c", "INTEGER"], ["e", "INTEGER"], ["a", "BOOLEAN"], ["B", "e"], ["b", "A"], ["c", "INTEGER"], ["b", "INTEGER"], ["c", "INTEGER"]>>, "D")
int_value (31)
generate_java_code
equals
add_call_chain(<<a,D,a,c,INTEGER,BOOLEAN,b,b,C>>)
add_call_chain(<<B,B,D,INTEGER,D,b,d,C>>)
equals
add_query("D", "d", <<["C", "BOOLEAN"]>>, "D")
logical_negation
type_check
bool_value (true)
equals
add_query("e", "c", <<["BOOLEAN", "B"], ["e", "c"], ["c", "BOOLEAN"], ["D", "BOOLEAN"]>>, "INTEGER")
int_value (15)
add_query("INTEGER", "a", <<["c", "BOOLEAN"], ["INTEGER", "INTEGER"], ["d", "INTEGER"], ["BOOLEAN", "INTEGER"], ["d", "INTEGER"]>>, "d")
add_attribute("INTEGER", "INTEGER", "A")
int_value (15)
add_query("d", "d", <<["b", "b"], ["d", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "INTEGER"], ["A", "BOOLEAN"], ["C", "BOOLEAN"], ["d", "C"], ["B", "INTEGER"]>>, "b")
add_class(C)
bool_value (true)
