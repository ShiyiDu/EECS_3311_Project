add_command("b", "e", <<["d", "D"], ["A", "INTEGER"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["A", "INTEGER"], ["C", "INTEGER"], ["A", "a"], ["D", "c"]>>)
add_call_chain(<<INTEGER,INTEGER,D,B,b,c,b,B,b>>)
equals
add_query("D", "e", <<["D", "BOOLEAN"]>>, "INTEGER")
int_value (28)
add_call_chain(<<d,C,b,a,b,C,B,c>>)
logical_negation
add_call_chain(<<D,C,d,C,c,b,B,C>>)
add_class(d)
add_class(B)
generate_java_code
type_check
add_attribute("b", "d", "d")
disjunction
add_call_chain(<<a>>)
add_attribute("D", "D", "BOOLEAN")
add_command("c", "d", <<["B", "INTEGER"], ["C", "b"]>>)
add_attribute("b", "d", "BOOLEAN")
disjunction
generate_java_code
add_query("D", "c", <<["D", "BOOLEAN"], ["INTEGER", "e"]>>, "d")
add_class(a)
int_value (2)
generate_java_code
add_query("b", "D", <<["b", "A"], ["a", "BOOLEAN"], ["a", "BOOLEAN"], ["b", "b"], ["c", "C"], ["d", "INTEGER"]>>, "c")
add_command("e", "INTEGER", <<["A", "INTEGER"], ["B", "c"], ["e", "c"], ["D", "BOOLEAN"], ["e", "BOOLEAN"], ["A", "BOOLEAN"], ["c", "BOOLEAN"], ["C", "BOOLEAN"]>>)
disjunction
add_query("C", "A", <<["A", "INTEGER"], ["INTEGER", "BOOLEAN"], ["c", "INTEGER"]>>, "e")
add_command("c", "INTEGER", <<["C", "e"], ["D", "INTEGER"], ["B", "BOOLEAN"], ["A", "INTEGER"], ["A", "INTEGER"], ["d", "BOOLEAN"], ["A", "b"]>>)
add_attribute("e", "b", "INTEGER")
add_call_chain(<<c,INTEGER,INTEGER,D,D>>)
add_attribute("b", "b", "BOOLEAN")
add_command("A", "INTEGER", <<["b", "INTEGER"], ["D", "INTEGER"], ["A", "INTEGER"]>>)
bool_value (true)
add_query("a", "a", <<["INTEGER", "INTEGER"], ["C", "e"], ["B", "INTEGER"], ["a", "C"], ["e", "INTEGER"], ["D", "INTEGER"]>>, "d")
generate_java_code
add_command("A", "A", <<["c", "a"], ["A", "BOOLEAN"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["b", "c"], ["c", "B"], ["e", "INTEGER"], ["A", "INTEGER"]>>)
generate_java_code
int_value (31)
add_call_chain(<<c,C,a,d,a>>)
add_call_chain(<<a,BOOLEAN>>)
int_value (29)
add_call_chain(<<d,b,d,D,b,e,c>>)
add_command("d", "B", <<["d", "INTEGER"], ["B", "BOOLEAN"], ["d", "INTEGER"], ["INTEGER", "INTEGER"]>>)
add_attribute("INTEGER", "d", "c")
add_class(B)
numerical_negation
generate_java_code
logical_negation
bool_value (false)
add_class(D)
int_value (1)
logical_negation
add_query("A", "C", <<["B", "INTEGER"], ["d", "BOOLEAN"]>>, "C")
numerical_negation
less_than
add_query("e", "INTEGER", <<["INTEGER", "BOOLEAN"], ["B", "INTEGER"], ["d", "BOOLEAN"]>>, "A")
int_value (34)
int_value (39)
bool_value (false)
add_command("C", "B", <<["A", "a"]>>)
quotient
greater_than
add_attribute("A", "c", "INTEGER")
logical_negation
add_query("d", "a", <<["e", "BOOLEAN"], ["b", "BOOLEAN"], ["C", "BOOLEAN"], ["C", "b"], ["A", "INTEGER"], ["C", "e"], ["BOOLEAN", "BOOLEAN"], ["INTEGER", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>, "BOOLEAN")
add_call_chain(<<BOOLEAN,A,BOOLEAN,d>>)
add_command("A", "a", <<["D", "B"], ["D", "b"], ["BOOLEAN", "INTEGER"], ["INTEGER", "BOOLEAN"]>>)
int_value (31)
add_command("b", "INTEGER", <<["D", "INTEGER"], ["C", "INTEGER"], ["D", "BOOLEAN"], ["b", "b"], ["c", "B"], ["C", "e"], ["e", "d"], ["b", "INTEGER"]>>)
numerical_negation
add_call_chain(<<e,b,e,c,D>>)
type_check
generate_java_code
addition
int_value (6)
add_call_chain(<<e,B>>)
add_attribute("a", "B", "INTEGER")
numerical_negation
add_call_chain(<<e,B,a,a,A,c,d,A,c>>)
type_check
numerical_negation
add_query("BOOLEAN", "BOOLEAN", <<["c", "A"], ["BOOLEAN", "d"], ["a", "INTEGER"]>>, "b")
int_value (29)
less_than
add_attribute("b", "B", "BOOLEAN")
type_check
add_call_chain(<<c>>)
conjunction
logical_negation
bool_value (true)
add_call_chain(<<C,B,INTEGER,d,d,c,B,A,e>>)
conjunction
add_call_chain(<<e,B>>)
quotient
int_value (17)
add_call_chain(<<B,a,a,e,C>>)
type_check
add_attribute("BOOLEAN", "a", "c")
logical_negation
int_value (17)
int_value (12)
add_call_chain(<<a,e,C,C>>)
logical_negation
numerical_negation
int_value (23)
conjunction
add_class(B)
add_class(b)
add_query("b", "e", <<["c", "BOOLEAN"], ["C", "c"], ["d", "C"], ["e", "BOOLEAN"], ["C", "BOOLEAN"]>>, "a")
add_query("B", "BOOLEAN", <<["c", "BOOLEAN"], ["a", "INTEGER"], ["D", "D"], ["BOOLEAN", "d"], ["e", "BOOLEAN"], ["d", "BOOLEAN"]>>, "A")
add_call_chain(<<C>>)
numerical_negation
conjunction
type_check
numerical_negation
add_query("d", "BOOLEAN", <<["c", "INTEGER"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["b", "INTEGER"]>>, "b")
logical_negation
add_call_chain(<<D,d>>)
int_value (15)
bool_value (true)
bool_value (true)
logical_negation
add_command("INTEGER", "C", <<["d", "INTEGER"], ["B", "A"], ["INTEGER", "INTEGER"], ["b", "INTEGER"], ["b", "d"], ["b", "INTEGER"], ["c", "A"], ["D", "INTEGER"], ["D", "BOOLEAN"]>>)
add_command("b", "d", <<["a", "BOOLEAN"], ["b", "BOOLEAN"], ["B", "e"], ["a", "b"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["C", "B"], ["A", "b"], ["b", "D"]>>)
add_call_chain(<<A>>)
add_attribute("C", "C", "INTEGER")
generate_java_code
bool_value (false)
type_check
add_attribute("e", "c", "D")
int_value (9)
logical_negation
disjunction
conjunction
add_call_chain(<<C>>)
numerical_negation
add_call_chain(<<e,A,a>>)
modulo
type_check
add_query("c", "d", <<["A", "INTEGER"], ["a", "A"], ["C", "INTEGER"], ["B", "INTEGER"], ["BOOLEAN", "INTEGER"]>>, "D")
type_check
add_command("INTEGER", "C", <<["BOOLEAN", "INTEGER"]>>)
add_call_chain(<<INTEGER,B,e>>)
add_call_chain(<<d,e,A,A,A,BOOLEAN>>)
add_command("B", "D", <<["B", "INTEGER"], ["d", "D"], ["c", "C"], ["e", "D"], ["C", "d"]>>)
add_call_chain(<<C,D,A>>)
add_class(a)
add_query("B", "D", <<["INTEGER", "A"], ["B", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "INTEGER"], ["d", "BOOLEAN"]>>, "B")
add_class(b)
int_value (49)
logical_negation
add_attribute("C", "B", "D")
add_call_chain(<<e,A,b>>)
numerical_negation
add_call_chain(<<D,B,c,c>>)
numerical_negation
bool_value (false)
less_than
less_than
add_attribute("d", "b", "BOOLEAN")
add_call_chain(<<e,B,D,e>>)
int_value (28)
add_attribute("C", "C", "BOOLEAN")
add_call_chain(<<d,A,a,B,A,b>>)
modulo
int_value (18)
add_call_chain(<<D,C,D,D,C,INTEGER>>)
logical_negation
generate_java_code
add_query("b", "b", <<["a", "BOOLEAN"], ["b", "B"], ["e", "INTEGER"], ["c", "BOOLEAN"], ["b", "BOOLEAN"], ["a", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["C", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>, "b")
add_call_chain(<<B,A,D,a,C,BOOLEAN,BOOLEAN>>)
add_call_chain(<<B,d>>)
add_class(D)
logical_negation
numerical_negation
add_call_chain(<<D,A,e,A,A,d,A,A,a>>)
equals
numerical_negation
add_command("d", "INTEGER", <<["b", "BOOLEAN"], ["A", "INTEGER"]>>)
type_check
generate_java_code
type_check
add_attribute("BOOLEAN", "C", "INTEGER")
add_attribute("B", "c", "BOOLEAN")
bool_value (true)
add_call_chain(<<A,C,d,c>>)
add_call_chain(<<D,A,d,D,B>>)
int_value (48)
add_command("e", "c", <<["c", "e"], ["B", "INTEGER"], ["e", "INTEGER"], ["D", "INTEGER"], ["a", "INTEGER"]>>)
add_call_chain(<<c,A,B,C,D,INTEGER>>)
type_check
multiplication
numerical_negation
bool_value (true)
logical_negation
add_call_chain(<<BOOLEAN,d,c,C,B,A,B>>)
add_attribute("d", "A", "INTEGER")
add_command("D", "a", <<["e", "INTEGER"], ["d", "INTEGER"], ["d", "d"], ["b", "INTEGER"], ["D", "d"], ["a", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "BOOLEAN"]>>)
int_value (33)
addition
add_call_chain(<<B,C,b,b,D>>)
add_call_chain(<<d,d,B,c,D,c,d,a>>)
add_call_chain(<<b>>)
numerical_negation
add_command("d", "D", <<["C", "BOOLEAN"], ["d", "BOOLEAN"], ["a", "BOOLEAN"], ["a", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["b", "BOOLEAN"], ["C", "INTEGER"], ["C", "A"]>>)
numerical_negation
add_call_chain(<<D,c,e,A,BOOLEAN,a>>)
numerical_negation
add_command("b", "A", <<["A", "BOOLEAN"], ["b", "BOOLEAN"]>>)
int_value (17)
int_value (8)
subtraction
int_value (20)
disjunction
add_command("c", "C", <<["e", "INTEGER"], ["INTEGER", "BOOLEAN"], ["a", "a"], ["A", "D"]>>)
numerical_negation
int_value (35)
add_call_chain(<<d,a,B,e,e,BOOLEAN>>)
add_query("A", "a", <<["D", "A"], ["A", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["A", "INTEGER"]>>, "b")
add_call_chain(<<A,d,c,D,b,d,D>>)
add_command("BOOLEAN", "a", <<["c", "a"], ["A", "INTEGER"], ["d", "INTEGER"]>>)
logical_negation
type_check
type_check
add_command("A", "d", <<["D", "b"], ["A", "BOOLEAN"], ["e", "INTEGER"], ["e", "C"], ["A", "BOOLEAN"], ["A", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "e"]>>)
add_command("d", "d", <<["d", "INTEGER"], ["C", "INTEGER"], ["INTEGER", "BOOLEAN"], ["C", "b"], ["c", "INTEGER"], ["c", "a"], ["A", "B"], ["D", "c"]>>)
bool_value (true)
