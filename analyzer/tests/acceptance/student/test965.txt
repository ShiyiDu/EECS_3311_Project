modulo
int_value (34)
bool_value (true)
generate_java_code
addition
add_command("b", "a", <<["A", "INTEGER"], ["B", "a"]>>)
add_call_chain(<<d,C,C,c,B>>)
numerical_negation
logical_negation
greater_than
add_command("d", "D", <<["a", "INTEGER"], ["a", "INTEGER"], ["C", "A"], ["a", "INTEGER"], ["C", "BOOLEAN"], ["D", "INTEGER"]>>)
add_command("D", "B", <<["c", "INTEGER"], ["A", "INTEGER"], ["A", "BOOLEAN"], ["A", "BOOLEAN"], ["C", "C"], ["B", "INTEGER"], ["INTEGER", "BOOLEAN"]>>)
bool_value (true)
add_call_chain(<<A,b,a,b,B,A,b,C,c>>)
numerical_negation
numerical_negation
add_attribute("B", "c", "BOOLEAN")
numerical_negation
add_attribute("c", "b", "INTEGER")
int_value (24)
generate_java_code
numerical_negation
bool_value (true)
equals
add_command("b", "b", <<["d", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["INTEGER", "INTEGER"], ["A", "d"], ["a", "BOOLEAN"], ["d", "c"], ["B", "INTEGER"], ["d", "INTEGER"], ["C", "INTEGER"]>>)
add_query("a", "c", <<["e", "e"], ["B", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "INTEGER"], ["b", "INTEGER"], ["D", "BOOLEAN"], ["c", "C"]>>, "BOOLEAN")
bool_value (false)
add_call_chain(<<C,D,C,d,BOOLEAN,A,b>>)
add_query("a", "BOOLEAN", <<["b", "C"], ["INTEGER", "BOOLEAN"], ["e", "d"], ["c", "b"], ["c", "BOOLEAN"], ["b", "BOOLEAN"], ["d", "BOOLEAN"], ["c", "INTEGER"], ["BOOLEAN", "b"]>>, "A")
add_call_chain(<<B,d,INTEGER,a,B,a,INTEGER,B,D>>)
add_call_chain(<<b>>)
add_class(A)
int_value (18)
generate_java_code
add_query("D", "A", <<["d", "BOOLEAN"], ["C", "INTEGER"], ["C", "INTEGER"], ["c", "B"], ["D", "INTEGER"], ["A", "d"], ["C", "D"], ["a", "BOOLEAN"]>>, "B")
add_query("A", "c", <<["e", "INTEGER"], ["b", "BOOLEAN"], ["C", "INTEGER"], ["D", "INTEGER"], ["A", "c"], ["A", "c"]>>, "d")
int_value (12)
generate_java_code
add_query("INTEGER", "B", <<["a", "INTEGER"], ["C", "BOOLEAN"]>>, "D")
add_class(e)
numerical_negation
add_call_chain(<<B,A,B,A,D,INTEGER>>)
add_call_chain(<<b>>)
logical_negation
numerical_negation
add_command("b", "A", <<["a", "c"], ["A", "INTEGER"], ["e", "BOOLEAN"]>>)
type_check
add_class(C)
add_command("A", "C", <<["C", "BOOLEAN"], ["BOOLEAN", "c"], ["D", "C"], ["INTEGER", "INTEGER"], ["B", "INTEGER"], ["d", "d"], ["a", "BOOLEAN"], ["c", "INTEGER"], ["B", "A"]>>)
numerical_negation
add_class(e)
conjunction
add_query("d", "d", <<["e", "BOOLEAN"], ["b", "INTEGER"], ["INTEGER", "a"], ["b", "BOOLEAN"], ["B", "B"], ["c", "BOOLEAN"], ["C", "c"], ["c", "INTEGER"], ["B", "d"]>>, "A")
add_class(D)
add_call_chain(<<B,a>>)
numerical_negation
add_query("D", "c", <<["B", "A"], ["b", "a"], ["A", "A"], ["D", "a"], ["d", "INTEGER"], ["D", "C"], ["a", "INTEGER"]>>, "D")
int_value (8)
add_query("c", "BOOLEAN", <<["c", "e"], ["B", "INTEGER"]>>, "BOOLEAN")
add_class(B)
add_call_chain(<<C,B,b>>)
int_value (27)
add_call_chain(<<b,INTEGER,A,a,D,A,B,D>>)
numerical_negation
logical_negation
bool_value (false)
multiplication
add_command("c", "b", <<["b", "BOOLEAN"], ["d", "BOOLEAN"], ["C", "INTEGER"], ["A", "d"], ["d", "d"], ["B", "A"], ["e", "c"], ["A", "INTEGER"]>>)
add_attribute("a", "A", "BOOLEAN")
logical_negation
disjunction
add_call_chain(<<a,B,c,c,b,INTEGER,e,C>>)
int_value (33)
add_attribute("D", "e", "B")
conjunction
generate_java_code
int_value (39)
add_command("C", "d", <<["b", "BOOLEAN"], ["e", "b"], ["a", "A"], ["a", "BOOLEAN"]>>)
disjunction
int_value (28)
logical_negation
greater_than
add_class(C)
add_query("c", "C", <<["a", "C"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["e", "INTEGER"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["b", "INTEGER"]>>, "C")
add_call_chain(<<e,e,c,INTEGER,C,b,BOOLEAN,D>>)
type_check
bool_value (true)
int_value (8)
int_value (44)
generate_java_code
add_command("BOOLEAN", "b", <<["b", "BOOLEAN"], ["e", "b"]>>)
logical_negation
add_query("D", "A", <<["e", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "d"], ["a", "BOOLEAN"], ["A", "INTEGER"], ["c", "INTEGER"], ["B", "B"]>>, "C")
int_value (10)
int_value (16)
numerical_negation
add_command("b", "b", <<["a", "A"]>>)
subtraction
add_class(B)
int_value (17)
add_call_chain(<<a,d,B>>)
greater_than
subtraction
logical_negation
add_command("A", "C", <<["A", "BOOLEAN"], ["a", "BOOLEAN"], ["D", "BOOLEAN"], ["d", "d"], ["e", "INTEGER"]>>)
generate_java_code
add_attribute("D", "d", "BOOLEAN")
int_value (33)
add_call_chain(<<D,c,C,b,c,B,INTEGER,d,d>>)
add_class(c)
int_value (36)
add_call_chain(<<D,c,B,C,A,INTEGER,a>>)
generate_java_code
disjunction
int_value (34)
type_check
numerical_negation
add_command("c", "d", <<["d", "BOOLEAN"], ["D", "INTEGER"], ["d", "INTEGER"]>>)
add_class(d)
generate_java_code
logical_negation
bool_value (true)
logical_negation
multiplication
add_attribute("C", "C", "INTEGER")
add_attribute("D", "C", "INTEGER")
add_call_chain(<<A,C,D,C,b,C>>)
conjunction
add_call_chain(<<e,A,b,e,BOOLEAN>>)
numerical_negation
add_call_chain(<<d,B,e,c,C>>)
add_command("d", "A", <<["c", "BOOLEAN"], ["INTEGER", "D"], ["b", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "B"], ["b", "INTEGER"], ["D", "B"], ["INTEGER", "BOOLEAN"]>>)
add_query("d", "B", <<["c", "INTEGER"], ["D", "e"], ["B", "INTEGER"], ["D", "e"]>>, "A")
add_call_chain(<<A>>)
add_call_chain(<<D,d,INTEGER>>)
add_call_chain(<<D,a,BOOLEAN,A>>)
type_check
add_call_chain(<<a,B>>)
generate_java_code
add_call_chain(<<e,d>>)
add_query("d", "e", <<["B", "C"], ["e", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["C", "BOOLEAN"], ["c", "A"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["A", "BOOLEAN"]>>, "C")
add_command("b", "b", <<["b", "BOOLEAN"], ["D", "b"], ["b", "C"], ["c", "c"]>>)
add_call_chain(<<b,c,A,BOOLEAN,BOOLEAN>>)
addition
bool_value (true)
add_call_chain(<<INTEGER,D,A,B,b,D,a>>)
logical_negation
int_value (22)
logical_negation
less_than
add_call_chain(<<BOOLEAN>>)
bool_value (false)
multiplication
add_call_chain(<<C,C,e,a,d,B,A>>)
add_command("D", "b", <<["D", "C"], ["BOOLEAN", "BOOLEAN"], ["D", "c"], ["e", "BOOLEAN"], ["a", "BOOLEAN"], ["d", "b"]>>)
type_check
add_call_chain(<<e,D,C,A,INTEGER,c,c,BOOLEAN,c>>)
add_class(b)
type_check
add_attribute("e", "C", "a")
add_call_chain(<<a,d,D,e,C>>)
add_command("a", "B", <<["C", "INTEGER"]>>)
type_check
add_call_chain(<<c,a,A,INTEGER,e,e,d,A>>)
add_call_chain(<<a,BOOLEAN,a,INTEGER,B,c,D>>)
add_query("BOOLEAN", "a", <<["A", "INTEGER"], ["INTEGER", "BOOLEAN"], ["c", "a"], ["B", "BOOLEAN"], ["C", "b"], ["INTEGER", "b"]>>, "INTEGER")
add_attribute("C", "C", "INTEGER")
add_call_chain(<<C,D>>)
numerical_negation
conjunction
add_command("d", "C", <<["b", "b"], ["e", "BOOLEAN"], ["B", "INTEGER"], ["B", "e"], ["BOOLEAN", "BOOLEAN"]>>)
conjunction
bool_value (false)
quotient
bool_value (true)
modulo
disjunction
add_attribute("d", "b", "INTEGER")
add_call_chain(<<e,a,c,A,b,c,c,D>>)
add_call_chain(<<c,D,C,D,INTEGER,e,c,e,D>>)
add_command("BOOLEAN", "A", <<["BOOLEAN", "a"], ["d", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "a"], ["b", "INTEGER"]>>)
generate_java_code
int_value (13)
add_query("A", "a", <<["c", "BOOLEAN"]>>, "a")
addition
add_call_chain(<<c,A,A,C,b,c>>)
add_attribute("a", "b", "BOOLEAN")
modulo
logical_negation
add_call_chain(<<d,b,b,BOOLEAN,C>>)
type_check
add_call_chain(<<c,C,d,c,INTEGER,B,c,b>>)
add_attribute("C", "a", "e")
logical_negation
conjunction
generate_java_code
bool_value (false)
int_value (29)
numerical_negation
conjunction
add_command("c", "a", <<["C", "e"], ["a", "INTEGER"], ["A", "d"], ["e", "BOOLEAN"], ["e", "INTEGER"], ["b", "BOOLEAN"], ["A", "INTEGER"], ["B", "INTEGER"]>>)
bool_value (false)
quotient
conjunction
add_call_chain(<<e,c,A,C,e,e,A>>)
numerical_negation
add_command("A", "b", <<["e", "BOOLEAN"], ["D", "INTEGER"], ["INTEGER", "d"], ["INTEGER", "INTEGER"], ["A", "INTEGER"]>>)
add_call_chain(<<D,D,d,d,a,C,INTEGER,D,D>>)
add_command("b", "B", <<["A", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "INTEGER"], ["A", "A"], ["INTEGER", "BOOLEAN"], ["c", "BOOLEAN"], ["b", "BOOLEAN"], ["b", "INTEGER"]>>)
add_attribute("A", "d", "d")
numerical_negation
bool_value (false)
add_command("e", "C", <<["D", "INTEGER"], ["c", "B"]>>)
add_call_chain(<<b,d,C,C,C,c,e,A,b>>)
add_class(a)
logical_negation
bool_value (false)
add_query("c", "c", <<["d", "BOOLEAN"], ["D", "INTEGER"], ["A", "B"], ["C", "b"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["e", "B"], ["b", "BOOLEAN"], ["B", "INTEGER"]>>, "c")
bool_value (false)
conjunction
add_command("INTEGER", "INTEGER", <<["a", "BOOLEAN"], ["D", "INTEGER"], ["c", "INTEGER"], ["e", "e"], ["D", "INTEGER"], ["b", "BOOLEAN"], ["INTEGER", "INTEGER"]>>)
subtraction
add_attribute("D", "e", "d")
greater_than
add_call_chain(<<b>>)
