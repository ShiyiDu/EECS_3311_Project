type_check
add_command("b", "b", <<["c", "B"], ["e", "A"], ["A", "D"], ["c", "D"], ["d", "D"], ["d", "BOOLEAN"], ["b", "INTEGER"]>>)
numerical_negation
generate_java_code
add_command("INTEGER", "d", <<["d", "BOOLEAN"], ["C", "BOOLEAN"], ["d", "INTEGER"], ["c", "D"], ["B", "b"], ["e", "a"], ["B", "BOOLEAN"], ["a", "a"], ["D", "B"]>>)
add_command("D", "C", <<["B", "INTEGER"], ["B", "BOOLEAN"], ["A", "INTEGER"], ["c", "BOOLEAN"], ["A", "INTEGER"]>>)
type_check
type_check
numerical_negation
greater_than
add_attribute("INTEGER", "A", "d")
add_command("a", "a", <<["b", "a"], ["C", "BOOLEAN"], ["d", "c"]>>)
add_query("A", "a", <<["C", "b"], ["b", "BOOLEAN"], ["B", "INTEGER"]>>, "D")
type_check
add_call_chain(<<B>>)
add_command("D", "b", <<["A", "BOOLEAN"], ["D", "INTEGER"]>>)
add_attribute("C", "d", "C")
conjunction
add_query("b", "e", <<["D", "BOOLEAN"]>>, "C")
numerical_negation
add_attribute("d", "e", "INTEGER")
bool_value (true)
bool_value (false)
quotient
add_call_chain(<<d,d,d,c>>)
type_check
greater_than
add_attribute("c", "d", "INTEGER")
add_command("D", "C", <<["a", "INTEGER"], ["A", "C"], ["INTEGER", "b"], ["d", "BOOLEAN"], ["INTEGER", "INTEGER"], ["e", "INTEGER"], ["e", "BOOLEAN"]>>)
add_call_chain(<<a,c,B,D,c,c,e,a>>)
add_query("e", "b", <<["d", "D"], ["D", "INTEGER"], ["e", "INTEGER"], ["D", "INTEGER"], ["e", "BOOLEAN"], ["D", "BOOLEAN"]>>, "a")
add_query("D", "A", <<["B", "INTEGER"], ["b", "C"], ["b", "B"], ["e", "a"], ["D", "INTEGER"], ["D", "INTEGER"], ["b", "BOOLEAN"], ["b", "BOOLEAN"]>>, "C")
add_class(D)
logical_negation
add_call_chain(<<a,A>>)
int_value (5)
add_query("BOOLEAN", "e", <<["D", "BOOLEAN"]>>, "C")
numerical_negation
add_query("D", "B", <<["d", "INTEGER"], ["c", "BOOLEAN"], ["b", "INTEGER"], ["c", "BOOLEAN"]>>, "INTEGER")
logical_negation
add_attribute("d", "e", "INTEGER")
add_query("e", "C", <<["d", "INTEGER"], ["b", "INTEGER"], ["A", "INTEGER"], ["e", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["B", "BOOLEAN"], ["a", "BOOLEAN"]>>, "D")
bool_value (false)
add_attribute("e", "B", "BOOLEAN")
add_call_chain(<<D,d,b>>)
numerical_negation
greater_than
add_call_chain(<<A,A,BOOLEAN,INTEGER,d,C>>)
add_attribute("C", "C", "BOOLEAN")
add_query("d", "D", <<["e", "BOOLEAN"], ["c", "INTEGER"], ["e", "BOOLEAN"], ["C", "INTEGER"], ["a", "BOOLEAN"], ["c", "INTEGER"]>>, "A")
add_call_chain(<<BOOLEAN,INTEGER,B,B,C,a,C>>)
add_query("D", "D", <<["a", "INTEGER"], ["B", "BOOLEAN"], ["d", "INTEGER"], ["d", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "INTEGER"]>>, "a")
type_check
logical_negation
add_class(e)
generate_java_code
add_query("B", "D", <<["A", "d"], ["c", "INTEGER"], ["a", "a"], ["D", "INTEGER"], ["b", "D"], ["b", "INTEGER"], ["a", "INTEGER"], ["D", "BOOLEAN"], ["c", "BOOLEAN"]>>, "C")
generate_java_code
add_command("A", "c", <<["A", "A"]>>)
add_call_chain(<<d,e,e,C>>)
add_query("C", "b", <<["a", "c"], ["C", "INTEGER"], ["d", "INTEGER"], ["e", "INTEGER"], ["B", "B"], ["BOOLEAN", "INTEGER"], ["e", "A"], ["e", "c"], ["INTEGER", "b"]>>, "d")
add_call_chain(<<a,B,A,b,D,INTEGER,B>>)
numerical_negation
add_query("b", "e", <<["a", "B"], ["A", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["D", "c"], ["c", "INTEGER"], ["d", "d"], ["BOOLEAN", "A"]>>, "B")
add_command("c", "c", <<["A", "BOOLEAN"], ["BOOLEAN", "A"], ["C", "INTEGER"], ["D", "INTEGER"]>>)
add_command("B", "B", <<["c", "BOOLEAN"], ["B", "D"], ["e", "e"], ["C", "BOOLEAN"], ["b", "INTEGER"]>>)
add_attribute("a", "c", "INTEGER")
add_attribute("BOOLEAN", "C", "b")
numerical_negation
int_value (42)
add_query("b", "D", <<["a", "BOOLEAN"], ["C", "e"], ["A", "BOOLEAN"], ["D", "b"], ["C", "A"], ["c", "INTEGER"]>>, "B")
add_call_chain(<<b,BOOLEAN>>)
add_query("D", "e", <<["B", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "d"], ["e", "INTEGER"], ["C", "B"]>>, "c")
add_call_chain(<<B>>)
type_check
add_attribute("B", "d", "d")
bool_value (false)
add_call_chain(<<d,a,a,e,D,c,D>>)
conjunction
numerical_negation
int_value (25)
numerical_negation
numerical_negation
add_command("d", "D", <<["a", "BOOLEAN"], ["b", "INTEGER"], ["D", "BOOLEAN"]>>)
add_attribute("a", "B", "d")
add_call_chain(<<A,D>>)
conjunction
add_command("c", "INTEGER", <<["INTEGER", "BOOLEAN"], ["D", "INTEGER"], ["D", "B"], ["C", "c"], ["A", "INTEGER"]>>)
add_call_chain(<<b,b>>)
bool_value (true)
add_call_chain(<<D,c,B,C,b>>)
conjunction
add_query("a", "e", <<["e", "A"], ["d", "c"], ["c", "A"], ["C", "BOOLEAN"], ["INTEGER", "e"]>>, "b")
add_call_chain(<<e,B,D,b,a,a,A>>)
add_call_chain(<<b,INTEGER,b,D,B,d>>)
generate_java_code
add_command("c", "b", <<["c", "BOOLEAN"], ["D", "INTEGER"], ["e", "INTEGER"], ["A", "d"], ["b", "INTEGER"]>>)
bool_value (false)
logical_negation
conjunction
bool_value (false)
logical_negation
type_check
bool_value (false)
add_call_chain(<<A,C,c,B>>)
add_command("a", "d", <<["D", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["c", "INTEGER"], ["C", "INTEGER"], ["C", "BOOLEAN"], ["b", "BOOLEAN"], ["e", "BOOLEAN"], ["e", "INTEGER"]>>)
int_value (28)
add_class(d)
add_call_chain(<<C,e,c,b,B>>)
add_call_chain(<<INTEGER,e>>)
add_call_chain(<<INTEGER,d>>)
add_query("e", "A", <<["e", "INTEGER"], ["A", "BOOLEAN"], ["D", "BOOLEAN"]>>, "D")
add_call_chain(<<c,D,C,b,A,B,a,c,b>>)
logical_negation
type_check
add_command("B", "C", <<["c", "b"]>>)
add_class(b)
numerical_negation
greater_than
bool_value (true)
add_attribute("A", "C", "C")
add_attribute("e", "e", "INTEGER")
type_check
numerical_negation
add_query("D", "e", <<["D", "BOOLEAN"]>>, "b")
add_call_chain(<<e,a,A,d,c,e>>)
add_command("A", "C", <<["b", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "BOOLEAN"], ["b", "BOOLEAN"]>>)
generate_java_code
add_command("BOOLEAN", "B", <<["c", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["B", "INTEGER"], ["a", "d"]>>)
type_check
add_call_chain(<<c,D,A,d>>)
conjunction
conjunction
logical_negation
bool_value (false)
less_than
add_command("INTEGER", "b", <<["c", "BOOLEAN"], ["e", "e"]>>)
numerical_negation
add_command("B", "B", <<["a", "C"]>>)
add_call_chain(<<b,INTEGER,b,C,D,d>>)
add_command("C", "D", <<["A", "b"], ["D", "BOOLEAN"], ["INTEGER", "A"], ["d", "BOOLEAN"], ["b", "BOOLEAN"], ["C", "INTEGER"], ["b", "A"], ["BOOLEAN", "BOOLEAN"]>>)
generate_java_code
generate_java_code
add_query("A", "a", <<["a", "INTEGER"], ["A", "BOOLEAN"], ["B", "c"], ["BOOLEAN", "D"], ["c", "INTEGER"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["a", "INTEGER"], ["e", "BOOLEAN"]>>, "d")
add_call_chain(<<a>>)
bool_value (true)
generate_java_code
add_command("a", "b", <<["b", "e"], ["INTEGER", "INTEGER"], ["c", "INTEGER"], ["D", "BOOLEAN"], ["c", "INTEGER"], ["d", "a"], ["a", "A"], ["A", "d"]>>)
add_query("a", "A", <<["D", "BOOLEAN"], ["D", "BOOLEAN"], ["BOOLEAN", "d"]>>, "BOOLEAN")
add_command("d", "d", <<["e", "INTEGER"], ["BOOLEAN", "INTEGER"], ["e", "BOOLEAN"], ["c", "C"], ["a", "BOOLEAN"], ["e", "d"]>>)
int_value (30)
generate_java_code
add_command("d", "D", <<["B", "a"], ["C", "INTEGER"], ["d", "INTEGER"], ["e", "B"], ["D", "BOOLEAN"], ["c", "INTEGER"], ["c", "BOOLEAN"]>>)
type_check
add_class(C)
add_call_chain(<<a,e,c,a,b>>)
int_value (15)
add_call_chain(<<d,e,D,e>>)
add_command("e", "BOOLEAN", <<["BOOLEAN", "INTEGER"], ["b", "C"], ["B", "INTEGER"], ["B", "D"], ["a", "BOOLEAN"], ["INTEGER", "INTEGER"], ["c", "a"], ["b", "c"]>>)
logical_negation
add_call_chain(<<c,d,e,c,B,e,b,C,INTEGER>>)
type_check
int_value (43)
generate_java_code
disjunction
int_value (14)
add_attribute("C", "B", "INTEGER")
numerical_negation
add_call_chain(<<e,C,INTEGER,D,INTEGER,e,C,A>>)
disjunction
int_value (5)
add_command("C", "c", <<["b", "BOOLEAN"], ["e", "INTEGER"], ["B", "C"], ["C", "e"], ["C", "BOOLEAN"], ["b", "C"], ["A", "BOOLEAN"]>>)
greater_than
int_value (38)
int_value (23)
add_attribute("d", "c", "INTEGER")
add_class(b)
numerical_negation
add_query("B", "C", <<["BOOLEAN", "INTEGER"], ["A", "INTEGER"], ["BOOLEAN", "D"], ["c", "BOOLEAN"], ["B", "B"], ["D", "BOOLEAN"]>>, "a")
add_attribute("A", "e", "B")
multiplication
add_class(D)
add_query("e", "INTEGER", <<["e", "INTEGER"], ["INTEGER", "c"], ["A", "BOOLEAN"]>>, "D")
add_call_chain(<<b,B,B,A,C>>)
numerical_negation
add_attribute("B", "INTEGER", "INTEGER")
bool_value (false)
equals
logical_negation
add_query("D", "b", <<["D", "d"], ["a", "D"], ["B", "A"], ["INTEGER", "INTEGER"]>>, "B")
bool_value (false)
add_call_chain(<<b,C>>)
numerical_negation
logical_negation
add_call_chain(<<b>>)
add_call_chain(<<a,BOOLEAN,A,d>>)
add_command("B", "e", <<["B", "C"]>>)
type_check
add_call_chain(<<A,C,D>>)
add_command("b", "D", <<["A", "b"], ["e", "BOOLEAN"], ["b", "INTEGER"], ["a", "a"]>>)
addition
add_command("D", "d", <<["D", "INTEGER"], ["d", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "C"], ["D", "BOOLEAN"], ["d", "BOOLEAN"]>>)
add_call_chain(<<c,D,e,C,B,INTEGER,B,A>>)
logical_negation
add_attribute("C", "D", "D")
add_call_chain(<<a,D>>)
add_call_chain(<<BOOLEAN,d,d,B,a,A,D,b>>)
numerical_negation
add_call_chain(<<b,D,d,A,INTEGER,B,BOOLEAN,b,B>>)
add_call_chain(<<e,D,a,C,A>>)
add_call_chain(<<d>>)
numerical_negation
conjunction
numerical_negation
add_class(D)
addition
logical_negation
add_call_chain(<<D,e>>)
int_value (28)
int_value (3)
add_attribute("b", "b", "BOOLEAN")
add_command("a", "d", <<["b", "BOOLEAN"], ["a", "a"], ["C", "D"]>>)
add_command("A", "B", <<["D", "e"], ["A", "INTEGER"], ["d", "INTEGER"], ["A", "BOOLEAN"]>>)
int_value (46)
add_command("INTEGER", "D", <<["D", "INTEGER"], ["d", "INTEGER"], ["C", "INTEGER"], ["d", "INTEGER"], ["d", "BOOLEAN"], ["D", "C"], ["d", "d"], ["e", "b"]>>)
add_call_chain(<<A,A>>)
type_check
add_call_chain(<<b,c,A,BOOLEAN>>)
bool_value (true)
add_class(C)
int_value (6)
add_call_chain(<<e,BOOLEAN,C,INTEGER,e,e,e,a,b>>)
add_command("d", "b", <<["d", "b"], ["d", "D"], ["b", "d"], ["B", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["C", "INTEGER"], ["b", "C"]>>)
add_attribute("d", "B", "INTEGER")
equals
add_call_chain(<<C,e,B,c>>)
equals
generate_java_code
add_attribute("b", "B", "INTEGER")
add_query("C", "d", <<["D", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "B"], ["A", "BOOLEAN"], ["C", "BOOLEAN"], ["B", "A"], ["D", "INTEGER"]>>, "B")
less_than
add_call_chain(<<D,D,D,e,B,INTEGER,a,B>>)
subtraction
add_call_chain(<<A,d,e,c,b,A,b,A>>)
add_query("e", "C", <<["c", "B"], ["A", "c"], ["B", "b"]>>, "B")
int_value (10)
bool_value (false)
add_query("d", "a", <<["C", "INTEGER"], ["d", "INTEGER"], ["a", "a"], ["e", "INTEGER"], ["d", "INTEGER"], ["b", "INTEGER"], ["c", "D"], ["e", "INTEGER"], ["A", "INTEGER"]>>, "B")
logical_negation
generate_java_code
add_class(INTEGER)
disjunction
