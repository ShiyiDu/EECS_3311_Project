equals
less_than
add_attribute("C", "B", "BOOLEAN")
type_check
int_value (2)
disjunction
add_attribute("C", "a", "BOOLEAN")
add_call_chain(<<D,d,C,b,B,D>>)
type_check
logical_negation
add_query("e", "C", <<["A", "INTEGER"], ["A", "INTEGER"]>>, "B")
numerical_negation
add_call_chain(<<c,A,e,e,c,d>>)
add_attribute("e", "d", "INTEGER")
add_call_chain(<<c,INTEGER,c,e>>)
less_than
add_class(A)
numerical_negation
add_attribute("A", "D", "INTEGER")
conjunction
generate_java_code
add_attribute("BOOLEAN", "D", "BOOLEAN")
equals
type_check
type_check
generate_java_code
add_class(d)
generate_java_code
add_class(D)
add_attribute("b", "a", "BOOLEAN")
add_query("c", "C", <<["C", "INTEGER"], ["A", "b"]>>, "e")
type_check
add_attribute("BOOLEAN", "b", "BOOLEAN")
add_call_chain(<<c,a,INTEGER>>)
add_call_chain(<<C>>)
add_command("B", "b", <<["BOOLEAN", "e"], ["e", "A"], ["C", "e"], ["B", "BOOLEAN"], ["c", "BOOLEAN"]>>)
add_call_chain(<<B,A,b,c,D>>)
generate_java_code
add_query("A", "b", <<["c", "BOOLEAN"]>>, "c")
int_value (19)
add_class(B)
add_class(a)
add_call_chain(<<D,INTEGER,B,C,INTEGER,e,c>>)
add_call_chain(<<c,e,C,c,A,INTEGER,b,b,c>>)
add_call_chain(<<b,D,a,B,d,e,A>>)
add_query("B", "e", <<["C", "INTEGER"], ["A", "a"], ["a", "INTEGER"], ["B", "c"], ["C", "BOOLEAN"]>>, "d")
add_attribute("c", "e", "INTEGER")
addition
logical_negation
add_query("d", "b", <<["a", "INTEGER"], ["b", "BOOLEAN"]>>, "INTEGER")
add_query("e", "A", <<["b", "C"], ["A", "c"], ["b", "BOOLEAN"], ["d", "INTEGER"], ["D", "A"], ["d", "e"], ["INTEGER", "e"]>>, "INTEGER")
addition
type_check
add_call_chain(<<c,b,C,BOOLEAN>>)
add_class(B)
bool_value (false)
bool_value (false)
type_check
generate_java_code
add_command("INTEGER", "BOOLEAN", <<["D", "BOOLEAN"]>>)
multiplication
add_call_chain(<<A,e,a,d,d,D,a,a,b>>)
add_attribute("b", "D", "INTEGER")
generate_java_code
add_call_chain(<<b,b>>)
equals
addition
add_attribute("e", "D", "INTEGER")
add_call_chain(<<A,C,C,C,A,D,D,D>>)
multiplication
disjunction
add_call_chain(<<D,b,c,a,c,BOOLEAN,e>>)
int_value (23)
conjunction
subtraction
add_call_chain(<<INTEGER,C,C,d,D,d>>)
add_call_chain(<<b,BOOLEAN,e,INTEGER,BOOLEAN,e>>)
disjunction
bool_value (false)
add_query("INTEGER", "INTEGER", <<["C", "B"], ["C", "A"], ["a", "D"], ["e", "INTEGER"], ["c", "BOOLEAN"]>>, "C")
add_query("B", "C", <<["D", "BOOLEAN"], ["a", "D"], ["B", "A"], ["c", "BOOLEAN"], ["a", "INTEGER"], ["D", "BOOLEAN"], ["b", "BOOLEAN"], ["A", "INTEGER"], ["B", "INTEGER"]>>, "a")
equals
add_call_chain(<<B>>)
add_attribute("INTEGER", "D", "A")
int_value (38)
add_class(B)
add_attribute("C", "INTEGER", "BOOLEAN")
add_query("B", "c", <<["d", "INTEGER"], ["d", "d"]>>, "a")
add_call_chain(<<B,b,B>>)
disjunction
add_query("a", "c", <<["A", "BOOLEAN"], ["D", "BOOLEAN"], ["C", "BOOLEAN"], ["INTEGER", "D"], ["b", "D"]>>, "A")
add_call_chain(<<INTEGER,a,d,C>>)
add_call_chain(<<BOOLEAN,e>>)
add_query("b", "a", <<["e", "BOOLEAN"], ["D", "INTEGER"], ["c", "INTEGER"], ["A", "e"], ["a", "b"], ["e", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["c", "INTEGER"]>>, "C")
int_value (26)
add_command("C", "a", <<["D", "BOOLEAN"], ["a", "INTEGER"], ["D", "BOOLEAN"], ["B", "BOOLEAN"]>>)
add_class(A)
add_call_chain(<<b,A>>)
multiplication
disjunction
modulo
int_value (7)
add_command("d", "D", <<["D", "BOOLEAN"], ["B", "BOOLEAN"], ["C", "BOOLEAN"], ["D", "INTEGER"], ["D", "a"], ["INTEGER", "INTEGER"]>>)
add_attribute("a", "INTEGER", "BOOLEAN")
add_query("B", "b", <<["a", "BOOLEAN"], ["D", "INTEGER"], ["A", "BOOLEAN"], ["b", "INTEGER"], ["e", "INTEGER"], ["C", "BOOLEAN"], ["D", "BOOLEAN"]>>, "A")
add_query("C", "e", <<["b", "c"], ["e", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "INTEGER"], ["b", "c"], ["C", "INTEGER"], ["c", "INTEGER"]>>, "a")
generate_java_code
logical_negation
int_value (18)
multiplication
generate_java_code
add_query("BOOLEAN", "a", <<["A", "C"]>>, "e")
numerical_negation
greater_than
add_query("D", "A", <<["D", "D"], ["c", "a"], ["e", "BOOLEAN"], ["a", "INTEGER"], ["D", "INTEGER"], ["d", "BOOLEAN"], ["D", "INTEGER"]>>, "d")
add_query("C", "d", <<["c", "INTEGER"]>>, "c")
add_call_chain(<<BOOLEAN>>)
add_query("d", "B", <<["B", "INTEGER"], ["d", "INTEGER"]>>, "b")
multiplication
add_command("b", "d", <<["A", "INTEGER"], ["B", "e"], ["e", "BOOLEAN"], ["b", "A"], ["C", "c"], ["a", "BOOLEAN"], ["D", "B"], ["D", "INTEGER"], ["B", "BOOLEAN"]>>)
multiplication
add_command("A", "C", <<["e", "a"], ["e", "INTEGER"]>>)
add_call_chain(<<B,c,c,b,e,INTEGER,BOOLEAN,B>>)
add_class(D)
add_command("C", "d", <<["e", "BOOLEAN"], ["d", "INTEGER"]>>)
add_class(C)
add_call_chain(<<C,C,BOOLEAN,a,d,b,INTEGER>>)
add_query("a", "B", <<["A", "INTEGER"], ["b", "INTEGER"], ["d", "A"], ["INTEGER", "INTEGER"], ["D", "INTEGER"]>>, "A")
add_attribute("D", "A", "INTEGER")
add_query("B", "B", <<["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>, "c")
add_command("B", "A", <<["A", "D"], ["D", "INTEGER"], ["A", "BOOLEAN"], ["C", "C"]>>)
add_attribute("A", "D", "INTEGER")
add_query("a", "e", <<["D", "BOOLEAN"], ["b", "BOOLEAN"], ["a", "BOOLEAN"], ["A", "INTEGER"], ["d", "INTEGER"], ["A", "BOOLEAN"], ["d", "A"]>>, "b")
add_class(c)
add_call_chain(<<a>>)
bool_value (true)
add_query("D", "D", <<["d", "BOOLEAN"]>>, "c")
add_call_chain(<<C,e,C,e,C,D,e,B,a>>)
add_attribute("D", "D", "BOOLEAN")
add_query("INTEGER", "a", <<["d", "BOOLEAN"], ["D", "b"], ["e", "INTEGER"], ["c", "INTEGER"], ["e", "D"], ["b", "INTEGER"]>>, "c")
add_query("d", "INTEGER", <<["B", "D"], ["b", "INTEGER"], ["c", "b"], ["b", "INTEGER"]>>, "A")
conjunction
add_call_chain(<<B,c>>)
add_call_chain(<<C,a,a,d,BOOLEAN,e,B,c>>)
logical_negation
add_class(C)
add_attribute("D", "d", "c")
int_value (23)
int_value (36)
add_call_chain(<<d,C,A,b,D,B,BOOLEAN>>)
numerical_negation
modulo
add_attribute("d", "INTEGER", "B")
add_query("A", "B", <<["D", "d"], ["e", "INTEGER"]>>, "C")
generate_java_code
add_attribute("A", "c", "BOOLEAN")
bool_value (true)
add_class(C)
int_value (1)
add_command("e", "c", <<["d", "INTEGER"]>>)
add_query("C", "D", <<["A", "INTEGER"], ["D", "INTEGER"]>>, "b")
logical_negation
conjunction
add_class(e)
add_call_chain(<<D,a,b,A,b,C>>)
add_call_chain(<<e,BOOLEAN,b>>)
bool_value (false)
multiplication
add_call_chain(<<e>>)
type_check
int_value (35)
int_value (31)
generate_java_code
add_attribute("d", "e", "INTEGER")
bool_value (true)
add_call_chain(<<INTEGER,d,e,c,INTEGER>>)
add_class(BOOLEAN)
conjunction
disjunction
add_call_chain(<<b,c,BOOLEAN>>)
generate_java_code
less_than
add_attribute("b", "b", "BOOLEAN")
add_attribute("D", "C", "INTEGER")
add_class(d)
equals
numerical_negation
bool_value (false)
add_attribute("b", "e", "INTEGER")
add_command("a", "D", <<["e", "INTEGER"], ["e", "BOOLEAN"], ["b", "INTEGER"], ["INTEGER", "BOOLEAN"]>>)
add_call_chain(<<d>>)
logical_negation
add_attribute("D", "C", "C")
numerical_negation
add_query("D", "A", <<["A", "BOOLEAN"], ["C", "A"], ["A", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>, "a")
add_attribute("D", "c", "INTEGER")
generate_java_code
add_call_chain(<<D,C,B,A,D>>)
add_call_chain(<<b,A,c,C>>)
logical_negation
add_command("D", "D", <<["D", "BOOLEAN"], ["D", "e"], ["INTEGER", "b"]>>)
numerical_negation
bool_value (true)
logical_negation
int_value (24)
add_call_chain(<<d,C,D,b,e,b,D,d,C>>)
add_command("INTEGER", "A", <<["c", "INTEGER"]>>)
add_attribute("d", "a", "BOOLEAN")
add_class(C)
add_command("A", "INTEGER", <<["a", "INTEGER"], ["d", "INTEGER"], ["e", "D"], ["e", "INTEGER"], ["B", "A"], ["C", "B"], ["C", "INTEGER"]>>)
add_query("C", "BOOLEAN", <<["B", "BOOLEAN"], ["a", "BOOLEAN"], ["INTEGER", "INTEGER"], ["D", "BOOLEAN"], ["a", "b"], ["D", "BOOLEAN"], ["b", "A"], ["a", "INTEGER"]>>, "A")
bool_value (true)
add_attribute("b", "D", "INTEGER")
generate_java_code
logical_negation
add_attribute("B", "INTEGER", "INTEGER")
less_than
bool_value (false)
bool_value (true)
add_call_chain(<<c,INTEGER>>)
numerical_negation
add_command("B", "A", <<["c", "INTEGER"], ["BOOLEAN", "C"], ["D", "INTEGER"], ["a", "INTEGER"], ["a", "BOOLEAN"], ["e", "BOOLEAN"], ["A", "INTEGER"], ["c", "b"], ["a", "BOOLEAN"]>>)
int_value (42)
type_check
add_attribute("A", "BOOLEAN", "INTEGER")
add_query("INTEGER", "d", <<["b", "BOOLEAN"], ["b", "INTEGER"], ["d", "INTEGER"], ["B", "INTEGER"], ["c", "A"], ["C", "INTEGER"], ["c", "INTEGER"]>>, "A")
multiplication
