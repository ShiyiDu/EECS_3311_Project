disjunction
add_class(a)
add_command("b", "B", <<["C", "D"], ["d", "INTEGER"], ["c", "B"], ["A", "BOOLEAN"], ["e", "BOOLEAN"], ["a", "a"], ["D", "BOOLEAN"], ["b", "INTEGER"], ["D", "BOOLEAN"]>>)
add_command("C", "c", <<["INTEGER", "C"], ["C", "INTEGER"]>>)
add_call_chain(<<C,C,c,a,D>>)
add_query("C", "INTEGER", <<["e", "A"], ["A", "d"], ["b", "INTEGER"], ["a", "INTEGER"], ["c", "BOOLEAN"], ["B", "INTEGER"]>>, "d")
add_attribute("BOOLEAN", "e", "INTEGER")
add_command("BOOLEAN", "d", <<["B", "BOOLEAN"], ["d", "INTEGER"], ["d", "a"], ["INTEGER", "INTEGER"], ["e", "INTEGER"]>>)
add_attribute("c", "C", "B")
logical_negation
numerical_negation
generate_java_code
modulo
add_call_chain(<<INTEGER,e,e,d,C>>)
add_class(D)
add_query("b", "A", <<["b", "BOOLEAN"], ["e", "BOOLEAN"], ["C", "BOOLEAN"], ["D", "INTEGER"], ["c", "INTEGER"], ["D", "INTEGER"], ["A", "c"], ["A", "A"], ["e", "d"]>>, "b")
add_call_chain(<<A,e,b,A,d,D,D>>)
add_query("C", "e", <<["b", "c"], ["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "D"], ["b", "d"], ["b", "C"], ["e", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>, "e")
type_check
add_call_chain(<<b,d,D,e,e>>)
add_command("e", "BOOLEAN", <<["c", "BOOLEAN"], ["d", "BOOLEAN"], ["d", "A"], ["b", "INTEGER"], ["D", "INTEGER"], ["C", "BOOLEAN"], ["C", "A"], ["D", "INTEGER"]>>)
int_value (24)
add_call_chain(<<a,c,B,C,a,c,BOOLEAN,D,A>>)
add_command("c", "A", <<["c", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["C", "INTEGER"], ["B", "INTEGER"], ["INTEGER", "D"], ["B", "c"]>>)
add_call_chain(<<C>>)
add_attribute("BOOLEAN", "a", "BOOLEAN")
less_than
int_value (28)
int_value (2)
add_class(B)
add_command("a", "B", <<["e", "INTEGER"], ["C", "B"], ["C", "BOOLEAN"]>>)
add_attribute("c", "c", "INTEGER")
add_call_chain(<<A,d,INTEGER,d,a>>)
add_call_chain(<<A,a,B,d,c,C,a,e,B>>)
add_query("a", "b", <<["A", "a"], ["d", "B"], ["BOOLEAN", "C"]>>, "a")
add_query("D", "C", <<["INTEGER", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>, "C")
int_value (16)
add_attribute("d", "A", "BOOLEAN")
equals
logical_negation
subtraction
add_attribute("A", "e", "BOOLEAN")
add_attribute("c", "D", "c")
add_attribute("B", "D", "BOOLEAN")
add_query("D", "b", <<["C", "D"]>>, "B")
add_command("C", "b", <<["A", "INTEGER"], ["C", "C"], ["B", "INTEGER"], ["e", "INTEGER"], ["D", "INTEGER"], ["a", "d"], ["d", "INTEGER"], ["b", "INTEGER"]>>)
numerical_negation
generate_java_code
add_call_chain(<<e>>)
int_value (3)
add_call_chain(<<e,e,d,B,c,D,c,INTEGER,c>>)
add_call_chain(<<C,a,B,e,BOOLEAN>>)
greater_than
int_value (18)
equals
add_call_chain(<<INTEGER,BOOLEAN,C,b,B,D>>)
numerical_negation
disjunction
add_attribute("B", "BOOLEAN", "INTEGER")
add_command("e", "e", <<["C", "INTEGER"], ["B", "BOOLEAN"], ["b", "INTEGER"], ["D", "a"], ["d", "BOOLEAN"], ["A", "INTEGER"]>>)
bool_value (false)
bool_value (true)
logical_negation
add_attribute("c", "D", "INTEGER")
int_value (27)
generate_java_code
greater_than
bool_value (true)
add_attribute("a", "c", "INTEGER")
add_query("C", "A", <<["A", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "INTEGER"], ["e", "INTEGER"], ["b", "INTEGER"]>>, "c")
add_class(C)
subtraction
add_attribute("a", "BOOLEAN", "A")
add_command("b", "e", <<["C", "e"], ["D", "INTEGER"]>>)
int_value (44)
add_command("d", "e", <<["a", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>)
add_query("a", "e", <<["B", "e"], ["C", "INTEGER"], ["D", "B"], ["C", "INTEGER"], ["a", "INTEGER"]>>, "INTEGER")
bool_value (true)
subtraction
add_attribute("INTEGER", "D", "INTEGER")
add_attribute("c", "D", "INTEGER")
add_call_chain(<<INTEGER,B,c,B,C,BOOLEAN,c,BOOLEAN>>)
add_call_chain(<<c>>)
generate_java_code
add_command("a", "b", <<["B", "BOOLEAN"], ["c", "e"]>>)
add_query("A", "A", <<["A", "a"], ["B", "INTEGER"], ["b", "BOOLEAN"], ["a", "INTEGER"], ["D", "INTEGER"], ["b", "C"], ["b", "BOOLEAN"]>>, "c")
modulo
numerical_negation
add_attribute("D", "b", "BOOLEAN")
add_call_chain(<<d>>)
numerical_negation
add_call_chain(<<INTEGER,d,a,D,d,a,C>>)
add_command("d", "A", <<["BOOLEAN", "BOOLEAN"], ["e", "BOOLEAN"]>>)
add_query("INTEGER", "c", <<["A", "BOOLEAN"], ["C", "BOOLEAN"], ["B", "INTEGER"]>>, "D")
numerical_negation
add_call_chain(<<a,BOOLEAN>>)
logical_negation
add_call_chain(<<a,D,d,d,A,A>>)
logical_negation
generate_java_code
add_call_chain(<<C,c,D,D,INTEGER,A>>)
quotient
addition
multiplication
add_call_chain(<<d,A,BOOLEAN,A,B,D,d,C,d>>)
numerical_negation
add_command("d", "A", <<["BOOLEAN", "BOOLEAN"], ["INTEGER", "INTEGER"], ["b", "INTEGER"], ["d", "INTEGER"], ["d", "D"], ["D", "BOOLEAN"], ["d", "INTEGER"]>>)
add_command("C", "A", <<["a", "INTEGER"], ["d", "BOOLEAN"], ["C", "INTEGER"], ["a", "BOOLEAN"], ["A", "a"], ["A", "C"], ["b", "INTEGER"], ["c", "A"], ["a", "d"]>>)
add_attribute("d", "C", "B")
add_call_chain(<<INTEGER,BOOLEAN,D,C>>)
conjunction
add_query("B", "A", <<["a", "c"], ["D", "INTEGER"], ["B", "BOOLEAN"], ["C", "INTEGER"], ["D", "INTEGER"], ["BOOLEAN", "INTEGER"], ["B", "BOOLEAN"], ["a", "INTEGER"], ["d", "INTEGER"]>>, "C")
bool_value (true)
add_query("a", "c", <<["e", "INTEGER"], ["A", "a"], ["c", "BOOLEAN"]>>, "a")
add_call_chain(<<D,c>>)
int_value (18)
add_query("c", "INTEGER", <<["A", "D"], ["c", "INTEGER"], ["c", "c"], ["b", "BOOLEAN"], ["D", "BOOLEAN"]>>, "d")
generate_java_code
add_query("c", "d", <<["c", "INTEGER"]>>, "b")
add_class(BOOLEAN)
type_check
numerical_negation
add_command("A", "BOOLEAN", <<["A", "INTEGER"], ["d", "BOOLEAN"], ["d", "c"]>>)
add_attribute("D", "e", "B")
add_query("BOOLEAN", "e", <<["d", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "BOOLEAN"], ["e", "INTEGER"], ["A", "BOOLEAN"], ["b", "A"], ["d", "INTEGER"], ["c", "A"]>>, "B")
add_command("INTEGER", "B", <<["B", "INTEGER"], ["B", "BOOLEAN"]>>)
add_attribute("b", "a", "BOOLEAN")
int_value (39)
add_call_chain(<<D,c,c,B,B,d,e,A>>)
add_call_chain(<<b,b,e>>)
add_command("b", "B", <<["c", "INTEGER"], ["B", "BOOLEAN"], ["A", "A"], ["C", "BOOLEAN"], ["b", "BOOLEAN"]>>)
bool_value (true)
add_class(C)
add_attribute("BOOLEAN", "e", "BOOLEAN")
int_value (11)
add_call_chain(<<c,A,e>>)
logical_negation
add_call_chain(<<C,A,a,a,c>>)
add_command("C", "D", <<["c", "B"], ["C", "INTEGER"]>>)
add_attribute("d", "d", "A")
numerical_negation
add_attribute("d", "e", "BOOLEAN")
conjunction
add_attribute("D", "D", "INTEGER")
type_check
add_query("c", "A", <<["c", "INTEGER"], ["C", "BOOLEAN"], ["C", "e"]>>, "A")
add_command("D", "a", <<["C", "INTEGER"], ["e", "INTEGER"], ["C", "D"], ["B", "A"], ["C", "B"], ["b", "BOOLEAN"]>>)
add_class(B)
quotient
add_attribute("a", "a", "INTEGER")
add_command("c", "INTEGER", <<["e", "b"], ["C", "c"]>>)
addition
add_command("D", "BOOLEAN", <<["A", "d"], ["d", "BOOLEAN"], ["A", "BOOLEAN"], ["d", "INTEGER"], ["C", "D"]>>)
add_query("A", "C", <<["a", "BOOLEAN"], ["A", "INTEGER"], ["a", "INTEGER"], ["C", "C"], ["d", "BOOLEAN"]>>, "a")
add_call_chain(<<A,D,A,B,A,b,B,B,b>>)
add_command("a", "e", <<["INTEGER", "C"], ["a", "BOOLEAN"], ["e", "INTEGER"], ["c", "INTEGER"], ["D", "BOOLEAN"]>>)
type_check
bool_value (false)
add_attribute("B", "INTEGER", "BOOLEAN")
add_command("D", "C", <<["a", "d"]>>)
numerical_negation
modulo
generate_java_code
numerical_negation
bool_value (true)
add_query("BOOLEAN", "D", <<["c", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "INTEGER"], ["c", "INTEGER"]>>, "INTEGER")
add_call_chain(<<c,C>>)
add_command("a", "a", <<["d", "BOOLEAN"], ["e", "BOOLEAN"], ["A", "BOOLEAN"], ["c", "BOOLEAN"], ["BOOLEAN", "a"], ["B", "BOOLEAN"], ["C", "INTEGER"], ["a", "INTEGER"], ["C", "BOOLEAN"]>>)
add_call_chain(<<B,D,C,b,d,INTEGER,A>>)
int_value (2)
int_value (7)
add_call_chain(<<d,A>>)
add_query("c", "D", <<["A", "D"], ["B", "c"], ["A", "INTEGER"], ["BOOLEAN", "A"], ["c", "BOOLEAN"], ["A", "BOOLEAN"]>>, "e")
quotient
equals
logical_negation
add_query("d", "a", <<["b", "a"], ["A", "c"], ["C", "A"], ["INTEGER", "BOOLEAN"], ["d", "INTEGER"], ["c", "BOOLEAN"], ["d", "BOOLEAN"], ["INTEGER", "d"]>>, "B")
add_class(A)
bool_value (true)
less_than
add_call_chain(<<D,D,B,a,e,d,e,c>>)
add_call_chain(<<A,A,B,BOOLEAN,d,c>>)
add_command("a", "D", <<["d", "b"], ["BOOLEAN", "INTEGER"], ["b", "INTEGER"], ["a", "BOOLEAN"], ["a", "BOOLEAN"], ["A", "BOOLEAN"]>>)
numerical_negation
add_call_chain(<<a,C>>)
add_call_chain(<<e,a,D,D,e,BOOLEAN,a>>)
add_attribute("e", "INTEGER", "a")
add_class(INTEGER)
add_attribute("d", "e", "BOOLEAN")
generate_java_code
add_call_chain(<<D,C,C,b,BOOLEAN,INTEGER,D,INTEGER>>)
disjunction
add_class(b)
greater_than
add_class(D)
add_call_chain(<<a,D,BOOLEAN,D,d,INTEGER,A>>)
type_check
add_call_chain(<<INTEGER,A,b,d,D>>)
add_query("a", "a", <<["C", "a"]>>, "e")
bool_value (true)
add_call_chain(<<B,c,a,B,INTEGER>>)
add_call_chain(<<BOOLEAN,D,b>>)
type_check
add_query("C", "B", <<["B", "A"], ["a", "BOOLEAN"], ["b", "b"], ["C", "BOOLEAN"], ["INTEGER", "INTEGER"]>>, "A")
generate_java_code
add_command("b", "C", <<["A", "BOOLEAN"]>>)
type_check
greater_than
equals
numerical_negation
generate_java_code
add_query("e", "e", <<["a", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "BOOLEAN"], ["a", "BOOLEAN"], ["A", "a"]>>, "b")
add_command("D", "B", <<["D", "INTEGER"], ["BOOLEAN", "INTEGER"], ["a", "INTEGER"], ["b", "BOOLEAN"], ["INTEGER", "INTEGER"]>>)
add_call_chain(<<d,B,A,e>>)
add_attribute("INTEGER", "C", "INTEGER")
add_call_chain(<<B,D,D,e,D,BOOLEAN,A,b>>)
add_call_chain(<<b,c,b>>)
add_attribute("b", "e", "BOOLEAN")
numerical_negation
equals
bool_value (true)
add_call_chain(<<B,e>>)
int_value (39)
add_command("C", "D", <<["D", "INTEGER"], ["d", "c"], ["c", "INTEGER"], ["a", "BOOLEAN"], ["A", "INTEGER"]>>)
add_command("c", "C", <<["B", "INTEGER"], ["C", "INTEGER"], ["e", "BOOLEAN"], ["INTEGER", "a"], ["d", "INTEGER"]>>)
addition
add_query("a", "e", <<["BOOLEAN", "e"], ["e", "B"], ["d", "INTEGER"], ["d", "A"]>>, "BOOLEAN")
multiplication
add_call_chain(<<e,D,BOOLEAN,a,B,C,BOOLEAN,C>>)
numerical_negation
numerical_negation
add_call_chain(<<A,a,A>>)
bool_value (false)
add_call_chain(<<c>>)
add_command("a", "d", <<["B", "B"], ["A", "BOOLEAN"], ["e", "a"], ["BOOLEAN", "a"]>>)
add_call_chain(<<D>>)
add_command("C", "BOOLEAN", <<["C", "INTEGER"], ["e", "e"], ["B", "BOOLEAN"], ["c", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>)
add_attribute("A", "BOOLEAN", "INTEGER")
bool_value (true)
bool_value (true)
add_call_chain(<<B,a,INTEGER,INTEGER,e,D,c,D,D>>)
logical_negation
add_command("c", "d", <<["D", "INTEGER"]>>)
add_query("C", "A", <<["D", "BOOLEAN"], ["c", "BOOLEAN"]>>, "a")
bool_value (false)
numerical_negation
numerical_negation
add_call_chain(<<b,d,B,D,B>>)
logical_negation
add_command("B", "B", <<["A", "BOOLEAN"], ["B", "INTEGER"], ["B", "b"], ["D", "BOOLEAN"], ["c", "INTEGER"]>>)
add_attribute("B", "B", "a")
type_check
add_call_chain(<<e,d,A,d,d,A,c,D>>)
add_call_chain(<<A,c,b,BOOLEAN,a,D,D>>)
add_call_chain(<<d,C,b,C>>)
