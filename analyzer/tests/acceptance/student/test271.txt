add_query("d", "B", <<["D", "C"], ["e", "INTEGER"], ["BOOLEAN", "INTEGER"], ["a", "B"], ["b", "BOOLEAN"]>>, "B")
int_value (10)
add_attribute("BOOLEAN", "C", "BOOLEAN")
add_class(e)
add_command("B", "C", <<["a", "INTEGER"], ["B", "INTEGER"], ["b", "INTEGER"], ["a", "e"], ["A", "BOOLEAN"], ["d", "INTEGER"], ["d", "BOOLEAN"], ["a", "BOOLEAN"], ["B", "INTEGER"]>>)
numerical_negation
int_value (15)
add_call_chain(<<c,BOOLEAN,A,C,c,e,A>>)
add_query("INTEGER", "D", <<["C", "C"], ["B", "A"], ["INTEGER", "A"], ["b", "A"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["b", "b"], ["B", "BOOLEAN"]>>, "d")
int_value (16)
add_command("A", "INTEGER", <<["BOOLEAN", "c"], ["d", "INTEGER"], ["d", "INTEGER"], ["A", "A"], ["A", "INTEGER"], ["d", "INTEGER"], ["c", "INTEGER"], ["B", "d"], ["b", "B"]>>)
bool_value (true)
bool_value (false)
add_command("e", "b", <<["D", "D"], ["c", "BOOLEAN"], ["B", "A"], ["c", "B"], ["b", "INTEGER"]>>)
logical_negation
addition
int_value (6)
add_call_chain(<<BOOLEAN,d>>)
bool_value (false)
bool_value (false)
disjunction
multiplication
add_call_chain(<<C,d,A>>)
add_attribute("B", "c", "INTEGER")
add_call_chain(<<a,C,a,A,b>>)
add_call_chain(<<B,B,e,BOOLEAN,c,c>>)
add_query("d", "B", <<["INTEGER", "INTEGER"], ["BOOLEAN", "INTEGER"], ["d", "BOOLEAN"], ["a", "b"], ["B", "INTEGER"]>>, "e")
add_call_chain(<<c,INTEGER,A,B,C,e,b,c,d>>)
int_value (45)
add_command("c", "b", <<["C", "C"]>>)
add_call_chain(<<A,C,d,e,BOOLEAN,e,INTEGER>>)
add_command("a", "A", <<["C", "INTEGER"], ["INTEGER", "BOOLEAN"], ["a", "D"], ["a", "INTEGER"], ["d", "INTEGER"], ["b", "INTEGER"], ["e", "BOOLEAN"], ["C", "INTEGER"]>>)
add_call_chain(<<D,a,e,b,d,A,D>>)
disjunction
generate_java_code
multiplication
conjunction
int_value (49)
bool_value (false)
int_value (5)
conjunction
bool_value (false)
quotient
numerical_negation
add_attribute("d", "A", "BOOLEAN")
add_query("C", "a", <<["C", "BOOLEAN"], ["A", "e"], ["D", "BOOLEAN"], ["A", "b"], ["B", "BOOLEAN"]>>, "e")
generate_java_code
add_attribute("c", "b", "e")
multiplication
less_than
multiplication
add_command("d", "D", <<["D", "BOOLEAN"], ["d", "INTEGER"], ["B", "e"], ["A", "D"], ["C", "D"], ["d", "BOOLEAN"]>>)
add_command("D", "a", <<["D", "C"], ["A", "A"], ["B", "b"], ["D", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["d", "e"], ["b", "BOOLEAN"], ["b", "A"], ["C", "INTEGER"]>>)
type_check
add_class(D)
add_command("B", "c", <<["C", "BOOLEAN"], ["A", "INTEGER"], ["C", "BOOLEAN"], ["C", "a"]>>)
add_call_chain(<<d,BOOLEAN,e,A,e>>)
generate_java_code
add_attribute("a", "e", "b")
add_attribute("C", "B", "INTEGER")
add_class(C)
add_query("A", "c", <<["D", "INTEGER"], ["D", "BOOLEAN"]>>, "D")
add_call_chain(<<D,B,c,INTEGER>>)
add_command("B", "A", <<["c", "BOOLEAN"]>>)
add_call_chain(<<a,d,B,B,c,a,c,C,D>>)
add_command("d", "d", <<["B", "INTEGER"], ["D", "BOOLEAN"], ["e", "BOOLEAN"], ["d", "BOOLEAN"], ["C", "BOOLEAN"]>>)
add_call_chain(<<INTEGER,c,A,c,INTEGER>>)
add_command("c", "INTEGER", <<["D", "BOOLEAN"], ["BOOLEAN", "B"], ["A", "INTEGER"]>>)
add_command("INTEGER", "b", <<["INTEGER", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["b", "e"], ["C", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "a"], ["a", "INTEGER"]>>)
add_command("D", "D", <<["INTEGER", "BOOLEAN"], ["INTEGER", "INTEGER"], ["d", "a"], ["a", "BOOLEAN"], ["B", "e"], ["D", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["D", "INTEGER"]>>)
add_query("A", "a", <<["b", "INTEGER"], ["C", "BOOLEAN"], ["a", "INTEGER"], ["B", "INTEGER"], ["a", "B"], ["D", "INTEGER"], ["b", "B"]>>, "b")
numerical_negation
int_value (8)
add_call_chain(<<D,c,c,b,e,b,b,D>>)
add_query("A", "D", <<["c", "INTEGER"], ["C", "BOOLEAN"], ["a", "d"], ["c", "D"], ["e", "BOOLEAN"], ["b", "D"], ["b", "B"], ["C", "BOOLEAN"], ["D", "BOOLEAN"]>>, "c")
numerical_negation
logical_negation
bool_value (true)
type_check
addition
int_value (14)
add_class(c)
int_value (47)
bool_value (false)
add_attribute("A", "b", "d")
logical_negation
numerical_negation
int_value (9)
type_check
generate_java_code
add_command("c", "b", <<["INTEGER", "C"], ["D", "INTEGER"]>>)
numerical_negation
generate_java_code
add_call_chain(<<c,B>>)
add_call_chain(<<c,A,b,a,D,B,d,a,A>>)
generate_java_code
add_call_chain(<<a,D,A,B,B,d,d,b>>)
greater_than
add_call_chain(<<D,C,c,D,D>>)
add_attribute("b", "C", "INTEGER")
add_command("e", "D", <<["C", "D"], ["D", "INTEGER"], ["a", "BOOLEAN"], ["A", "b"], ["c", "BOOLEAN"], ["b", "BOOLEAN"]>>)
add_attribute("a", "a", "INTEGER")
add_attribute("c", "INTEGER", "INTEGER")
add_query("d", "e", <<["e", "INTEGER"], ["c", "B"], ["C", "INTEGER"], ["b", "BOOLEAN"], ["D", "INTEGER"]>>, "A")
equals
add_call_chain(<<b,e,b,A,A,D>>)
generate_java_code
int_value (24)
disjunction
add_query("e", "c", <<["D", "BOOLEAN"], ["B", "BOOLEAN"]>>, "D")
int_value (36)
add_command("c", "b", <<["c", "BOOLEAN"], ["c", "INTEGER"], ["D", "C"], ["INTEGER", "B"], ["a", "BOOLEAN"], ["a", "e"], ["A", "INTEGER"], ["B", "BOOLEAN"]>>)
add_command("B", "a", <<["e", "INTEGER"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["e", "INTEGER"], ["INTEGER", "A"], ["A", "BOOLEAN"], ["A", "BOOLEAN"]>>)
add_class(A)
add_class(c)
numerical_negation
disjunction
numerical_negation
int_value (14)
greater_than
add_command("A", "C", <<["b", "INTEGER"], ["D", "e"], ["c", "D"]>>)
logical_negation
bool_value (false)
bool_value (true)
type_check
add_call_chain(<<C,D,b>>)
equals
add_attribute("A", "A", "INTEGER")
int_value (13)
int_value (17)
add_query("A", "d", <<["D", "INTEGER"], ["D", "BOOLEAN"]>>, "a")
generate_java_code
add_query("C", "A", <<["b", "B"], ["e", "BOOLEAN"], ["A", "b"], ["a", "INTEGER"], ["a", "b"], ["d", "INTEGER"], ["INTEGER", "INTEGER"], ["INTEGER", "d"]>>, "b")
less_than
disjunction
bool_value (true)
subtraction
generate_java_code
type_check
add_class(c)
add_attribute("C", "b", "INTEGER")
bool_value (false)
add_query("INTEGER", "B", <<["A", "INTEGER"]>>, "d")
numerical_negation
add_command("c", "A", <<["INTEGER", "e"], ["e", "e"], ["a", "BOOLEAN"], ["a", "BOOLEAN"], ["a", "INTEGER"]>>)
add_command("C", "e", <<["D", "A"], ["C", "INTEGER"], ["C", "B"], ["e", "INTEGER"], ["b", "A"], ["C", "INTEGER"], ["C", "D"], ["C", "BOOLEAN"], ["d", "c"]>>)
numerical_negation
int_value (34)
add_call_chain(<<C,a>>)
add_call_chain(<<d,A,d,b,D,C>>)
greater_than
add_call_chain(<<e,d>>)
int_value (26)
bool_value (true)
int_value (28)
logical_negation
add_command("e", "e", <<["a", "e"], ["d", "INTEGER"], ["d", "INTEGER"], ["C", "INTEGER"], ["B", "BOOLEAN"], ["A", "INTEGER"]>>)
add_command("a", "D", <<["d", "BOOLEAN"], ["b", "INTEGER"], ["A", "BOOLEAN"], ["C", "INTEGER"], ["B", "BOOLEAN"], ["A", "D"], ["e", "D"], ["b", "C"], ["e", "INTEGER"]>>)
add_command("BOOLEAN", "b", <<["a", "d"], ["b", "e"], ["INTEGER", "BOOLEAN"], ["D", "B"], ["A", "D"], ["A", "BOOLEAN"], ["d", "BOOLEAN"]>>)
numerical_negation
add_attribute("c", "c", "b")
int_value (16)
type_check
logical_negation
add_query("e", "B", <<["d", "b"], ["INTEGER", "INTEGER"]>>, "c")
add_attribute("D", "d", "INTEGER")
logical_negation
equals
int_value (5)
add_call_chain(<<c,c,b,d>>)
add_call_chain(<<INTEGER,c,d,D,d,e>>)
disjunction
add_command("d", "BOOLEAN", <<["d", "BOOLEAN"], ["e", "INTEGER"], ["c", "BOOLEAN"], ["BOOLEAN", "c"], ["D", "B"], ["B", "BOOLEAN"], ["d", "A"], ["a", "INTEGER"], ["d", "a"]>>)
add_command("c", "C", <<["D", "a"], ["A", "BOOLEAN"], ["e", "INTEGER"], ["c", "D"], ["a", "INTEGER"], ["B", "d"], ["C", "BOOLEAN"], ["c", "BOOLEAN"], ["a", "INTEGER"]>>)
add_class(d)
add_call_chain(<<BOOLEAN,D,A,A,BOOLEAN,B,a,INTEGER>>)
int_value (28)
numerical_negation
add_call_chain(<<c,D,a,D,a,C>>)
generate_java_code
add_call_chain(<<B,e,A,D,B,C,B,D,D>>)
generate_java_code
add_query("B", "b", <<["C", "INTEGER"], ["e", "INTEGER"], ["C", "BOOLEAN"], ["D", "INTEGER"], ["a", "e"], ["c", "BOOLEAN"], ["B", "INTEGER"]>>, "INTEGER")
add_call_chain(<<BOOLEAN>>)
add_query("b", "b", <<["A", "D"], ["c", "INTEGER"], ["B", "BOOLEAN"]>>, "A")
add_call_chain(<<c,B,A,D,D,A,b>>)
add_query("D", "b", <<["B", "INTEGER"], ["d", "BOOLEAN"], ["a", "INTEGER"], ["A", "INTEGER"], ["B", "INTEGER"]>>, "D")
add_command("d", "B", <<["e", "BOOLEAN"], ["a", "INTEGER"], ["e", "BOOLEAN"], ["b", "BOOLEAN"], ["b", "e"]>>)
greater_than
add_call_chain(<<B,B,A,b,A,A,b>>)
