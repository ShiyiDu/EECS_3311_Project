multiplication
add_command("c", "c", <<["b", "INTEGER"], ["C", "BOOLEAN"]>>)
generate_java_code
logical_negation
subtraction
bool_value (false)
add_query("c", "C", <<["D", "C"], ["d", "c"]>>, "A")
add_call_chain(<<e,a,b,c,d,A,C,B,d>>)
less_than
add_call_chain(<<INTEGER,e,d,C,C,B>>)
type_check
int_value (17)
add_query("D", "C", <<["c", "BOOLEAN"], ["A", "INTEGER"]>>, "a")
generate_java_code
int_value (36)
add_attribute("a", "c", "BOOLEAN")
conjunction
conjunction
numerical_negation
quotient
int_value (34)
add_command("BOOLEAN", "a", <<["B", "C"], ["INTEGER", "INTEGER"], ["c", "BOOLEAN"], ["a", "INTEGER"], ["B", "BOOLEAN"], ["B", "b"], ["a", "INTEGER"], ["D", "BOOLEAN"]>>)
conjunction
add_command("A", "d", <<["a", "INTEGER"], ["BOOLEAN", "D"], ["d", "BOOLEAN"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["C", "INTEGER"]>>)
add_call_chain(<<c,d,INTEGER>>)
add_query("D", "A", <<["e", "INTEGER"], ["d", "INTEGER"], ["A", "a"], ["C", "a"], ["c", "b"], ["INTEGER", "INTEGER"]>>, "e")
add_command("d", "B", <<["c", "INTEGER"], ["c", "C"], ["BOOLEAN", "INTEGER"], ["B", "BOOLEAN"], ["B", "INTEGER"], ["d", "BOOLEAN"]>>)
add_query("b", "B", <<["a", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "c"], ["D", "INTEGER"]>>, "c")
int_value (2)
add_call_chain(<<e>>)
type_check
add_call_chain(<<B,d>>)
add_command("A", "C", <<["e", "BOOLEAN"], ["C", "BOOLEAN"], ["b", "A"]>>)
add_attribute("B", "A", "a")
add_attribute("c", "B", "BOOLEAN")
bool_value (false)
generate_java_code
add_attribute("BOOLEAN", "B", "INTEGER")
multiplication
add_query("BOOLEAN", "B", <<["B", "INTEGER"], ["D", "B"], ["D", "BOOLEAN"], ["d", "INTEGER"], ["BOOLEAN", "INTEGER"], ["C", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["A", "B"]>>, "b")
bool_value (true)
add_query("BOOLEAN", "d", <<["C", "C"], ["c", "INTEGER"], ["e", "D"], ["b", "INTEGER"], ["A", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["D", "INTEGER"]>>, "INTEGER")
add_attribute("A", "A", "BOOLEAN")
modulo
add_command("BOOLEAN", "C", <<["C", "INTEGER"], ["C", "BOOLEAN"], ["d", "BOOLEAN"], ["a", "a"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["e", "BOOLEAN"]>>)
bool_value (true)
int_value (14)
add_call_chain(<<b,BOOLEAN,C,B,B,INTEGER,b>>)
int_value (37)
disjunction
logical_negation
add_command("B", "e", <<["a", "INTEGER"], ["a", "A"], ["c", "BOOLEAN"], ["a", "INTEGER"], ["e", "BOOLEAN"], ["BOOLEAN", "C"], ["BOOLEAN", "INTEGER"]>>)
numerical_negation
bool_value (false)
less_than
type_check
conjunction
add_command("B", "BOOLEAN", <<["A", "INTEGER"]>>)
bool_value (false)
add_query("d", "B", <<["a", "B"], ["BOOLEAN", "INTEGER"]>>, "B")
int_value (30)
less_than
int_value (20)
add_query("INTEGER", "C", <<["D", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["a", "BOOLEAN"], ["b", "BOOLEAN"]>>, "e")
int_value (38)
add_call_chain(<<d,D,e,c,b,a,C>>)
add_attribute("d", "BOOLEAN", "A")
add_command("C", "D", <<["b", "INTEGER"], ["BOOLEAN", "INTEGER"], ["A", "INTEGER"], ["A", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["a", "A"], ["e", "D"], ["D", "BOOLEAN"]>>)
add_command("C", "a", <<["B", "BOOLEAN"], ["B", "b"], ["b", "INTEGER"], ["c", "BOOLEAN"], ["D", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["C", "INTEGER"], ["B", "INTEGER"]>>)
add_command("C", "C", <<["d", "INTEGER"], ["C", "INTEGER"], ["A", "BOOLEAN"], ["a", "INTEGER"], ["c", "INTEGER"], ["INTEGER", "d"]>>)
bool_value (true)
int_value (12)
int_value (39)
add_command("e", "d", <<["INTEGER", "d"], ["e", "d"], ["a", "a"], ["C", "e"], ["a", "INTEGER"], ["e", "BOOLEAN"], ["c", "BOOLEAN"]>>)
type_check
generate_java_code
conjunction
logical_negation
numerical_negation
add_query("C", "e", <<["A", "a"], ["BOOLEAN", "b"], ["A", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["C", "INTEGER"], ["B", "BOOLEAN"], ["e", "BOOLEAN"]>>, "d")
add_call_chain(<<b,C,a,D>>)
multiplication
add_call_chain(<<c,B,e>>)
modulo
add_class(a)
add_attribute("d", "A", "C")
add_command("c", "b", <<["e", "c"], ["INTEGER", "INTEGER"], ["e", "INTEGER"], ["a", "BOOLEAN"], ["d", "BOOLEAN"]>>)
generate_java_code
int_value (43)
add_call_chain(<<C,e,B>>)
add_call_chain(<<B,b,C,b>>)
numerical_negation
multiplication
logical_negation
bool_value (true)
generate_java_code
logical_negation
type_check
numerical_negation
add_call_chain(<<a>>)
add_attribute("D", "A", "e")
add_query("BOOLEAN", "e", <<["INTEGER", "BOOLEAN"], ["e", "INTEGER"], ["e", "BOOLEAN"], ["B", "b"], ["A", "b"], ["B", "BOOLEAN"], ["e", "INTEGER"], ["e", "BOOLEAN"]>>, "b")
multiplication
add_query("c", "INTEGER", <<["C", "INTEGER"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["C", "BOOLEAN"]>>, "C")
add_query("c", "B", <<["B", "d"], ["c", "INTEGER"], ["D", "INTEGER"]>>, "B")
type_check
add_attribute("A", "B", "A")
int_value (37)
quotient
numerical_negation
modulo
add_call_chain(<<INTEGER,B,BOOLEAN,A,C,C,C>>)
add_attribute("B", "b", "BOOLEAN")
bool_value (false)
bool_value (true)
add_class(c)
type_check
add_command("e", "e", <<["BOOLEAN", "BOOLEAN"], ["D", "BOOLEAN"]>>)
add_class(a)
logical_negation
add_class(c)
logical_negation
int_value (47)
add_call_chain(<<A,c,D,C,A>>)
int_value (7)
generate_java_code
add_call_chain(<<b,c,a,d,a,c,B,D>>)
generate_java_code
add_query("B", "b", <<["B", "INTEGER"], ["e", "INTEGER"], ["B", "BOOLEAN"], ["B", "INTEGER"]>>, "INTEGER")
add_query("c", "d", <<["B", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["D", "INTEGER"], ["c", "a"], ["d", "INTEGER"], ["C", "INTEGER"], ["C", "BOOLEAN"]>>, "a")
int_value (3)
add_command("BOOLEAN", "BOOLEAN", <<["c", "A"], ["e", "INTEGER"], ["d", "BOOLEAN"], ["c", "e"], ["e", "BOOLEAN"], ["B", "D"]>>)
int_value (25)
int_value (17)
quotient
add_query("a", "BOOLEAN", <<["BOOLEAN", "INTEGER"], ["e", "b"], ["d", "INTEGER"], ["BOOLEAN", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["C", "BOOLEAN"]>>, "B")
add_query("C", "b", <<["d", "c"], ["a", "INTEGER"], ["C", "INTEGER"], ["b", "INTEGER"], ["C", "BOOLEAN"]>>, "b")
add_call_chain(<<C>>)
bool_value (false)
add_call_chain(<<c,A,B,d>>)
add_attribute("a", "b", "BOOLEAN")
generate_java_code
logical_negation
greater_than
add_query("C", "b", <<["a", "INTEGER"], ["d", "A"], ["D", "a"], ["a", "INTEGER"], ["c", "INTEGER"], ["b", "A"], ["d", "INTEGER"]>>, "BOOLEAN")
type_check
add_attribute("B", "c", "INTEGER")
add_query("BOOLEAN", "C", <<["d", "INTEGER"], ["B", "BOOLEAN"], ["BOOLEAN", "D"]>>, "D")
add_query("a", "D", <<["b", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["C", "BOOLEAN"], ["b", "BOOLEAN"], ["a", "INTEGER"], ["D", "BOOLEAN"], ["b", "INTEGER"]>>, "D")
logical_negation
add_query("d", "B", <<["A", "INTEGER"], ["D", "B"], ["B", "INTEGER"], ["D", "INTEGER"], ["INTEGER", "b"], ["A", "A"]>>, "e")
logical_negation
generate_java_code
numerical_negation
int_value (20)
addition
add_command("a", "a", <<["e", "BOOLEAN"], ["B", "INTEGER"], ["B", "d"]>>)
add_class(e)
add_query("c", "INTEGER", <<["d", "BOOLEAN"], ["c", "a"], ["e", "A"], ["b", "BOOLEAN"]>>, "D")
add_query("B", "b", <<["C", "a"], ["C", "BOOLEAN"], ["B", "a"], ["A", "BOOLEAN"]>>, "d")
type_check
add_call_chain(<<A>>)
add_call_chain(<<C,B,C,a>>)
add_command("BOOLEAN", "B", <<["C", "d"], ["D", "BOOLEAN"], ["B", "C"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "INTEGER"], ["a", "BOOLEAN"], ["c", "BOOLEAN"], ["b", "INTEGER"]>>)
add_query("d", "C", <<["C", "INTEGER"], ["b", "BOOLEAN"]>>, "e")
bool_value (false)
numerical_negation
int_value (16)
generate_java_code
add_command("D", "b", <<["d", "BOOLEAN"], ["d", "B"], ["a", "a"], ["d", "B"], ["D", "INTEGER"], ["c", "BOOLEAN"]>>)
type_check
bool_value (true)
add_class(b)
numerical_negation
numerical_negation
bool_value (true)
disjunction
type_check
int_value (44)
generate_java_code
add_attribute("b", "B", "INTEGER")
type_check
add_command("d", "d", <<["a", "B"]>>)
subtraction
add_query("C", "A", <<["c", "BOOLEAN"], ["C", "B"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["d", "INTEGER"], ["d", "BOOLEAN"], ["d", "INTEGER"], ["a", "d"]>>, "a")
add_call_chain(<<c,D,INTEGER>>)
generate_java_code
add_query("d", "c", <<["e", "BOOLEAN"], ["A", "BOOLEAN"], ["B", "A"], ["B", "BOOLEAN"], ["B", "BOOLEAN"], ["d", "BOOLEAN"]>>, "a")
greater_than
numerical_negation
int_value (33)
add_query("c", "e", <<["b", "BOOLEAN"]>>, "BOOLEAN")
int_value (7)
add_call_chain(<<b,c>>)
add_query("d", "e", <<["b", "INTEGER"]>>, "d")
add_call_chain(<<a,B,a,d,d,a,C,e,a>>)
int_value (15)
logical_negation
add_command("d", "C", <<["B", "INTEGER"], ["D", "INTEGER"], ["D", "INTEGER"], ["BOOLEAN", "INTEGER"]>>)
bool_value (false)
conjunction
add_query("e", "d", <<["b", "BOOLEAN"], ["e", "d"], ["B", "BOOLEAN"], ["B", "c"], ["A", "a"], ["c", "INTEGER"], ["D", "d"]>>, "D")
add_query("B", "B", <<["a", "INTEGER"], ["D", "BOOLEAN"]>>, "C")
bool_value (true)
