add_command("b", "A", <<["INTEGER", "A"], ["c", "INTEGER"], ["e", "INTEGER"], ["B", "INTEGER"], ["a", "INTEGER"], ["D", "INTEGER"], ["B", "INTEGER"], ["a", "BOOLEAN"]>>)
generate_java_code
add_call_chain(<<c,D>>)
add_query("c", "A", <<["c", "INTEGER"]>>, "C")
add_attribute("d", "e", "e")
bool_value (true)
type_check
generate_java_code
equals
add_query("D", "A", <<["b", "INTEGER"], ["B", "INTEGER"], ["d", "INTEGER"], ["d", "e"], ["BOOLEAN", "C"], ["B", "INTEGER"], ["e", "BOOLEAN"]>>, "c")
conjunction
add_command("d", "e", <<["c", "INTEGER"], ["b", "BOOLEAN"]>>)
less_than
conjunction
int_value (6)
add_class(d)
numerical_negation
logical_negation
add_command("c", "B", <<["d", "a"], ["e", "INTEGER"], ["d", "BOOLEAN"], ["BOOLEAN", "A"], ["d", "INTEGER"], ["a", "BOOLEAN"], ["D", "BOOLEAN"]>>)
subtraction
bool_value (true)
add_call_chain(<<C,D,b,C,d,a,d,INTEGER>>)
add_command("B", "D", <<["BOOLEAN", "BOOLEAN"], ["D", "BOOLEAN"], ["INTEGER", "c"], ["D", "INTEGER"], ["BOOLEAN", "c"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["D", "INTEGER"]>>)
add_query("e", "d", <<["e", "INTEGER"], ["C", "BOOLEAN"], ["A", "INTEGER"]>>, "b")
add_query("b", "c", <<["e", "a"], ["D", "INTEGER"], ["a", "INTEGER"]>>, "B")
bool_value (true)
bool_value (true)
logical_negation
bool_value (false)
int_value (1)
addition
int_value (23)
bool_value (true)
numerical_negation
numerical_negation
conjunction
add_command("e", "A", <<["D", "B"], ["C", "d"], ["c", "C"], ["d", "b"], ["b", "BOOLEAN"]>>)
generate_java_code
add_attribute("d", "c", "BOOLEAN")
add_query("A", "BOOLEAN", <<["a", "INTEGER"], ["d", "INTEGER"], ["b", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "INTEGER"], ["BOOLEAN", "INTEGER"]>>, "D")
logical_negation
add_class(e)
add_query("BOOLEAN", "BOOLEAN", <<["d", "BOOLEAN"], ["b", "a"], ["A", "BOOLEAN"], ["C", "BOOLEAN"]>>, "B")
add_query("B", "A", <<["c", "BOOLEAN"], ["C", "INTEGER"], ["c", "BOOLEAN"], ["C", "A"]>>, "d")
conjunction
int_value (40)
add_call_chain(<<d,a,d,A,B,b,e,c>>)
logical_negation
add_attribute("A", "A", "c")
generate_java_code
numerical_negation
numerical_negation
bool_value (true)
add_query("d", "D", <<["b", "BOOLEAN"]>>, "e")
add_call_chain(<<C,C,D,a,B>>)
add_call_chain(<<C,A,e,D,C,D,a,c>>)
add_query("D", "INTEGER", <<["D", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["INTEGER", "INTEGER"]>>, "b")
bool_value (false)
add_call_chain(<<D,B,C>>)
numerical_negation
add_class(c)
int_value (25)
type_check
generate_java_code
generate_java_code
add_attribute("B", "a", "BOOLEAN")
add_call_chain(<<D,a,b,c,BOOLEAN>>)
subtraction
logical_negation
logical_negation
add_call_chain(<<d,D>>)
add_command("B", "a", <<["B", "BOOLEAN"], ["B", "B"], ["a", "BOOLEAN"], ["b", "INTEGER"]>>)
type_check
add_call_chain(<<BOOLEAN,A>>)
bool_value (true)
modulo
bool_value (false)
add_attribute("c", "A", "D")
bool_value (false)
numerical_negation
add_command("e", "a", <<["b", "INTEGER"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["a", "INTEGER"], ["INTEGER", "e"], ["C", "a"], ["d", "INTEGER"], ["d", "INTEGER"], ["d", "BOOLEAN"]>>)
add_attribute("C", "e", "C")
add_call_chain(<<d,c,D,b,a,B,b,B,C>>)
conjunction
generate_java_code
add_command("A", "d", <<["B", "INTEGER"], ["BOOLEAN", "INTEGER"], ["B", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["e", "A"], ["c", "c"], ["A", "INTEGER"], ["d", "e"], ["a", "INTEGER"]>>)
add_command("a", "C", <<["d", "b"], ["INTEGER", "A"], ["C", "BOOLEAN"], ["D", "INTEGER"], ["e", "INTEGER"]>>)
add_command("D", "e", <<["e", "B"]>>)
add_query("c", "INTEGER", <<["D", "c"], ["D", "BOOLEAN"], ["B", "c"], ["b", "a"], ["c", "INTEGER"], ["INTEGER", "d"], ["b", "d"], ["D", "BOOLEAN"], ["C", "BOOLEAN"]>>, "a")
generate_java_code
add_command("BOOLEAN", "A", <<["b", "INTEGER"], ["d", "INTEGER"], ["A", "INTEGER"], ["c", "INTEGER"], ["b", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>)
type_check
logical_negation
conjunction
bool_value (false)
add_call_chain(<<C,B,C,c,D,B,A,A,C>>)
less_than
logical_negation
bool_value (true)
add_query("d", "b", <<["INTEGER", "B"]>>, "B")
bool_value (false)
add_call_chain(<<BOOLEAN,INTEGER,B,e,c,BOOLEAN,a,d,A>>)
add_attribute("a", "C", "BOOLEAN")
add_command("c", "B", <<["B", "INTEGER"], ["D", "INTEGER"], ["A", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["d", "INTEGER"], ["d", "BOOLEAN"], ["d", "INTEGER"], ["e", "BOOLEAN"], ["a", "INTEGER"]>>)
add_attribute("A", "B", "INTEGER")
generate_java_code
add_call_chain(<<C,c,b,D,B>>)
generate_java_code
add_attribute("D", "e", "B")
add_attribute("e", "D", "INTEGER")
add_call_chain(<<e,e,BOOLEAN,b,e,INTEGER>>)
add_query("D", "e", <<["A", "C"], ["A", "B"]>>, "b")
bool_value (true)
int_value (21)
logical_negation
numerical_negation
add_command("A", "A", <<["d", "INTEGER"], ["D", "BOOLEAN"]>>)
add_command("c", "d", <<["d", "b"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["C", "INTEGER"], ["c", "c"], ["C", "INTEGER"], ["D", "BOOLEAN"], ["e", "BOOLEAN"], ["A", "B"]>>)
logical_negation
add_call_chain(<<a,b,B,D,BOOLEAN,d,d,B>>)
numerical_negation
disjunction
modulo
add_attribute("d", "D", "BOOLEAN")
numerical_negation
int_value (16)
add_query("B", "e", <<["BOOLEAN", "INTEGER"], ["d", "INTEGER"]>>, "B")
add_command("b", "b", <<["b", "BOOLEAN"], ["B", "e"], ["B", "INTEGER"], ["C", "A"]>>)
add_attribute("c", "B", "A")
greater_than
logical_negation
type_check
bool_value (false)
equals
add_attribute("INTEGER", "B", "INTEGER")
add_class(a)
bool_value (false)
add_command("b", "c", <<["b", "INTEGER"], ["B", "A"], ["a", "INTEGER"], ["C", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "BOOLEAN"], ["INTEGER", "e"], ["a", "a"], ["b", "INTEGER"]>>)
add_command("c", "D", <<["c", "a"]>>)
add_call_chain(<<D,d,A,d,c,D,D,A,e>>)
add_command("c", "b", <<["B", "BOOLEAN"], ["A", "a"], ["B", "C"], ["BOOLEAN", "BOOLEAN"], ["e", "B"], ["c", "INTEGER"], ["BOOLEAN", "INTEGER"]>>)
int_value (36)
add_attribute("D", "C", "D")
disjunction
add_call_chain(<<e,A,b,D,BOOLEAN,A,B>>)
int_value (4)
add_call_chain(<<A,A,e,D,B,b,b,c>>)
type_check
add_call_chain(<<B,c,c,d,b>>)
quotient
generate_java_code
add_query("A", "C", <<["a", "INTEGER"], ["b", "BOOLEAN"], ["d", "BOOLEAN"], ["C", "a"], ["D", "A"], ["D", "BOOLEAN"], ["C", "INTEGER"], ["B", "a"], ["C", "BOOLEAN"]>>, "e")
add_query("A", "b", <<["b", "BOOLEAN"], ["B", "INTEGER"], ["a", "INTEGER"]>>, "A")
conjunction
conjunction
add_attribute("D", "D", "BOOLEAN")
type_check
add_class(a)
add_attribute("A", "c", "e")
add_call_chain(<<D,c,d,A,d,b,D>>)
add_attribute("b", "B", "BOOLEAN")
add_command("b", "a", <<["a", "B"], ["A", "A"], ["d", "BOOLEAN"], ["c", "INTEGER"]>>)
add_call_chain(<<a,A,d,d,A,a,D>>)
add_query("A", "b", <<["e", "D"], ["a", "BOOLEAN"], ["A", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["INTEGER", "C"], ["c", "B"], ["B", "BOOLEAN"], ["c", "INTEGER"]>>, "D")
generate_java_code
logical_negation
add_attribute("b", "INTEGER", "INTEGER")
type_check
add_attribute("b", "INTEGER", "B")
conjunction
add_call_chain(<<b,e>>)
int_value (11)
disjunction
add_call_chain(<<e,d,BOOLEAN,BOOLEAN,D>>)
add_call_chain(<<d,A,A,A,INTEGER>>)
disjunction
int_value (21)
numerical_negation
logical_negation
numerical_negation
add_call_chain(<<A,BOOLEAN>>)
int_value (5)
type_check
logical_negation
int_value (31)
bool_value (true)
numerical_negation
add_call_chain(<<e,C,c>>)
int_value (18)
disjunction
greater_than
add_call_chain(<<C,c,C,b,C,d,B,B,A>>)
add_class(B)
numerical_negation
bool_value (false)
logical_negation
bool_value (true)
add_query("D", "c", <<["INTEGER", "D"]>>, "A")
add_call_chain(<<BOOLEAN,c,D,A,b,INTEGER>>)
less_than
numerical_negation
add_call_chain(<<b,C,d,B>>)
generate_java_code
add_command("B", "B", <<["a", "BOOLEAN"], ["A", "a"], ["A", "BOOLEAN"], ["e", "INTEGER"]>>)
generate_java_code
numerical_negation
logical_negation
add_class(b)
int_value (42)
add_attribute("D", "a", "BOOLEAN")
quotient
numerical_negation
add_attribute("A", "BOOLEAN", "BOOLEAN")
disjunction
add_command("b", "D", <<["d", "d"], ["B", "INTEGER"]>>)
add_command("d", "a", <<["A", "BOOLEAN"], ["B", "BOOLEAN"]>>)
int_value (24)
generate_java_code
add_call_chain(<<INTEGER,D,b,D,B,e,A>>)
add_query("A", "b", <<["B", "INTEGER"], ["d", "INTEGER"], ["c", "d"], ["C", "BOOLEAN"], ["c", "BOOLEAN"], ["B", "A"], ["a", "B"], ["D", "BOOLEAN"], ["D", "INTEGER"]>>, "A")
add_call_chain(<<D,d,B,d,B,a,e>>)
