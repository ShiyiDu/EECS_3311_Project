logical_negation
add_class(C)
add_call_chain(<<C,d,c,a>>)
int_value (25)
add_query("d", "d", <<["A", "A"], ["c", "INTEGER"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["a", "INTEGER"], ["INTEGER", "BOOLEAN"], ["A", "BOOLEAN"], ["e", "BOOLEAN"], ["b", "INTEGER"]>>, "c")
add_attribute("d", "BOOLEAN", "D")
int_value (34)
conjunction
add_query("C", "BOOLEAN", <<["e", "BOOLEAN"]>>, "B")
addition
add_command("c", "e", <<["C", "INTEGER"], ["c", "B"], ["b", "D"]>>)
add_class(D)
add_command("A", "d", <<["C", "INTEGER"], ["e", "INTEGER"], ["D", "INTEGER"], ["C", "INTEGER"], ["c", "A"], ["INTEGER", "INTEGER"], ["INTEGER", "BOOLEAN"]>>)
numerical_negation
add_query("A", "C", <<["e", "BOOLEAN"], ["A", "INTEGER"], ["C", "BOOLEAN"]>>, "c")
add_attribute("C", "C", "BOOLEAN")
int_value (10)
int_value (17)
generate_java_code
generate_java_code
add_call_chain(<<a,A,a,e>>)
less_than
add_class(a)
add_call_chain(<<d,B,C,A,B,B,a,d>>)
add_query("a", "BOOLEAN", <<["e", "BOOLEAN"], ["D", "INTEGER"], ["A", "BOOLEAN"], ["d", "INTEGER"], ["d", "BOOLEAN"], ["A", "INTEGER"], ["A", "BOOLEAN"]>>, "D")
add_query("D", "a", <<["d", "INTEGER"], ["e", "INTEGER"], ["c", "BOOLEAN"], ["d", "INTEGER"], ["B", "BOOLEAN"], ["e", "INTEGER"], ["D", "BOOLEAN"], ["C", "INTEGER"], ["e", "INTEGER"]>>, "A")
int_value (7)
disjunction
add_attribute("C", "a", "BOOLEAN")
add_call_chain(<<INTEGER,BOOLEAN>>)
add_call_chain(<<INTEGER,b,D,B,A,INTEGER,INTEGER,A>>)
add_query("a", "B", <<["a", "a"], ["a", "BOOLEAN"], ["B", "D"], ["b", "INTEGER"], ["d", "BOOLEAN"], ["B", "D"], ["INTEGER", "INTEGER"], ["b", "B"]>>, "D")
logical_negation
add_query("e", "A", <<["C", "INTEGER"], ["C", "INTEGER"], ["a", "d"], ["a", "BOOLEAN"], ["D", "d"], ["A", "b"], ["B", "B"]>>, "e")
logical_negation
generate_java_code
disjunction
int_value (35)
conjunction
add_call_chain(<<A,e,c,BOOLEAN,B,INTEGER>>)
subtraction
add_query("A", "d", <<["B", "B"], ["B", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "BOOLEAN"]>>, "D")
numerical_negation
add_query("D", "d", <<["b", "BOOLEAN"], ["C", "INTEGER"], ["b", "C"], ["BOOLEAN", "BOOLEAN"], ["D", "BOOLEAN"]>>, "INTEGER")
add_query("e", "BOOLEAN", <<["D", "B"], ["e", "D"], ["A", "INTEGER"], ["b", "INTEGER"], ["d", "INTEGER"]>>, "A")
add_command("d", "C", <<["D", "INTEGER"], ["c", "INTEGER"], ["c", "BOOLEAN"], ["c", "INTEGER"], ["b", "BOOLEAN"], ["a", "INTEGER"], ["b", "BOOLEAN"], ["B", "BOOLEAN"]>>)
add_command("a", "d", <<["D", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["C", "BOOLEAN"], ["c", "INTEGER"]>>)
add_command("B", "a", <<["c", "BOOLEAN"], ["a", "INTEGER"], ["BOOLEAN", "A"], ["B", "BOOLEAN"], ["a", "c"], ["C", "BOOLEAN"]>>)
generate_java_code
add_class(e)
add_command("B", "a", <<["b", "BOOLEAN"], ["A", "INTEGER"], ["A", "INTEGER"], ["INTEGER", "INTEGER"]>>)
add_attribute("INTEGER", "b", "INTEGER")
add_query("b", "C", <<["a", "D"], ["INTEGER", "BOOLEAN"]>>, "a")
bool_value (false)
add_call_chain(<<b>>)
add_call_chain(<<d,B,INTEGER,C,c,A>>)
add_call_chain(<<a,A,e,c,BOOLEAN,D,B,e,D>>)
logical_negation
type_check
type_check
logical_negation
add_attribute("b", "B", "A")
quotient
add_call_chain(<<c,c,a,B,c,d,D>>)
bool_value (false)
equals
logical_negation
add_command("D", "c", <<["a", "B"], ["B", "D"], ["c", "INTEGER"], ["D", "INTEGER"], ["e", "BOOLEAN"]>>)
generate_java_code
add_call_chain(<<BOOLEAN,e,D,A,e,D,b,B,e>>)
add_call_chain(<<BOOLEAN,b,C,A,e>>)
greater_than
equals
add_query("INTEGER", "INTEGER", <<["c", "b"], ["BOOLEAN", "BOOLEAN"], ["B", "INTEGER"], ["A", "D"]>>, "A")
add_call_chain(<<C,B,D>>)
add_call_chain(<<BOOLEAN,b,B,e,C,C,INTEGER,BOOLEAN,INTEGER>>)
add_call_chain(<<D,B,a,a,D,D,C>>)
disjunction
add_attribute("B", "c", "INTEGER")
add_command("d", "A", <<["a", "INTEGER"]>>)
add_call_chain(<<d,C,C,d,A,a,c,a>>)
modulo
add_command("INTEGER", "A", <<["A", "INTEGER"]>>)
add_call_chain(<<d,D,a,D,C,b,D>>)
numerical_negation
add_attribute("d", "d", "D")
add_call_chain(<<BOOLEAN>>)
add_attribute("d", "B", "INTEGER")
add_command("a", "BOOLEAN", <<["a", "BOOLEAN"], ["D", "D"], ["BOOLEAN", "BOOLEAN"], ["C", "INTEGER"]>>)
add_class(c)
less_than
bool_value (false)
add_call_chain(<<B,A>>)
add_attribute("C", "d", "C")
add_attribute("B", "C", "b")
logical_negation
addition
generate_java_code
int_value (30)
add_class(D)
add_attribute("b", "c", "INTEGER")
add_command("B", "BOOLEAN", <<["a", "b"], ["BOOLEAN", "INTEGER"], ["A", "BOOLEAN"]>>)
int_value (5)
equals
logical_negation
add_call_chain(<<D,INTEGER>>)
add_attribute("B", "d", "INTEGER")
add_query("d", "a", <<["A", "C"], ["B", "INTEGER"]>>, "B")
add_command("e", "e", <<["e", "C"], ["b", "C"], ["B", "C"]>>)
numerical_negation
add_call_chain(<<B,a,A,D,B,e,a,A,a>>)
bool_value (false)
type_check
int_value (47)
add_class(b)
add_call_chain(<<D,A,INTEGER,B,BOOLEAN>>)
multiplication
add_call_chain(<<C,e,B,A,c,D,d,c>>)
add_attribute("b", "INTEGER", "e")
generate_java_code
add_call_chain(<<B,a,B,C,INTEGER,e,A,C,B>>)
less_than
add_query("D", "A", <<["a", "INTEGER"], ["a", "BOOLEAN"], ["b", "INTEGER"], ["b", "INTEGER"], ["B", "INTEGER"]>>, "c")
add_class(C)
int_value (12)
disjunction
bool_value (true)
add_query("INTEGER", "e", <<["d", "BOOLEAN"], ["D", "a"], ["D", "BOOLEAN"], ["b", "BOOLEAN"]>>, "a")
numerical_negation
bool_value (false)
add_call_chain(<<D,C,INTEGER,c,C,D,b,BOOLEAN,D>>)
bool_value (true)
add_query("B", "A", <<["D", "INTEGER"], ["a", "BOOLEAN"], ["D", "BOOLEAN"], ["D", "BOOLEAN"], ["e", "B"], ["C", "INTEGER"]>>, "INTEGER")
add_attribute("e", "C", "BOOLEAN")
add_command("d", "C", <<["C", "INTEGER"], ["A", "BOOLEAN"], ["c", "INTEGER"], ["d", "INTEGER"], ["A", "d"], ["C", "D"], ["C", "BOOLEAN"], ["c", "BOOLEAN"], ["D", "BOOLEAN"]>>)
add_query("e", "D", <<["d", "INTEGER"], ["D", "e"], ["A", "INTEGER"], ["INTEGER", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "e"], ["e", "INTEGER"]>>, "d")
int_value (26)
numerical_negation
add_call_chain(<<a,e,A,C,BOOLEAN,D>>)
add_call_chain(<<a,B,INTEGER>>)
add_call_chain(<<A,B,c,d,e>>)
add_attribute("C", "b", "BOOLEAN")
logical_negation
add_class(b)
add_query("a", "D", <<["D", "BOOLEAN"], ["d", "b"]>>, "a")
multiplication
add_class(C)
add_call_chain(<<A>>)
add_command("c", "C", <<["e", "BOOLEAN"], ["a", "e"]>>)
logical_negation
addition
add_attribute("b", "C", "e")
numerical_negation
less_than
logical_negation
add_call_chain(<<a,b,e>>)
int_value (48)
add_call_chain(<<B,A,B,A,D,B>>)
add_query("a", "c", <<["B", "BOOLEAN"], ["C", "INTEGER"], ["C", "D"], ["A", "BOOLEAN"], ["a", "D"], ["a", "BOOLEAN"], ["B", "BOOLEAN"]>>, "a")
add_class(B)
int_value (41)
generate_java_code
add_call_chain(<<d>>)
add_command("A", "a", <<["A", "BOOLEAN"]>>)
add_call_chain(<<BOOLEAN,c,INTEGER>>)
disjunction
bool_value (false)
int_value (2)
quotient
bool_value (true)
add_command("D", "e", <<["a", "INTEGER"], ["e", "BOOLEAN"], ["d", "INTEGER"]>>)
add_call_chain(<<B,e,A,B,d,D,B,d,a>>)
numerical_negation
bool_value (true)
generate_java_code
add_query("A", "C", <<["A", "BOOLEAN"], ["D", "INTEGER"], ["D", "d"], ["e", "D"], ["D", "INTEGER"], ["BOOLEAN", "INTEGER"], ["a", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "INTEGER"]>>, "B")
add_class(c)
disjunction
add_class(B)
type_check
generate_java_code
add_command("a", "B", <<["A", "INTEGER"], ["C", "INTEGER"], ["D", "INTEGER"], ["c", "B"], ["B", "BOOLEAN"], ["c", "BOOLEAN"], ["b", "BOOLEAN"], ["B", "INTEGER"]>>)
add_command("e", "e", <<["d", "BOOLEAN"]>>)
add_query("e", "B", <<["A", "INTEGER"], ["e", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["d", "INTEGER"], ["a", "BOOLEAN"], ["INTEGER", "d"], ["C", "INTEGER"], ["a", "BOOLEAN"]>>, "c")
add_command("e", "A", <<["C", "e"], ["C", "A"], ["C", "INTEGER"], ["e", "INTEGER"], ["d", "INTEGER"], ["C", "a"], ["INTEGER", "INTEGER"]>>)
numerical_negation
add_call_chain(<<C,B,INTEGER,e,b,C,BOOLEAN>>)
type_check
type_check
add_query("e", "A", <<["e", "BOOLEAN"], ["C", "B"], ["D", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["e", "BOOLEAN"], ["B", "BOOLEAN"], ["INTEGER", "d"]>>, "C")
conjunction
add_query("d", "a", <<["c", "C"], ["INTEGER", "INTEGER"], ["INTEGER", "b"], ["D", "BOOLEAN"], ["c", "BOOLEAN"], ["a", "INTEGER"]>>, "B")
numerical_negation
add_attribute("c", "D", "BOOLEAN")
int_value (23)
add_attribute("B", "e", "INTEGER")
add_call_chain(<<C,C,A,b,C,d,BOOLEAN>>)
add_query("a", "A", <<["B", "BOOLEAN"], ["B", "INTEGER"], ["A", "B"], ["c", "BOOLEAN"], ["C", "e"], ["D", "INTEGER"]>>, "b")
add_call_chain(<<b,c,BOOLEAN,A,e,e,D,D,d>>)
logical_negation
conjunction
addition
add_attribute("b", "B", "BOOLEAN")
add_call_chain(<<D,C,INTEGER,e>>)
int_value (40)
generate_java_code
int_value (22)
add_call_chain(<<C,d,C,INTEGER,B,INTEGER,a>>)
add_command("e", "a", <<["D", "BOOLEAN"]>>)
add_attribute("A", "C", "BOOLEAN")
int_value (35)
type_check
add_call_chain(<<a>>)
bool_value (false)
add_query("b", "a", <<["C", "INTEGER"], ["b", "INTEGER"], ["c", "BOOLEAN"], ["d", "INTEGER"], ["a", "INTEGER"]>>, "D")
type_check
add_command("B", "d", <<["A", "a"], ["c", "BOOLEAN"], ["D", "INTEGER"]>>)
type_check
numerical_negation
add_query("c", "C", <<["D", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["INTEGER", "D"], ["INTEGER", "BOOLEAN"], ["D", "INTEGER"], ["BOOLEAN", "d"], ["C", "INTEGER"], ["B", "b"], ["C", "BOOLEAN"]>>, "A")
add_query("D", "d", <<["a", "INTEGER"], ["e", "INTEGER"], ["d", "e"], ["B", "INTEGER"], ["b", "B"], ["a", "BOOLEAN"]>>, "INTEGER")
add_command("C", "B", <<["a", "BOOLEAN"], ["b", "D"], ["b", "b"], ["a", "INTEGER"], ["C", "b"], ["A", "BOOLEAN"], ["c", "INTEGER"]>>)
add_command("INTEGER", "D", <<["c", "INTEGER"], ["e", "INTEGER"], ["D", "BOOLEAN"]>>)
add_command("A", "d", <<["C", "INTEGER"], ["D", "INTEGER"], ["B", "b"], ["BOOLEAN", "BOOLEAN"], ["A", "BOOLEAN"]>>)
logical_negation
add_command("e", "d", <<["B", "INTEGER"], ["B", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["a", "BOOLEAN"], ["A", "INTEGER"]>>)
logical_negation
type_check
add_query("c", "BOOLEAN", <<["D", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "INTEGER"], ["D", "BOOLEAN"], ["INTEGER", "INTEGER"], ["b", "INTEGER"], ["e", "BOOLEAN"]>>, "A")
type_check
logical_negation
generate_java_code
add_attribute("D", "a", "BOOLEAN")
add_call_chain(<<A>>)
add_attribute("d", "d", "INTEGER")
int_value (5)
bool_value (false)
less_than
disjunction
conjunction
bool_value (false)
numerical_negation
