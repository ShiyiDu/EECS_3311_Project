type_check
add_attribute("C", "d", "a")
add_attribute("INTEGER", "c", "A")
bool_value (false)
add_class(D)
equals
add_query("D", "B", <<["C", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["c", "BOOLEAN"], ["b", "INTEGER"], ["C", "INTEGER"], ["a", "INTEGER"], ["C", "INTEGER"], ["B", "C"], ["b", "c"]>>, "c")
add_call_chain(<<D,c,d,e,c,B,d>>)
logical_negation
less_than
bool_value (true)
add_call_chain(<<B,B,d,A,D,B,d,A,BOOLEAN>>)
bool_value (false)
generate_java_code
add_call_chain(<<c,b,BOOLEAN,d>>)
numerical_negation
add_call_chain(<<A,C,D,d,A,C,B,d,C>>)
add_class(C)
generate_java_code
type_check
add_command("e", "D", <<["D", "INTEGER"], ["a", "INTEGER"], ["c", "D"]>>)
add_attribute("B", "a", "c")
bool_value (true)
numerical_negation
add_command("A", "C", <<["d", "BOOLEAN"], ["e", "INTEGER"], ["D", "INTEGER"], ["A", "INTEGER"]>>)
add_call_chain(<<C>>)
add_call_chain(<<D,B>>)
type_check
numerical_negation
add_command("A", "c", <<["d", "d"]>>)
add_attribute("e", "c", "INTEGER")
add_call_chain(<<A,c,b>>)
add_class(c)
add_query("e", "B", <<["A", "e"], ["C", "INTEGER"], ["a", "BOOLEAN"]>>, "D")
type_check
int_value (48)
logical_negation
numerical_negation
add_class(D)
numerical_negation
int_value (48)
add_call_chain(<<A,c,a,d>>)
generate_java_code
add_query("a", "A", <<["A", "BOOLEAN"], ["BOOLEAN", "b"], ["C", "BOOLEAN"], ["e", "BOOLEAN"], ["C", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["C", "c"], ["B", "D"]>>, "D")
bool_value (true)
add_command("B", "A", <<["C", "B"], ["e", "BOOLEAN"], ["B", "INTEGER"]>>)
add_attribute("c", "D", "INTEGER")
add_call_chain(<<C,e,d>>)
bool_value (true)
add_call_chain(<<e,INTEGER>>)
equals
add_call_chain(<<e,e,B,a,a,c,D,b,D>>)
greater_than
generate_java_code
add_call_chain(<<B>>)
numerical_negation
add_query("B", "d", <<["C", "INTEGER"], ["C", "INTEGER"]>>, "A")
add_query("D", "d", <<["c", "INTEGER"]>>, "B")
add_attribute("B", "D", "BOOLEAN")
bool_value (false)
add_command("d", "C", <<["a", "e"], ["e", "C"], ["a", "C"], ["C", "INTEGER"], ["B", "D"], ["c", "BOOLEAN"], ["A", "A"]>>)
add_class(A)
add_call_chain(<<b,e,d,D,C>>)
greater_than
conjunction
add_class(c)
add_command("D", "A", <<["BOOLEAN", "BOOLEAN"]>>)
add_call_chain(<<e,B,e,b>>)
add_class(a)
generate_java_code
type_check
add_command("C", "a", <<["A", "BOOLEAN"], ["C", "BOOLEAN"], ["D", "INTEGER"], ["A", "a"], ["D", "BOOLEAN"], ["INTEGER", "INTEGER"], ["a", "d"], ["D", "INTEGER"]>>)
disjunction
generate_java_code
generate_java_code
add_call_chain(<<D,b,D,A>>)
equals
add_query("d", "INTEGER", <<["BOOLEAN", "BOOLEAN"], ["c", "b"], ["a", "B"], ["b", "BOOLEAN"]>>, "d")
add_command("INTEGER", "d", <<["b", "BOOLEAN"], ["e", "BOOLEAN"], ["A", "INTEGER"], ["A", "INTEGER"], ["C", "b"], ["D", "INTEGER"], ["D", "INTEGER"], ["d", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>)
modulo
logical_negation
logical_negation
conjunction
add_call_chain(<<B,b,A,A,INTEGER>>)
add_attribute("b", "B", "INTEGER")
add_class(C)
add_command("d", "BOOLEAN", <<["D", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "INTEGER"], ["B", "BOOLEAN"]>>)
generate_java_code
bool_value (false)
int_value (42)
int_value (25)
logical_negation
add_attribute("INTEGER", "A", "BOOLEAN")
subtraction
add_class(D)
add_call_chain(<<b,b,d,d,d,d,b,D>>)
equals
add_call_chain(<<B,D,C,D,D,d>>)
bool_value (true)
generate_java_code
numerical_negation
add_attribute("INTEGER", "BOOLEAN", "BOOLEAN")
generate_java_code
bool_value (true)
add_call_chain(<<INTEGER,C,BOOLEAN,D,c,e,d>>)
disjunction
generate_java_code
add_attribute("B", "a", "BOOLEAN")
add_command("c", "B", <<["d", "BOOLEAN"], ["B", "b"], ["c", "INTEGER"], ["A", "INTEGER"]>>)
add_query("d", "e", <<["B", "INTEGER"], ["B", "INTEGER"], ["c", "BOOLEAN"]>>, "A")
add_query("B", "d", <<["A", "INTEGER"], ["A", "INTEGER"], ["B", "BOOLEAN"], ["B", "INTEGER"], ["e", "C"], ["C", "A"], ["D", "INTEGER"], ["e", "INTEGER"], ["INTEGER", "INTEGER"]>>, "C")
add_attribute("c", "B", "C")
add_call_chain(<<C,A,BOOLEAN>>)
add_attribute("D", "INTEGER", "BOOLEAN")
bool_value (true)
numerical_negation
numerical_negation
equals
quotient
add_call_chain(<<B,b,C,e,b>>)
add_call_chain(<<a,d,d,B,A,A>>)
type_check
numerical_negation
add_call_chain(<<e,c,d,C>>)
add_call_chain(<<C,A,c,d,c>>)
add_attribute("c", "d", "INTEGER")
add_query("a", "d", <<["A", "BOOLEAN"], ["D", "BOOLEAN"], ["INTEGER", "a"]>>, "a")
add_call_chain(<<d,C,B,e,d,BOOLEAN>>)
add_command("B", "BOOLEAN", <<["a", "BOOLEAN"], ["D", "C"], ["b", "D"], ["B", "INTEGER"], ["c", "BOOLEAN"]>>)
add_command("a", "b", <<["a", "INTEGER"]>>)
logical_negation
conjunction
less_than
subtraction
add_attribute("C", "B", "e")
type_check
add_call_chain(<<A,BOOLEAN,D>>)
add_class(a)
add_call_chain(<<C,C,c,B,b,A,BOOLEAN,c>>)
bool_value (false)
add_call_chain(<<e,BOOLEAN,D,d,e,D>>)
type_check
add_query("INTEGER", "b", <<["D", "D"], ["C", "C"], ["INTEGER", "d"], ["BOOLEAN", "INTEGER"], ["a", "INTEGER"], ["a", "C"], ["e", "INTEGER"], ["INTEGER", "INTEGER"], ["C", "b"]>>, "C")
int_value (49)
add_command("D", "c", <<["C", "BOOLEAN"], ["e", "INTEGER"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["d", "INTEGER"], ["b", "BOOLEAN"], ["C", "A"]>>)
add_attribute("a", "B", "INTEGER")
add_command("d", "a", <<["B", "INTEGER"], ["c", "e"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["B", "INTEGER"], ["A", "d"], ["A", "d"]>>)
add_call_chain(<<b,B,c,D,C,a,a>>)
logical_negation
type_check
generate_java_code
int_value (47)
add_call_chain(<<D,C,B,d,BOOLEAN,B,A,A,e>>)
add_command("c", "a", <<["e", "d"], ["e", "INTEGER"]>>)
add_attribute("D", "C", "INTEGER")
int_value (38)
add_command("C", "d", <<["C", "c"], ["INTEGER", "INTEGER"], ["INTEGER", "INTEGER"], ["b", "BOOLEAN"], ["b", "c"], ["D", "BOOLEAN"], ["D", "INTEGER"]>>)
logical_negation
add_attribute("e", "BOOLEAN", "D")
numerical_negation
add_query("C", "b", <<["BOOLEAN", "INTEGER"]>>, "A")
conjunction
disjunction
add_query("d", "a", <<["b", "a"], ["a", "INTEGER"], ["c", "B"], ["b", "INTEGER"], ["d", "BOOLEAN"], ["d", "BOOLEAN"]>>, "c")
generate_java_code
add_command("b", "e", <<["B", "B"], ["C", "b"], ["c", "BOOLEAN"]>>)
numerical_negation
add_query("c", "c", <<["A", "c"], ["C", "INTEGER"], ["b", "c"], ["INTEGER", "BOOLEAN"], ["a", "D"], ["c", "BOOLEAN"], ["B", "BOOLEAN"]>>, "b")
logical_negation
equals
numerical_negation
bool_value (false)
bool_value (true)
add_query("e", "e", <<["C", "c"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["b", "INTEGER"]>>, "INTEGER")
generate_java_code
add_attribute("A", "B", "BOOLEAN")
add_call_chain(<<D,B,b,D,D,B,D,D,c>>)
bool_value (false)
generate_java_code
add_call_chain(<<C,e>>)
add_query("e", "A", <<["b", "D"], ["b", "BOOLEAN"]>>, "a")
add_query("d", "d", <<["c", "INTEGER"], ["A", "a"], ["D", "c"], ["a", "BOOLEAN"], ["e", "BOOLEAN"]>>, "C")
add_call_chain(<<d,c,A,e,INTEGER,C,e,INTEGER>>)
type_check
add_call_chain(<<C,C,a,C,c,INTEGER,B>>)
logical_negation
generate_java_code
multiplication
add_attribute("a", "b", "BOOLEAN")
add_attribute("e", "a", "INTEGER")
type_check
numerical_negation
add_call_chain(<<a,b,BOOLEAN,A,e>>)
generate_java_code
add_command("a", "C", <<["C", "INTEGER"], ["b", "BOOLEAN"], ["d", "INTEGER"], ["B", "INTEGER"], ["e", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>)
disjunction
logical_negation
bool_value (true)
greater_than
less_than
generate_java_code
int_value (42)
type_check
bool_value (false)
bool_value (false)
add_command("b", "b", <<["BOOLEAN", "BOOLEAN"], ["e", "INTEGER"], ["A", "INTEGER"], ["e", "c"], ["d", "INTEGER"], ["B", "BOOLEAN"], ["a", "c"], ["b", "INTEGER"]>>)
add_call_chain(<<C,A,b,D,c,b,b,D>>)
int_value (35)
add_query("B", "B", <<["BOOLEAN", "INTEGER"], ["D", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "INTEGER"], ["A", "C"], ["B", "BOOLEAN"], ["A", "INTEGER"]>>, "b")
bool_value (true)
logical_negation
add_query("c", "B", <<["b", "BOOLEAN"], ["b", "B"], ["C", "INTEGER"], ["b", "a"], ["D", "INTEGER"], ["b", "A"], ["d", "C"]>>, "B")
add_command("D", "A", <<["B", "A"], ["c", "b"], ["A", "BOOLEAN"], ["B", "INTEGER"], ["a", "BOOLEAN"], ["C", "A"], ["D", "INTEGER"]>>)
add_call_chain(<<B,INTEGER,c>>)
add_call_chain(<<INTEGER,INTEGER,C>>)
type_check
add_call_chain(<<c,A,C,b,D,C,a,e,BOOLEAN>>)
modulo
bool_value (false)
add_call_chain(<<d,A,C,C>>)
add_query("b", "C", <<["D", "BOOLEAN"], ["D", "BOOLEAN"]>>, "b")
add_query("b", "e", <<["d", "B"], ["b", "BOOLEAN"], ["c", "INTEGER"], ["C", "INTEGER"], ["A", "c"], ["b", "BOOLEAN"], ["a", "BOOLEAN"], ["c", "BOOLEAN"], ["a", "INTEGER"]>>, "c")
modulo
disjunction
add_class(D)
int_value (22)
