numerical_negation
logical_negation
bool_value (false)
add_attribute("e", "A", "e")
logical_negation
add_call_chain(<<C,D,b,B,d,d,A,B,a>>)
add_command("d", "BOOLEAN", <<["C", "INTEGER"], ["D", "BOOLEAN"], ["BOOLEAN", "C"], ["b", "BOOLEAN"], ["e", "BOOLEAN"]>>)
add_query("C", "BOOLEAN", <<["b", "INTEGER"], ["D", "BOOLEAN"], ["A", "D"], ["B", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["C", "INTEGER"]>>, "c")
logical_negation
add_call_chain(<<INTEGER,e>>)
add_command("B", "B", <<["b", "INTEGER"]>>)
add_class(b)
add_call_chain(<<A,d>>)
add_attribute("B", "C", "INTEGER")
add_call_chain(<<c,INTEGER,A,a,a,b,e,d,c>>)
type_check
add_attribute("c", "d", "a")
int_value (1)
disjunction
type_check
conjunction
add_query("c", "b", <<["C", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "C"], ["A", "BOOLEAN"], ["A", "INTEGER"], ["INTEGER", "c"], ["C", "INTEGER"]>>, "d")
less_than
add_query("C", "d", <<["D", "BOOLEAN"], ["c", "INTEGER"], ["INTEGER", "INTEGER"], ["C", "INTEGER"], ["e", "INTEGER"], ["B", "INTEGER"]>>, "b")
bool_value (false)
generate_java_code
add_class(B)
int_value (6)
int_value (47)
add_attribute("A", "c", "INTEGER")
add_call_chain(<<a,d,D,c>>)
type_check
logical_negation
less_than
add_call_chain(<<b,BOOLEAN,A,C,BOOLEAN>>)
add_query("INTEGER", "INTEGER", <<["C", "BOOLEAN"], ["BOOLEAN", "D"]>>, "B")
disjunction
int_value (3)
add_command("INTEGER", "B", <<["d", "INTEGER"], ["e", "INTEGER"], ["D", "INTEGER"], ["e", "d"], ["c", "BOOLEAN"], ["a", "B"]>>)
add_class(A)
subtraction
add_query("A", "a", <<["D", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["C", "A"], ["e", "INTEGER"]>>, "e")
add_call_chain(<<b,c,a,INTEGER,b>>)
equals
add_query("a", "e", <<["a", "d"]>>, "B")
add_command("e", "INTEGER", <<["D", "INTEGER"]>>)
generate_java_code
add_query("a", "a", <<["a", "BOOLEAN"], ["a", "INTEGER"], ["D", "INTEGER"], ["A", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["d", "INTEGER"], ["BOOLEAN", "B"]>>, "A")
add_call_chain(<<a,b,INTEGER>>)
add_query("a", "e", <<["INTEGER", "INTEGER"], ["A", "C"], ["A", "INTEGER"], ["A", "BOOLEAN"], ["A", "INTEGER"], ["a", "BOOLEAN"]>>, "b")
bool_value (true)
add_command("e", "INTEGER", <<["B", "C"], ["b", "BOOLEAN"], ["C", "INTEGER"], ["a", "INTEGER"]>>)
numerical_negation
conjunction
numerical_negation
add_command("c", "a", <<["A", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "BOOLEAN"], ["B", "INTEGER"], ["D", "BOOLEAN"]>>)
add_command("B", "INTEGER", <<["d", "BOOLEAN"], ["a", "INTEGER"], ["B", "B"]>>)
add_class(b)
add_attribute("b", "D", "b")
add_query("d", "A", <<["c", "BOOLEAN"], ["INTEGER", "C"], ["D", "BOOLEAN"], ["b", "BOOLEAN"]>>, "D")
add_command("c", "D", <<["b", "INTEGER"]>>)
bool_value (false)
add_call_chain(<<INTEGER,c,A,A,b,a,C,A>>)
add_command("D", "A", <<["D", "INTEGER"], ["a", "B"], ["C", "BOOLEAN"]>>)
add_call_chain(<<d,e,C,b,a,c,C>>)
generate_java_code
numerical_negation
add_query("d", "D", <<["D", "BOOLEAN"], ["b", "d"]>>, "d")
conjunction
disjunction
addition
numerical_negation
bool_value (true)
add_call_chain(<<INTEGER,INTEGER>>)
add_call_chain(<<C,B,d,C,D,D>>)
add_attribute("D", "c", "BOOLEAN")
bool_value (false)
add_query("c", "INTEGER", <<["B", "INTEGER"], ["a", "INTEGER"], ["D", "BOOLEAN"], ["e", "INTEGER"], ["c", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "B"]>>, "c")
add_call_chain(<<e,D,INTEGER>>)
logical_negation
add_query("c", "C", <<["D", "BOOLEAN"], ["e", "c"], ["B", "c"], ["b", "A"], ["A", "B"], ["B", "BOOLEAN"]>>, "B")
add_class(c)
add_call_chain(<<e,A,D,a,a,A,a,a>>)
type_check
add_class(b)
int_value (9)
generate_java_code
bool_value (true)
generate_java_code
add_query("D", "D", <<["C", "BOOLEAN"]>>, "C")
add_attribute("C", "e", "BOOLEAN")
less_than
add_call_chain(<<e,d,a,C,INTEGER,e,B,a>>)
add_command("C", "BOOLEAN", <<["C", "b"], ["B", "C"], ["e", "BOOLEAN"], ["B", "INTEGER"], ["d", "D"], ["b", "b"], ["e", "BOOLEAN"], ["B", "INTEGER"], ["B", "BOOLEAN"]>>)
greater_than
add_attribute("INTEGER", "C", "e")
logical_negation
logical_negation
generate_java_code
add_attribute("b", "C", "c")
add_query("e", "e", <<["B", "INTEGER"], ["D", "BOOLEAN"]>>, "D")
int_value (43)
bool_value (true)
add_class(d)
add_call_chain(<<C,c,b>>)
add_call_chain(<<C,b,e,D,e,b,d,C>>)
bool_value (false)
bool_value (true)
add_call_chain(<<e,BOOLEAN,c,INTEGER,A,D>>)
logical_negation
int_value (18)
numerical_negation
int_value (15)
logical_negation
add_attribute("A", "C", "BOOLEAN")
multiplication
add_query("INTEGER", "e", <<["c", "INTEGER"], ["INTEGER", "d"], ["BOOLEAN", "c"]>>, "e")
add_query("B", "B", <<["INTEGER", "BOOLEAN"]>>, "d")
int_value (39)
numerical_negation
add_call_chain(<<B,c,B,e,a,a>>)
add_call_chain(<<c,a,B,b,C,B>>)
add_call_chain(<<A,B>>)
add_call_chain(<<a>>)
numerical_negation
add_class(A)
less_than
bool_value (true)
add_attribute("B", "e", "a")
disjunction
equals
add_query("c", "INTEGER", <<["D", "INTEGER"]>>, "e")
add_attribute("C", "B", "D")
add_call_chain(<<e,C,e,A>>)
add_class(A)
int_value (32)
numerical_negation
int_value (6)
add_call_chain(<<D,d,e,d,e,b>>)
add_attribute("C", "C", "INTEGER")
less_than
add_class(b)
type_check
add_command("a", "BOOLEAN", <<["c", "INTEGER"], ["B", "D"], ["B", "BOOLEAN"], ["d", "INTEGER"], ["D", "B"], ["e", "A"], ["BOOLEAN", "A"], ["A", "c"]>>)
logical_negation
conjunction
int_value (19)
add_query("A", "d", <<["d", "BOOLEAN"], ["c", "INTEGER"], ["D", "BOOLEAN"], ["B", "INTEGER"], ["A", "INTEGER"], ["b", "INTEGER"], ["D", "BOOLEAN"], ["a", "a"]>>, "D")
add_class(INTEGER)
add_query("e", "a", <<["e", "INTEGER"], ["e", "INTEGER"], ["a", "A"], ["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["A", "B"], ["BOOLEAN", "INTEGER"]>>, "a")
numerical_negation
disjunction
bool_value (true)
logical_negation
add_call_chain(<<a>>)
int_value (9)
add_attribute("D", "BOOLEAN", "BOOLEAN")
add_command("d", "A", <<["c", "BOOLEAN"]>>)
add_class(c)
type_check
add_call_chain(<<INTEGER>>)
int_value (25)
generate_java_code
add_command("A", "d", <<["c", "BOOLEAN"], ["B", "INTEGER"], ["A", "B"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "INTEGER"], ["c", "d"], ["A", "C"]>>)
add_query("c", "d", <<["e", "INTEGER"], ["INTEGER", "BOOLEAN"], ["e", "c"], ["B", "INTEGER"], ["c", "b"], ["C", "BOOLEAN"]>>, "a")
int_value (42)
add_call_chain(<<B,A,d,A,B,B,B,D>>)
add_call_chain(<<D,a,C>>)
numerical_negation
bool_value (false)
logical_negation
add_attribute("C", "A", "BOOLEAN")
generate_java_code
add_command("e", "d", <<["B", "e"], ["b", "BOOLEAN"], ["a", "INTEGER"], ["D", "INTEGER"]>>)
add_command("b", "B", <<["C", "d"], ["d", "BOOLEAN"], ["b", "B"]>>)
quotient
add_call_chain(<<c,a,D,b,B,C,B,C,b>>)
add_class(e)
add_call_chain(<<INTEGER,e,B,BOOLEAN>>)
add_call_chain(<<D,D>>)
addition
bool_value (false)
add_call_chain(<<C,a,D,e,B,BOOLEAN>>)
equals
numerical_negation
add_command("c", "A", <<["e", "B"], ["d", "D"], ["d", "INTEGER"], ["A", "INTEGER"]>>)
add_class(C)
int_value (21)
subtraction
add_attribute("BOOLEAN", "A", "a")
add_command("D", "e", <<["B", "INTEGER"], ["INTEGER", "B"], ["e", "D"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["B", "a"]>>)
add_command("c", "b", <<["a", "INTEGER"], ["A", "BOOLEAN"], ["e", "BOOLEAN"], ["e", "BOOLEAN"], ["B", "INTEGER"], ["b", "BOOLEAN"], ["B", "BOOLEAN"], ["b", "d"], ["BOOLEAN", "BOOLEAN"]>>)
bool_value (false)
bool_value (false)
greater_than
add_call_chain(<<c,B,BOOLEAN,b,C,d,b,D,A>>)
subtraction
add_class(C)
add_attribute("A", "e", "BOOLEAN")
add_call_chain(<<d,C,d,c,d,a,c>>)
add_command("d", "C", <<["C", "d"], ["b", "D"], ["a", "INTEGER"], ["B", "C"]>>)
add_call_chain(<<c,C,A,c,b>>)
add_query("D", "b", <<["a", "INTEGER"]>>, "d")
logical_negation
quotient
logical_negation
int_value (40)
bool_value (false)
greater_than
add_call_chain(<<d,B,c,D,D,BOOLEAN,a,INTEGER,e>>)
bool_value (false)
quotient
int_value (18)
type_check
add_call_chain(<<e,D>>)
numerical_negation
type_check
add_call_chain(<<b,a,c>>)
add_attribute("A", "e", "BOOLEAN")
logical_negation
add_attribute("e", "BOOLEAN", "B")
int_value (46)
disjunction
generate_java_code
bool_value (true)
add_call_chain(<<d,BOOLEAN>>)
logical_negation
int_value (3)
logical_negation
generate_java_code
add_query("A", "d", <<["D", "c"], ["e", "a"], ["D", "BOOLEAN"], ["C", "C"], ["A", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["c", "BOOLEAN"], ["a", "BOOLEAN"]>>, "e")
numerical_negation
