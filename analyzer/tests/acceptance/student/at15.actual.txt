  Status: OK.
  Number of classes being specified: 0
->add_class("A")
  Status: OK.
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_command("A","ca",<<["a", "ds"], ["d", "hapy"]>>)
  Status: Error (Parameter types do not refer to primitive types or existing classes: ds, hapy).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_command("A","ca",<<["A", "INTEGER"], ["B", "BOOLEAN"]>>)
  Status: Error (Parameter names clash with existing classes: A).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_command("A","ca",<<["A", "INTEGER"], ["A", "BOOLEAN"]>>)
  Status: Error (Parameter names clash with existing classes: A, A).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_class("A")
  Status: Error (A is already an existing class name).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_command("A","ca",<<["a", "ds"], ["d", "hapy"]>>)
  Status: Error (Parameter types do not refer to primitive types or existing classes: ds, hapy).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_command("A","ca",<<["a", "ds"], ["d", "INTEGER"]>>)
  Status: Error (Parameter types do not refer to primitive types or existing classes: ds).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_command("A","ca",<<["INTEGER", "INTEGER"]>>)
  Status: Error (Parameter names clash with existing classes: INTEGER).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_class("A")
  Status: Error (A is already an existing class name).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_command("A","ca",<<["a", "INTEGER"], ["a", "BOOLEAN"]>>)
  Status: Error (Duplicated parameter names: a).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_command("A","ca",<<["a", "INTEGER"], ["a", "BOOLEAN"], ["b", "BOOLEAN"], ["b", "BOOLEAN"]>>)
  Status: Error (Duplicated parameter names: a, b).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_command("A","ca",<<["a", "INTEGER"], ["a", "BOOLEAN"], ["a", "BOOLEAN"]>>)
  Status: Error (Duplicated parameter names: a).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_command("haha","ca",<<>>)
  Status: Error (haha is not an existing class name).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_query("B","cb",<<["INTEGER", "A"], ["BOOLEAN", "B"]>>,"haha")
  Status: Error (B is not an existing class name).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_query("A","cb",<<["INTEGER", "A"], ["BOOLEAN", "B"]>>,"haha")
  Status: Error (Parameter names clash with existing classes: INTEGER, BOOLEAN).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_query("A","get",<<>>,"hah")
  Status: Error (Return type does not refer to a primitive type or an existing class: hah).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_class("A")
  Status: Error (A is already an existing class name).
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_command("A","set_b",<<["int", "INTEGER"]>>)
  Status: OK.
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b(INTEGER)
->add_assignment_instruction("A","set_b","int")
  Status: OK.
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b(INTEGER)
  Routine currently being implemented: {A}.set_b
  Assignment being specified: int := ?
->add_call_chain(<<"int">>)
  Status: OK.
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b(INTEGER)
->add_assignment_instruction("A","set_b","int")
  Status: OK.
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b(INTEGER)
  Routine currently being implemented: {A}.set_b
  Assignment being specified: int := ?
->add_call_chain(<<"in">>)
  Status: OK.
  Number of classes being specified: 1
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b(INTEGER)
->type_check
  class A is not type-correct:
    int = in in routine set_b is not type-correct.
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
  }
->add_class("B")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b(INTEGER)
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 0
->add_command("B","set_b",<<>>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b(INTEGER)
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->add_assignment_instruction("B","set_b","c")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b(INTEGER)
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {B}.set_b
  Assignment being specified: c := ?
->add_call_chain(<<"a">>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b(INTEGER)
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->type_check
  class A is not type-correct:
    int = in in routine set_b is not type-correct.
  class B is not type-correct:
    c = a in routine set_b is not type-correct.
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->add_query("A","get_b",<<>>,"BOOLEAN")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 1
        + get_b: BOOLEAN
      Number of commands: 1
        + set_b(INTEGER)
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->add_command("A","set_a",<<>>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 1
        + get_b: BOOLEAN
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->add_assignment_instruction("A","get_b","a")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 1
        + get_b: BOOLEAN
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.get_b
  Assignment being specified: a := ?
->add_call_chain(<<"haha">>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 1
        + get_b: BOOLEAN
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->add_assignment_instruction("A","set_a","d")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 1
        + get_b: BOOLEAN
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.set_a
  Assignment being specified: d := ?
->add_call_chain(<<"h">>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 1
        + get_b: BOOLEAN
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      return Result;
    }
    void set_a() {
      d = h;
    }
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->type_check
  class A is not type-correct:
    int = in in routine set_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    d = h in routine set_a is not type-correct.
  class B is not type-correct:
    c = a in routine set_b is not type-correct.
->add_assignment_instruction("A","get_b","c")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 1
        + get_b: BOOLEAN
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.get_b
  Assignment being specified: c := ?
->add_call_chain(<<"no">>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 1
        + get_b: BOOLEAN
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->type_check
  class A is not type-correct:
    int = in in routine set_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    d = h in routine set_a is not type-correct.
  class B is not type-correct:
    c = a in routine set_b is not type-correct.
->add_query("A","get_c",<<>>,"B")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      c = no;
      return Result;
    }
    void set_a() {
      d = h;
    }
    B get_c() {
      B Result = null;
      return Result;
    }
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->add_call_chain(<<"haha">>)
  Status: Error (An assignment instruction is not currently being specified).
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->add_query("A","get_b",<<>>,"BOOLEAN")
  Status: Error (get_b is already an existing feature name in class A).
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->add_command("A","set_a",<<>>)
  Status: Error (set_a is already an existing feature name in class A).
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->add_assignment_instruction("A","get_b","a")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.get_b
  Assignment being specified: a := ?
->add_call_chain(<<"haha">>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      c = no;
      a = haha;
      return Result;
    }
    void set_a() {
      d = h;
    }
    B get_c() {
      B Result = null;
      return Result;
    }
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->add_assignment_instruction("A","set_a","d")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.set_a
  Assignment being specified: d := ?
->add_call_chain(<<"h">>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      c = no;
      a = haha;
      return Result;
    }
    void set_a() {
      d = h;
      d = h;
    }
    B get_c() {
      B Result = null;
      return Result;
    }
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->type_check
  class A is not type-correct:
    int = in in routine set_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    d = h in routine set_a is not type-correct.
    d = h in routine set_a is not type-correct.
  class B is not type-correct:
    c = a in routine set_b is not type-correct.
->add_assignment_instruction("A","get_b","c")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.get_b
  Assignment being specified: c := ?
->add_call_chain(<<"no">>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->type_check
  class A is not type-correct:
    int = in in routine set_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    d = h in routine set_a is not type-correct.
    d = h in routine set_a is not type-correct.
  class B is not type-correct:
    c = a in routine set_b is not type-correct.
->add_query("A","get_c",<<>>,"B")
  Status: Error (get_c is already an existing feature name in class A).
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      c = no;
      a = haha;
      c = no;
      return Result;
    }
    void set_a() {
      d = h;
      d = h;
    }
    B get_c() {
      B Result = null;
      return Result;
    }
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->type_check
  class A is not type-correct:
    int = in in routine set_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    d = h in routine set_a is not type-correct.
    d = h in routine set_a is not type-correct.
  class B is not type-correct:
    c = a in routine set_b is not type-correct.
->add_assignment_instruction("A","get_b","d")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.get_b
  Assignment being specified: d := ?
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      c = no;
      a = haha;
      c = no;
      d = ?;
      return Result;
    }
    void set_a() {
      d = h;
      d = h;
    }
    B get_c() {
      B Result = null;
      return Result;
    }
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->addition
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.get_b
  Assignment being specified: d := (? + nil)
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      c = no;
      a = haha;
      c = no;
      d = (? + nil);
      return Result;
    }
    void set_a() {
      d = h;
      d = h;
    }
    B get_c() {
      B Result = null;
      return Result;
    }
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->type_check
  Status: Error (An assignment instruction is currently being specified for routine get_b in class A).
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.get_b
  Assignment being specified: d := (? + nil)
->type_check
  Status: Error (An assignment instruction is currently being specified for routine get_b in class A).
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.get_b
  Assignment being specified: d := (? + nil)
->add_call_chain(<<"happy">>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.get_b
  Assignment being specified: d := (happy + ?)
->add_call_chain(<<"not happy">>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      c = no;
      a = haha;
      c = no;
      d = (happy + not happy);
      return Result;
    }
    void set_a() {
      d = h;
      d = h;
    }
    B get_c() {
      B Result = null;
      return Result;
    }
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->type_check
  class A is not type-correct:
    int = in in routine set_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    d = (happy + not happy) in routine get_b is not type-correct.
    d = h in routine set_a is not type-correct.
    d = h in routine set_a is not type-correct.
  class B is not type-correct:
    c = a in routine set_b is not type-correct.
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      c = no;
      a = haha;
      c = no;
      d = (happy + not happy);
      return Result;
    }
    void set_a() {
      d = h;
      d = h;
    }
    B get_c() {
      B Result = null;
      return Result;
    }
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->add_attribute("A","get_b","INTEGER")
  Status: Error (get_b is already an existing feature name in class A).
  Number of classes being specified: 2
    A
      Number of attributes: 0
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->add_attribute("A","test_b","INTEGER")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 1
        + test_b: INTEGER
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      c = no;
      a = haha;
      c = no;
      d = (happy + not happy);
      return Result;
    }
    void set_a() {
      d = h;
      d = h;
    }
    B get_c() {
      B Result = null;
      return Result;
    }
    int test_b;
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->add_assignment_instruction("A","test_b","a")
  Status: Error (Attribute test_b in class A cannot be specified with an implementation).
  Number of classes being specified: 2
    A
      Number of attributes: 1
        + test_b: INTEGER
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      c = no;
      a = haha;
      c = no;
      d = (happy + not happy);
      return Result;
    }
    void set_a() {
      d = h;
      d = h;
    }
    B get_c() {
      B Result = null;
      return Result;
    }
    int test_b;
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->add_assignment_instruction("A","get_b","Result")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 1
        + test_b: INTEGER
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.get_b
  Assignment being specified: Result := ?
->add_call_chain(<<"Result">>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 1
        + test_b: INTEGER
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      c = no;
      a = haha;
      c = no;
      d = (happy + not happy);
      Result = Result;
      return Result;
    }
    void set_a() {
      d = h;
      d = h;
    }
    B get_c() {
      B Result = null;
      return Result;
    }
    int test_b;
  }
  class B {
    void set_b() {
      c = a;
    }
  }
->type_check
  class A is not type-correct:
    int = in in routine set_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    d = (happy + not happy) in routine get_b is not type-correct.
    d = h in routine set_a is not type-correct.
    d = h in routine set_a is not type-correct.
  class B is not type-correct:
    c = a in routine set_b is not type-correct.
->add_class("A")
  Status: Error (A is already an existing class name).
  Number of classes being specified: 2
    A
      Number of attributes: 1
        + test_b: INTEGER
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->add_query("A","set_a",<<>>,"BOOLEAN")
  Status: Error (set_a is already an existing feature name in class A).
  Number of classes being specified: 2
    A
      Number of attributes: 1
        + test_b: INTEGER
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->add_assignment_instruction("A","set_a","Result")
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 1
        + test_b: INTEGER
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
  Routine currently being implemented: {A}.set_a
  Assignment being specified: Result := ?
->add_call_chain(<<"result">>)
  Status: OK.
  Number of classes being specified: 2
    A
      Number of attributes: 1
        + test_b: INTEGER
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->type_check
  class A is not type-correct:
    int = in in routine set_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    d = (happy + not happy) in routine get_b is not type-correct.
    d = h in routine set_a is not type-correct.
    d = h in routine set_a is not type-correct.
    Result = result in routine set_a is not type-correct.
  class B is not type-correct:
    c = a in routine set_b is not type-correct.
->add_query("A","set_b",<<["Result", "BOOLEAN"]>>,"BOOLEAN")
  Status: Error (set_b is already an existing feature name in class A).
  Number of classes being specified: 2
    A
      Number of attributes: 1
        + test_b: INTEGER
      Number of queries: 2
        + get_b: BOOLEAN
        + get_c: B
      Number of commands: 2
        + set_b(INTEGER)
        + set_a
    B
      Number of attributes: 0
      Number of queries: 0
      Number of commands: 1
        + set_b
->type_check
  class A is not type-correct:
    int = in in routine set_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    a = haha in routine get_b is not type-correct.
    c = no in routine get_b is not type-correct.
    d = (happy + not happy) in routine get_b is not type-correct.
    d = h in routine set_a is not type-correct.
    d = h in routine set_a is not type-correct.
    Result = result in routine set_a is not type-correct.
  class B is not type-correct:
    c = a in routine set_b is not type-correct.
->generate_java_code
  class A {
    void set_b(int int) {
      int = int;
      int = in;
    }
    bool get_b() {
      bool Result = False;
      a = haha;
      c = no;
      a = haha;
      c = no;
      d = (happy + not happy);
      Result = Result;
      return Result;
    }
    void set_a() {
      d = h;
      d = h;
      Result = result;
    }
    B get_c() {
      B Result = null;
      return Result;
    }
    int test_b;
  }
  class B {
    void set_b() {
      c = a;
    }
  }
