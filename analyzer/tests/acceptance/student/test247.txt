add_class(c)
add_call_chain(<<BOOLEAN,D,D,e,A,A,a,C,c>>)
add_call_chain(<<D,d,a>>)
add_query("d", "d", <<["BOOLEAN", "e"]>>, "BOOLEAN")
disjunction
bool_value (true)
conjunction
add_query("d", "B", <<["d", "A"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["B", "BOOLEAN"], ["B", "INTEGER"], ["D", "INTEGER"], ["a", "INTEGER"], ["c", "INTEGER"]>>, "c")
add_class(a)
add_attribute("D", "a", "BOOLEAN")
add_command("b", "a", <<["A", "BOOLEAN"], ["c", "BOOLEAN"], ["INTEGER", "D"], ["a", "INTEGER"], ["B", "e"]>>)
generate_java_code
logical_negation
generate_java_code
add_command("A", "A", <<["BOOLEAN", "INTEGER"], ["d", "INTEGER"], ["INTEGER", "INTEGER"]>>)
add_call_chain(<<BOOLEAN>>)
add_query("B", "D", <<["INTEGER", "BOOLEAN"], ["b", "INTEGER"], ["C", "INTEGER"], ["C", "INTEGER"], ["c", "BOOLEAN"], ["e", "BOOLEAN"]>>, "INTEGER")
numerical_negation
add_call_chain(<<B,C,C,b,INTEGER,INTEGER,d>>)
bool_value (false)
bool_value (true)
add_call_chain(<<A,D,b,d,b>>)
add_query("d", "A", <<["d", "INTEGER"], ["b", "BOOLEAN"], ["B", "INTEGER"], ["e", "INTEGER"], ["b", "A"], ["C", "INTEGER"], ["e", "C"], ["C", "INTEGER"], ["c", "INTEGER"]>>, "c")
add_command("a", "a", <<["e", "B"], ["B", "INTEGER"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["A", "BOOLEAN"], ["d", "BOOLEAN"], ["e", "B"], ["A", "BOOLEAN"], ["e", "INTEGER"]>>)
logical_negation
conjunction
generate_java_code
numerical_negation
add_query("b", "a", <<["d", "D"], ["B", "INTEGER"]>>, "C")
add_call_chain(<<c,C>>)
logical_negation
add_command("c", "A", <<["INTEGER", "BOOLEAN"], ["d", "BOOLEAN"]>>)
disjunction
add_command("d", "D", <<["b", "BOOLEAN"]>>)
generate_java_code
add_call_chain(<<e,d,c,B,INTEGER,a>>)
add_query("INTEGER", "c", <<["a", "INTEGER"], ["a", "INTEGER"], ["b", "INTEGER"], ["b", "INTEGER"], ["INTEGER", "BOOLEAN"], ["C", "C"], ["A", "BOOLEAN"], ["INTEGER", "D"]>>, "b")
add_call_chain(<<A,D,C,B,c,b,D,D,D>>)
generate_java_code
bool_value (true)
add_command("INTEGER", "d", <<["d", "a"], ["A", "INTEGER"], ["C", "INTEGER"], ["A", "BOOLEAN"], ["B", "INTEGER"]>>)
numerical_negation
logical_negation
add_command("c", "C", <<["B", "INTEGER"], ["d", "e"], ["C", "INTEGER"]>>)
int_value (25)
greater_than
int_value (43)
add_call_chain(<<c,BOOLEAN,C,B,BOOLEAN,A,C,D,b>>)
add_command("B", "A", <<["BOOLEAN", "BOOLEAN"], ["a", "A"], ["c", "INTEGER"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["e", "INTEGER"], ["A", "INTEGER"], ["a", "a"]>>)
add_call_chain(<<e,C,c>>)
add_call_chain(<<B,D,INTEGER>>)
add_query("c", "a", <<["INTEGER", "BOOLEAN"], ["b", "B"], ["e", "c"], ["a", "INTEGER"], ["D", "INTEGER"]>>, "B")
numerical_negation
add_call_chain(<<C,D,b,B,e,C,c,B>>)
conjunction
int_value (37)
add_call_chain(<<c,B,C,c,d,D>>)
type_check
int_value (31)
logical_negation
generate_java_code
add_call_chain(<<D,INTEGER,c>>)
add_attribute("D", "A", "INTEGER")
add_class(C)
add_attribute("B", "A", "BOOLEAN")
generate_java_code
generate_java_code
bool_value (false)
add_attribute("A", "C", "INTEGER")
add_command("C", "D", <<["B", "e"], ["e", "INTEGER"], ["A", "INTEGER"], ["d", "INTEGER"], ["e", "INTEGER"], ["C", "INTEGER"], ["b", "B"]>>)
logical_negation
bool_value (false)
add_call_chain(<<INTEGER,C,BOOLEAN>>)
numerical_negation
add_call_chain(<<D,D>>)
subtraction
add_class(BOOLEAN)
quotient
numerical_negation
add_class(B)
less_than
add_command("INTEGER", "D", <<["C", "BOOLEAN"], ["C", "BOOLEAN"], ["INTEGER", "e"], ["e", "BOOLEAN"], ["a", "INTEGER"], ["B", "BOOLEAN"]>>)
numerical_negation
add_call_chain(<<B,C>>)
add_query("c", "a", <<["a", "BOOLEAN"], ["B", "BOOLEAN"]>>, "BOOLEAN")
add_call_chain(<<a>>)
bool_value (false)
disjunction
bool_value (true)
addition
equals
generate_java_code
add_call_chain(<<b,c,D,a>>)
add_class(BOOLEAN)
int_value (14)
add_attribute("d", "a", "INTEGER")
add_query("A", "B", <<["C", "BOOLEAN"], ["b", "BOOLEAN"], ["e", "e"], ["BOOLEAN", "INTEGER"]>>, "INTEGER")
add_call_chain(<<b,A,e,c,BOOLEAN,c,D,A,d>>)
generate_java_code
add_query("C", "C", <<["D", "INTEGER"], ["B", "a"], ["e", "BOOLEAN"], ["B", "INTEGER"], ["D", "INTEGER"], ["b", "INTEGER"], ["C", "b"], ["a", "b"]>>, "d")
add_attribute("D", "e", "INTEGER")
add_query("C", "A", <<["A", "d"], ["b", "BOOLEAN"], ["D", "INTEGER"], ["D", "a"]>>, "B")
greater_than
subtraction
generate_java_code
int_value (10)
add_class(A)
conjunction
numerical_negation
equals
numerical_negation
add_query("C", "A", <<["e", "B"], ["B", "BOOLEAN"], ["D", "c"], ["D", "BOOLEAN"], ["D", "BOOLEAN"], ["INTEGER", "D"], ["c", "BOOLEAN"], ["D", "BOOLEAN"]>>, "D")
add_call_chain(<<D,c,B>>)
add_attribute("c", "e", "INTEGER")
int_value (37)
add_command("C", "B", <<["b", "INTEGER"]>>)
add_attribute("e", "A", "INTEGER")
add_call_chain(<<b,A,B,b,B,A,d,INTEGER>>)
add_call_chain(<<a,D,d,e,D,a,c>>)
add_command("D", "c", <<["B", "BOOLEAN"], ["A", "b"], ["INTEGER", "INTEGER"], ["A", "BOOLEAN"]>>)
add_call_chain(<<A,e,e,d>>)
int_value (31)
add_attribute("BOOLEAN", "B", "c")
logical_negation
int_value (9)
add_call_chain(<<A,c,a,B,c,D,D>>)
add_class(C)
add_call_chain(<<a,b,e,D,INTEGER>>)
add_attribute("a", "d", "INTEGER")
add_attribute("C", "c", "BOOLEAN")
bool_value (false)
add_class(D)
less_than
add_command("d", "B", <<["INTEGER", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["A", "a"], ["B", "INTEGER"], ["C", "INTEGER"]>>)
type_check
numerical_negation
logical_negation
int_value (35)
disjunction
add_call_chain(<<e>>)
add_attribute("b", "A", "INTEGER")
add_command("a", "B", <<["D", "BOOLEAN"], ["D", "INTEGER"], ["d", "B"], ["d", "BOOLEAN"]>>)
int_value (28)
add_attribute("BOOLEAN", "a", "BOOLEAN")
add_attribute("A", "D", "INTEGER")
add_command("A", "b", <<["B", "INTEGER"], ["d", "A"], ["e", "INTEGER"], ["a", "c"], ["INTEGER", "INTEGER"], ["B", "D"], ["b", "b"], ["c", "BOOLEAN"], ["a", "D"]>>)
add_call_chain(<<B,A,e>>)
less_than
add_attribute("b", "B", "INTEGER")
greater_than
add_query("D", "a", <<["INTEGER", "B"], ["a", "BOOLEAN"], ["e", "BOOLEAN"]>>, "A")
int_value (36)
int_value (33)
add_call_chain(<<c>>)
add_call_chain(<<A,a,a,b,A,A,e,A>>)
add_attribute("A", "B", "INTEGER")
add_command("B", "A", <<["B", "BOOLEAN"]>>)
add_class(c)
add_class(c)
type_check
add_command("D", "D", <<["c", "b"], ["d", "C"], ["BOOLEAN", "BOOLEAN"]>>)
add_command("BOOLEAN", "B", <<["a", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["e", "A"]>>)
add_class(A)
multiplication
generate_java_code
generate_java_code
conjunction
numerical_negation
add_query("d", "e", <<["c", "D"], ["c", "BOOLEAN"], ["B", "e"], ["INTEGER", "e"], ["C", "BOOLEAN"], ["D", "INTEGER"]>>, "B")
generate_java_code
logical_negation
int_value (30)
add_query("INTEGER", "b", <<["A", "BOOLEAN"], ["D", "BOOLEAN"], ["b", "BOOLEAN"], ["B", "INTEGER"], ["d", "INTEGER"]>>, "D")
add_query("B", "INTEGER", <<["BOOLEAN", "BOOLEAN"], ["b", "BOOLEAN"], ["a", "INTEGER"], ["C", "A"], ["C", "INTEGER"], ["C", "BOOLEAN"], ["B", "INTEGER"], ["a", "INTEGER"]>>, "e")
modulo
add_call_chain(<<a,c,C,b,d,c,e,B>>)
bool_value (true)
add_call_chain(<<a>>)
add_call_chain(<<a,D,d,b>>)
add_command("A", "D", <<["B", "INTEGER"], ["INTEGER", "BOOLEAN"], ["d", "BOOLEAN"]>>)
type_check
conjunction
int_value (11)
add_call_chain(<<c,c,B,A,D,D,a,b>>)
greater_than
greater_than
generate_java_code
generate_java_code
add_query("B", "d", <<["A", "INTEGER"], ["INTEGER", "d"], ["B", "INTEGER"], ["B", "BOOLEAN"], ["B", "e"], ["D", "BOOLEAN"], ["a", "INTEGER"], ["d", "INTEGER"], ["d", "e"]>>, "C")
numerical_negation
subtraction
add_query("e", "a", <<["BOOLEAN", "INTEGER"]>>, "C")
add_query("BOOLEAN", "BOOLEAN", <<["BOOLEAN", "BOOLEAN"], ["e", "INTEGER"], ["C", "BOOLEAN"]>>, "B")
greater_than
int_value (22)
add_call_chain(<<b,b,A,b,BOOLEAN,A,a>>)
type_check
add_call_chain(<<a,A,C,e>>)
add_command("a", "d", <<["e", "a"], ["C", "BOOLEAN"], ["d", "BOOLEAN"], ["c", "INTEGER"], ["a", "INTEGER"]>>)
add_call_chain(<<c,e,C,A>>)
add_class(a)
equals
add_call_chain(<<B>>)
multiplication
numerical_negation
add_attribute("C", "B", "BOOLEAN")
add_call_chain(<<D,D>>)
add_query("C", "B", <<["C", "c"], ["D", "BOOLEAN"], ["BOOLEAN", "c"], ["C", "C"], ["BOOLEAN", "INTEGER"], ["D", "INTEGER"], ["d", "D"], ["B", "B"]>>, "a")
add_class(A)
numerical_negation
logical_negation
add_command("INTEGER", "b", <<["A", "C"], ["a", "BOOLEAN"], ["a", "INTEGER"], ["b", "INTEGER"], ["INTEGER", "BOOLEAN"], ["a", "BOOLEAN"], ["c", "D"]>>)
bool_value (true)
add_command("c", "A", <<["BOOLEAN", "BOOLEAN"], ["B", "INTEGER"]>>)
logical_negation
bool_value (false)
numerical_negation
add_call_chain(<<D,c>>)
int_value (20)
add_class(d)
type_check
numerical_negation
