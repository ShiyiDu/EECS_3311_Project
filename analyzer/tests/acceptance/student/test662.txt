generate_java_code
numerical_negation
add_call_chain(<<C,D,d,B>>)
bool_value (true)
add_attribute("INTEGER", "c", "B")
greater_than
bool_value (false)
add_call_chain(<<BOOLEAN>>)
logical_negation
add_command("C", "e", <<["B", "c"], ["e", "D"], ["A", "A"], ["a", "BOOLEAN"], ["c", "A"], ["D", "INTEGER"], ["D", "INTEGER"], ["d", "INTEGER"], ["B", "INTEGER"]>>)
numerical_negation
add_call_chain(<<BOOLEAN,c,e,D,A,D,A>>)
add_class(C)
add_command("C", "C", <<["A", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["d", "INTEGER"], ["a", "BOOLEAN"], ["B", "INTEGER"], ["A", "BOOLEAN"]>>)
int_value (36)
bool_value (false)
multiplication
int_value (7)
type_check
numerical_negation
int_value (31)
logical_negation
generate_java_code
add_query("INTEGER", "c", <<["BOOLEAN", "BOOLEAN"], ["c", "C"], ["e", "INTEGER"], ["C", "A"], ["c", "BOOLEAN"], ["a", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "BOOLEAN"]>>, "b")
add_command("b", "C", <<["B", "INTEGER"], ["A", "D"], ["c", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>)
int_value (20)
modulo
disjunction
type_check
add_query("c", "B", <<["C", "INTEGER"], ["d", "INTEGER"], ["b", "INTEGER"], ["D", "INTEGER"], ["A", "INTEGER"], ["B", "INTEGER"], ["e", "d"]>>, "D")
int_value (30)
int_value (32)
logical_negation
add_attribute("B", "B", "BOOLEAN")
add_call_chain(<<INTEGER,D,D,D,a>>)
add_class(b)
multiplication
generate_java_code
add_call_chain(<<a,d,INTEGER,C>>)
add_call_chain(<<d,c>>)
greater_than
disjunction
type_check
bool_value (true)
bool_value (false)
bool_value (false)
generate_java_code
bool_value (false)
add_attribute("INTEGER", "B", "INTEGER")
numerical_negation
add_command("B", "INTEGER", <<["a", "BOOLEAN"], ["e", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["C", "BOOLEAN"], ["B", "A"], ["b", "A"], ["C", "INTEGER"]>>)
add_attribute("D", "D", "BOOLEAN")
add_command("B", "B", <<["C", "BOOLEAN"], ["INTEGER", "B"], ["D", "INTEGER"], ["A", "a"], ["c", "INTEGER"]>>)
add_call_chain(<<b,e,c,c>>)
add_query("D", "b", <<["D", "INTEGER"]>>, "BOOLEAN")
add_call_chain(<<e,d>>)
add_command("d", "a", <<["C", "C"]>>)
numerical_negation
disjunction
int_value (29)
bool_value (true)
equals
quotient
add_command("e", "D", <<["D", "c"], ["b", "BOOLEAN"], ["d", "BOOLEAN"], ["e", "INTEGER"], ["A", "INTEGER"], ["B", "BOOLEAN"], ["c", "BOOLEAN"]>>)
add_attribute("C", "B", "BOOLEAN")
addition
logical_negation
add_attribute("D", "C", "BOOLEAN")
add_call_chain(<<D,B>>)
add_attribute("b", "b", "D")
subtraction
int_value (12)
add_call_chain(<<e>>)
add_call_chain(<<A,A,INTEGER,c,C,BOOLEAN,e,d,e>>)
conjunction
logical_negation
add_call_chain(<<INTEGER,b,B,c,b>>)
numerical_negation
type_check
int_value (19)
add_call_chain(<<B,a,a>>)
add_call_chain(<<a>>)
add_command("D", "C", <<["a", "INTEGER"], ["BOOLEAN", "INTEGER"], ["d", "INTEGER"], ["b", "BOOLEAN"], ["C", "A"], ["b", "INTEGER"], ["INTEGER", "BOOLEAN"], ["C", "BOOLEAN"]>>)
add_call_chain(<<D>>)
add_class(A)
bool_value (false)
multiplication
add_attribute("A", "D", "INTEGER")
numerical_negation
type_check
add_call_chain(<<a,c>>)
add_attribute("A", "C", "INTEGER")
add_command("C", "e", <<["C", "INTEGER"], ["a", "INTEGER"], ["BOOLEAN", "A"], ["A", "BOOLEAN"]>>)
int_value (39)
add_call_chain(<<b,c,BOOLEAN,INTEGER,b,C>>)
addition
add_class(INTEGER)
generate_java_code
add_query("D", "A", <<["b", "D"], ["e", "c"], ["C", "INTEGER"], ["D", "B"], ["B", "d"], ["c", "B"], ["e", "BOOLEAN"], ["e", "INTEGER"], ["B", "BOOLEAN"]>>, "b")
numerical_negation
add_query("a", "a", <<["B", "BOOLEAN"], ["a", "e"], ["d", "BOOLEAN"], ["e", "INTEGER"]>>, "C")
add_attribute("d", "B", "d")
add_query("d", "D", <<["A", "b"], ["d", "INTEGER"], ["a", "C"], ["d", "INTEGER"], ["b", "INTEGER"]>>, "b")
add_call_chain(<<c,BOOLEAN>>)
add_attribute("INTEGER", "b", "INTEGER")
add_class(a)
multiplication
add_call_chain(<<a,d,e,C,c>>)
add_call_chain(<<A,D,a>>)
add_call_chain(<<B,d>>)
add_command("BOOLEAN", "D", <<["C", "C"], ["c", "e"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["c", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["c", "INTEGER"], ["D", "b"]>>)
type_check
int_value (20)
add_query("e", "C", <<["d", "INTEGER"], ["A", "e"], ["D", "a"], ["INTEGER", "INTEGER"], ["d", "INTEGER"]>>, "b")
add_attribute("e", "BOOLEAN", "d")
int_value (7)
add_query("D", "BOOLEAN", <<["b", "INTEGER"], ["C", "a"], ["B", "INTEGER"], ["e", "INTEGER"], ["C", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["D", "BOOLEAN"]>>, "e")
logical_negation
generate_java_code
numerical_negation
add_call_chain(<<c,D,BOOLEAN,C,d,B,b,d,BOOLEAN>>)
add_command("e", "C", <<["INTEGER", "INTEGER"], ["d", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["A", "INTEGER"], ["a", "INTEGER"], ["D", "B"], ["b", "C"]>>)
int_value (8)
add_command("B", "A", <<["C", "INTEGER"], ["a", "INTEGER"], ["a", "INTEGER"], ["b", "BOOLEAN"], ["C", "c"], ["d", "B"], ["a", "INTEGER"], ["A", "B"]>>)
numerical_negation
numerical_negation
add_call_chain(<<B,C,C,e,INTEGER,b>>)
add_call_chain(<<c,b,C,d,e>>)
generate_java_code
add_call_chain(<<A,C,a,A,e>>)
add_attribute("C", "A", "INTEGER")
numerical_negation
bool_value (false)
add_call_chain(<<b>>)
int_value (41)
numerical_negation
logical_negation
add_attribute("a", "INTEGER", "INTEGER")
add_command("B", "a", <<["d", "INTEGER"], ["C", "B"], ["INTEGER", "e"], ["BOOLEAN", "BOOLEAN"]>>)
disjunction
int_value (8)
add_command("BOOLEAN", "C", <<["d", "BOOLEAN"], ["c", "BOOLEAN"]>>)
numerical_negation
add_query("C", "b", <<["a", "INTEGER"], ["C", "BOOLEAN"], ["D", "INTEGER"], ["B", "A"], ["D", "INTEGER"]>>, "e")
numerical_negation
add_query("C", "c", <<["B", "INTEGER"], ["B", "e"], ["BOOLEAN", "BOOLEAN"], ["a", "BOOLEAN"]>>, "A")
add_query("C", "INTEGER", <<["e", "e"], ["A", "INTEGER"], ["A", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["a", "c"], ["C", "INTEGER"], ["BOOLEAN", "INTEGER"], ["B", "INTEGER"], ["A", "BOOLEAN"]>>, "b")
add_command("D", "INTEGER", <<["b", "BOOLEAN"], ["INTEGER", "INTEGER"], ["a", "B"], ["D", "BOOLEAN"], ["d", "b"], ["c", "e"], ["A", "b"], ["a", "INTEGER"], ["A", "INTEGER"]>>)
add_call_chain(<<e,b,INTEGER,A,a,D,C,BOOLEAN,a>>)
addition
int_value (38)
add_query("B", "a", <<["a", "INTEGER"], ["b", "C"], ["c", "C"], ["c", "INTEGER"], ["a", "INTEGER"]>>, "a")
bool_value (true)
type_check
generate_java_code
type_check
conjunction
add_call_chain(<<a,c,C,a,c>>)
equals
generate_java_code
add_query("d", "A", <<["d", "B"], ["a", "BOOLEAN"]>>, "d")
addition
add_call_chain(<<A,b,a>>)
modulo
bool_value (true)
bool_value (true)
type_check
bool_value (false)
int_value (25)
logical_negation
add_query("c", "d", <<["B", "D"], ["d", "INTEGER"], ["A", "INTEGER"], ["b", "BOOLEAN"], ["C", "B"], ["D", "B"]>>, "A")
bool_value (true)
add_attribute("BOOLEAN", "B", "BOOLEAN")
add_call_chain(<<a,a,D,b,B>>)
add_class(D)
add_class(d)
logical_negation
add_query("C", "e", <<["a", "BOOLEAN"], ["C", "b"]>>, "D")
numerical_negation
conjunction
logical_negation
add_attribute("B", "D", "INTEGER")
add_query("d", "A", <<["b", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["d", "d"], ["d", "INTEGER"], ["D", "D"], ["D", "d"], ["C", "BOOLEAN"]>>, "C")
greater_than
numerical_negation
add_call_chain(<<BOOLEAN,A>>)
add_attribute("d", "A", "c")
add_class(BOOLEAN)
add_attribute("d", "e", "D")
add_call_chain(<<A,b>>)
type_check
int_value (12)
add_attribute("b", "c", "BOOLEAN")
generate_java_code
add_command("e", "C", <<["BOOLEAN", "BOOLEAN"]>>)
type_check
type_check
less_than
add_attribute("A", "A", "BOOLEAN")
logical_negation
int_value (43)
add_call_chain(<<D,c,B,b,b,C,C>>)
bool_value (false)
conjunction
add_query("A", "B", <<["c", "INTEGER"], ["b", "INTEGER"]>>, "e")
bool_value (false)
logical_negation
add_command("c", "C", <<["A", "BOOLEAN"], ["a", "a"], ["a", "INTEGER"]>>)
add_attribute("A", "C", "d")
add_class(D)
numerical_negation
numerical_negation
addition
int_value (40)
bool_value (false)
add_call_chain(<<C,BOOLEAN,C,d>>)
generate_java_code
add_class(e)
int_value (12)
