add_command("b", "B", <<["e", "INTEGER"], ["B", "BOOLEAN"], ["BOOLEAN", "A"]>>)
add_command("B", "A", <<["C", "INTEGER"], ["e", "INTEGER"], ["e", "INTEGER"], ["a", "BOOLEAN"]>>)
type_check
equals
add_class(BOOLEAN)
add_call_chain(<<B,A,BOOLEAN,D,d>>)
int_value (21)
add_class(d)
add_command("d", "A", <<["A", "INTEGER"], ["D", "INTEGER"], ["D", "BOOLEAN"], ["d", "b"]>>)
addition
add_query("A", "b", <<["A", "BOOLEAN"], ["C", "B"], ["c", "BOOLEAN"], ["c", "D"]>>, "b")
int_value (23)
numerical_negation
int_value (3)
add_query("e", "d", <<["B", "BOOLEAN"], ["D", "INTEGER"], ["a", "INTEGER"], ["A", "b"], ["C", "INTEGER"], ["B", "BOOLEAN"], ["b", "C"], ["A", "BOOLEAN"], ["a", "INTEGER"]>>, "e")
add_query("C", "INTEGER", <<["C", "INTEGER"], ["B", "d"]>>, "e")
logical_negation
numerical_negation
add_class(B)
add_query("BOOLEAN", "b", <<["B", "INTEGER"], ["c", "c"]>>, "B")
add_attribute("B", "b", "INTEGER")
generate_java_code
int_value (29)
add_call_chain(<<D,a,B,BOOLEAN>>)
subtraction
numerical_negation
add_call_chain(<<b,c,B,e>>)
add_call_chain(<<C,A>>)
multiplication
add_command("D", "B", <<["a", "BOOLEAN"], ["a", "INTEGER"], ["e", "b"], ["INTEGER", "B"]>>)
add_call_chain(<<a,INTEGER,B,BOOLEAN,D,c>>)
add_query("e", "b", <<["D", "BOOLEAN"], ["e", "C"], ["c", "INTEGER"], ["a", "INTEGER"], ["B", "A"], ["BOOLEAN", "A"], ["C", "INTEGER"], ["C", "INTEGER"]>>, "C")
add_attribute("B", "A", "INTEGER")
add_attribute("BOOLEAN", "b", "INTEGER")
int_value (35)
addition
numerical_negation
int_value (27)
add_command("BOOLEAN", "c", <<["C", "e"], ["INTEGER", "A"], ["b", "BOOLEAN"]>>)
type_check
int_value (48)
add_query("c", "e", <<["b", "BOOLEAN"], ["b", "INTEGER"], ["C", "a"], ["c", "BOOLEAN"], ["D", "D"], ["INTEGER", "BOOLEAN"], ["d", "INTEGER"]>>, "b")
logical_negation
int_value (1)
int_value (1)
logical_negation
subtraction
numerical_negation
bool_value (false)
bool_value (true)
int_value (4)
numerical_negation
add_query("C", "d", <<["B", "INTEGER"], ["C", "INTEGER"], ["b", "INTEGER"], ["A", "D"], ["b", "B"], ["B", "A"], ["D", "INTEGER"]>>, "C")
add_call_chain(<<A,C,c,a,a>>)
add_call_chain(<<C,BOOLEAN,C,b,b>>)
add_attribute("d", "B", "C")
add_command("A", "b", <<["e", "BOOLEAN"], ["e", "INTEGER"], ["b", "B"], ["D", "INTEGER"], ["INTEGER", "INTEGER"], ["A", "c"], ["a", "INTEGER"], ["a", "BOOLEAN"]>>)
less_than
logical_negation
generate_java_code
add_query("B", "e", <<["d", "e"]>>, "e")
add_call_chain(<<a,b,c>>)
add_query("b", "b", <<["e", "INTEGER"], ["d", "C"], ["b", "BOOLEAN"], ["B", "BOOLEAN"], ["e", "d"]>>, "c")
add_class(b)
int_value (15)
add_call_chain(<<e,d,A,A,D,b,D,C,b>>)
numerical_negation
disjunction
add_class(e)
bool_value (true)
add_attribute("e", "C", "d")
disjunction
bool_value (true)
add_call_chain(<<C,b>>)
less_than
type_check
add_command("d", "D", <<["b", "BOOLEAN"], ["A", "A"]>>)
multiplication
add_call_chain(<<B>>)
add_call_chain(<<d,b,c,e,C>>)
int_value (5)
generate_java_code
int_value (13)
disjunction
bool_value (false)
disjunction
add_command("INTEGER", "INTEGER", <<["B", "INTEGER"], ["b", "BOOLEAN"], ["d", "INTEGER"], ["C", "BOOLEAN"]>>)
type_check
int_value (23)
add_command("a", "B", <<["C", "BOOLEAN"], ["C", "BOOLEAN"]>>)
greater_than
add_attribute("e", "C", "a")
numerical_negation
add_attribute("C", "b", "BOOLEAN")
int_value (6)
add_call_chain(<<A,C,B,a,a,B,A,C>>)
int_value (34)
add_call_chain(<<a,b,A,e,A,A,BOOLEAN,D,d>>)
add_call_chain(<<D,A,A,B,A,b,D>>)
less_than
less_than
int_value (15)
disjunction
type_check
add_call_chain(<<e,C,e>>)
add_query("b", "e", <<["e", "BOOLEAN"]>>, "C")
disjunction
add_query("a", "A", <<["C", "INTEGER"], ["d", "INTEGER"], ["B", "C"], ["C", "e"], ["d", "BOOLEAN"], ["e", "c"], ["e", "BOOLEAN"]>>, "d")
bool_value (false)
add_command("B", "C", <<["C", "d"], ["a", "INTEGER"], ["A", "INTEGER"], ["A", "BOOLEAN"], ["e", "c"], ["D", "BOOLEAN"], ["a", "A"], ["C", "B"]>>)
greater_than
generate_java_code
subtraction
add_call_chain(<<C,a>>)
add_attribute("B", "B", "BOOLEAN")
int_value (12)
disjunction
int_value (35)
add_call_chain(<<D,A,BOOLEAN,b>>)
add_call_chain(<<b,c,A,d,C,b,a,c>>)
numerical_negation
numerical_negation
add_call_chain(<<INTEGER,e,D,c,D>>)
bool_value (false)
logical_negation
add_command("c", "INTEGER", <<["A", "BOOLEAN"], ["a", "e"], ["B", "D"], ["e", "BOOLEAN"], ["a", "INTEGER"]>>)
disjunction
type_check
add_attribute("a", "B", "A")
add_command("A", "D", <<["A", "BOOLEAN"], ["e", "c"], ["d", "b"], ["A", "A"]>>)
add_attribute("B", "a", "D")
generate_java_code
bool_value (false)
bool_value (true)
add_class(B)
generate_java_code
add_call_chain(<<B,e,e>>)
int_value (4)
add_query("e", "c", <<["BOOLEAN", "INTEGER"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["INTEGER", "d"]>>, "A")
bool_value (true)
int_value (25)
add_command("B", "INTEGER", <<["C", "INTEGER"], ["A", "INTEGER"], ["A", "C"], ["D", "BOOLEAN"], ["a", "INTEGER"], ["c", "b"], ["b", "INTEGER"], ["B", "BOOLEAN"]>>)
equals
generate_java_code
logical_negation
add_command("c", "A", <<["A", "INTEGER"]>>)
add_attribute("B", "D", "BOOLEAN")
add_query("d", "B", <<["d", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["D", "INTEGER"], ["b", "INTEGER"], ["B", "A"], ["d", "BOOLEAN"], ["C", "INTEGER"], ["e", "INTEGER"]>>, "e")
add_command("b", "b", <<["C", "C"], ["D", "INTEGER"], ["D", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "d"]>>)
logical_negation
add_attribute("BOOLEAN", "B", "BOOLEAN")
logical_negation
equals
numerical_negation
add_query("a", "b", <<["a", "b"], ["D", "INTEGER"], ["e", "INTEGER"], ["B", "a"], ["B", "INTEGER"], ["A", "INTEGER"], ["c", "INTEGER"], ["C", "C"]>>, "B")
add_attribute("e", "c", "b")
add_command("D", "D", <<["A", "INTEGER"], ["d", "BOOLEAN"], ["INTEGER", "INTEGER"], ["C", "c"], ["C", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "C"], ["b", "BOOLEAN"]>>)
less_than
add_command("D", "a", <<["INTEGER", "e"], ["B", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "b"], ["c", "INTEGER"], ["e", "D"], ["C", "INTEGER"], ["D", "BOOLEAN"]>>)
generate_java_code
add_query("c", "c", <<["b", "BOOLEAN"]>>, "INTEGER")
numerical_negation
add_attribute("a", "a", "INTEGER")
add_attribute("b", "c", "INTEGER")
logical_negation
generate_java_code
generate_java_code
add_query("C", "BOOLEAN", <<["e", "INTEGER"], ["A", "C"], ["D", "BOOLEAN"]>>, "B")
add_class(D)
add_call_chain(<<D,INTEGER,a,D>>)
logical_negation
add_call_chain(<<D,b,a,D>>)
conjunction
add_attribute("b", "A", "a")
bool_value (false)
add_query("a", "c", <<["D", "C"], ["e", "BOOLEAN"], ["a", "INTEGER"], ["A", "a"], ["D", "INTEGER"]>>, "A")
add_attribute("INTEGER", "d", "INTEGER")
add_call_chain(<<D,c,C,b,C,c,BOOLEAN,a>>)
equals
add_call_chain(<<BOOLEAN,C,B,A,C,e,D,e,D>>)
bool_value (true)
numerical_negation
add_query("D", "b", <<["BOOLEAN", "BOOLEAN"], ["a", "INTEGER"], ["d", "BOOLEAN"], ["A", "BOOLEAN"], ["B", "D"]>>, "A")
less_than
add_command("B", "d", <<["C", "BOOLEAN"], ["b", "INTEGER"], ["D", "BOOLEAN"], ["e", "BOOLEAN"], ["C", "BOOLEAN"], ["INTEGER", "d"]>>)
add_query("BOOLEAN", "b", <<["C", "INTEGER"], ["d", "INTEGER"], ["D", "INTEGER"], ["d", "BOOLEAN"], ["A", "BOOLEAN"]>>, "c")
add_attribute("BOOLEAN", "A", "BOOLEAN")
add_command("BOOLEAN", "a", <<["BOOLEAN", "INTEGER"], ["e", "BOOLEAN"], ["d", "INTEGER"], ["a", "BOOLEAN"], ["b", "INTEGER"], ["A", "INTEGER"], ["C", "BOOLEAN"]>>)
add_attribute("b", "INTEGER", "BOOLEAN")
numerical_negation
greater_than
add_call_chain(<<C,d,B,D>>)
add_call_chain(<<e,d,B,c,BOOLEAN,A>>)
add_call_chain(<<c>>)
greater_than
add_call_chain(<<b,e,e>>)
numerical_negation
int_value (20)
add_query("A", "d", <<["A", "C"]>>, "a")
add_command("C", "D", <<["C", "BOOLEAN"], ["b", "B"], ["e", "INTEGER"], ["B", "INTEGER"], ["D", "a"]>>)
less_than
add_call_chain(<<b,d,c,C,B,C,INTEGER,a,A>>)
add_query("D", "c", <<["d", "INTEGER"], ["b", "INTEGER"], ["D", "D"], ["c", "INTEGER"]>>, "d")
add_call_chain(<<BOOLEAN,D,a,d,B,A,a>>)
add_attribute("a", "b", "INTEGER")
add_command("b", "d", <<["c", "B"], ["A", "B"], ["BOOLEAN", "BOOLEAN"], ["d", "d"], ["A", "BOOLEAN"], ["b", "BOOLEAN"]>>)
bool_value (false)
add_attribute("B", "e", "INTEGER")
generate_java_code
add_command("C", "A", <<["d", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["d", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["d", "B"], ["BOOLEAN", "c"], ["D", "INTEGER"], ["a", "B"]>>)
type_check
type_check
add_call_chain(<<d,b,c>>)
add_call_chain(<<c,B,D,C>>)
