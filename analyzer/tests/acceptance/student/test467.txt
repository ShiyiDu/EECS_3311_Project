generate_java_code
add_call_chain(<<B,C,d,C,d,d>>)
add_command("A", "A", <<["a", "A"], ["d", "A"], ["A", "INTEGER"], ["A", "C"], ["c", "d"], ["INTEGER", "INTEGER"], ["a", "A"], ["A", "e"]>>)
numerical_negation
add_query("d", "a", <<["D", "BOOLEAN"], ["c", "INTEGER"], ["c", "BOOLEAN"], ["d", "b"], ["b", "BOOLEAN"], ["c", "C"], ["A", "D"], ["D", "D"], ["A", "BOOLEAN"]>>, "c")
int_value (33)
type_check
add_class(BOOLEAN)
add_call_chain(<<BOOLEAN>>)
add_command("d", "C", <<["D", "a"], ["b", "BOOLEAN"], ["D", "BOOLEAN"], ["a", "B"], ["C", "BOOLEAN"]>>)
add_command("c", "d", <<["d", "C"], ["c", "d"], ["B", "C"], ["C", "BOOLEAN"]>>)
add_call_chain(<<C,b,e,b,d,INTEGER,b>>)
add_query("b", "C", <<["e", "INTEGER"], ["e", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "BOOLEAN"]>>, "B")
add_call_chain(<<D>>)
add_class(D)
add_query("a", "C", <<["C", "INTEGER"], ["c", "a"], ["b", "BOOLEAN"], ["c", "INTEGER"], ["b", "INTEGER"], ["A", "INTEGER"], ["BOOLEAN", "B"]>>, "e")
numerical_negation
add_class(D)
add_attribute("C", "B", "INTEGER")
generate_java_code
add_class(A)
greater_than
logical_negation
conjunction
int_value (48)
add_query("b", "B", <<["a", "BOOLEAN"], ["C", "BOOLEAN"], ["c", "C"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["D", "A"], ["C", "INTEGER"]>>, "c")
add_call_chain(<<A,INTEGER,B,C,a,c>>)
quotient
add_command("d", "BOOLEAN", <<["A", "b"], ["c", "INTEGER"], ["c", "e"], ["d", "BOOLEAN"], ["C", "INTEGER"], ["c", "c"], ["BOOLEAN", "BOOLEAN"]>>)
multiplication
add_query("a", "e", <<["C", "INTEGER"], ["C", "BOOLEAN"]>>, "D")
add_call_chain(<<B,e,INTEGER,a,INTEGER,a,B>>)
logical_negation
bool_value (true)
int_value (12)
quotient
logical_negation
add_query("C", "a", <<["b", "d"], ["a", "B"], ["C", "INTEGER"], ["B", "INTEGER"], ["A", "INTEGER"], ["c", "D"], ["A", "BOOLEAN"], ["b", "c"], ["C", "BOOLEAN"]>>, "a")
numerical_negation
type_check
add_command("b", "D", <<["D", "BOOLEAN"], ["a", "INTEGER"], ["INTEGER", "B"], ["c", "INTEGER"], ["A", "BOOLEAN"]>>)
add_command("e", "a", <<["A", "BOOLEAN"], ["A", "BOOLEAN"], ["d", "INTEGER"], ["A", "INTEGER"], ["BOOLEAN", "INTEGER"], ["D", "INTEGER"], ["B", "INTEGER"], ["C", "BOOLEAN"], ["A", "BOOLEAN"]>>)
add_attribute("b", "C", "INTEGER")
add_command("a", "a", <<["INTEGER", "INTEGER"], ["c", "BOOLEAN"]>>)
add_call_chain(<<a,b,D,a>>)
add_call_chain(<<C,D,A,D,c>>)
add_command("d", "D", <<["c", "A"], ["e", "INTEGER"]>>)
int_value (42)
add_attribute("a", "c", "B")
logical_negation
quotient
addition
int_value (35)
add_call_chain(<<e,b,a,b,b>>)
logical_negation
add_attribute("c", "INTEGER", "BOOLEAN")
numerical_negation
numerical_negation
add_attribute("d", "e", "A")
generate_java_code
add_query("A", "B", <<["b", "BOOLEAN"], ["B", "BOOLEAN"], ["d", "e"], ["c", "C"], ["A", "INTEGER"], ["c", "INTEGER"]>>, "d")
greater_than
add_call_chain(<<B>>)
int_value (23)
add_call_chain(<<c>>)
add_call_chain(<<a>>)
numerical_negation
add_attribute("C", "D", "BOOLEAN")
add_call_chain(<<A,c>>)
quotient
add_call_chain(<<C,B,INTEGER,A,C,D>>)
type_check
add_query("a", "d", <<["B", "BOOLEAN"], ["C", "INTEGER"], ["A", "INTEGER"], ["D", "BOOLEAN"], ["BOOLEAN", "e"], ["a", "a"], ["c", "INTEGER"], ["C", "BOOLEAN"]>>, "b")
add_call_chain(<<e,e,d,C,d,d,C,A>>)
add_query("c", "a", <<["d", "BOOLEAN"], ["c", "BOOLEAN"], ["a", "B"], ["INTEGER", "C"], ["A", "INTEGER"], ["D", "INTEGER"], ["a", "INTEGER"]>>, "d")
int_value (8)
add_attribute("c", "D", "d")
add_call_chain(<<b,INTEGER,e,A,D>>)
int_value (10)
type_check
add_call_chain(<<A,INTEGER>>)
add_attribute("B", "A", "INTEGER")
bool_value (false)
logical_negation
conjunction
logical_negation
add_query("B", "BOOLEAN", <<["D", "INTEGER"]>>, "D")
greater_than
add_command("C", "a", <<["C", "INTEGER"], ["BOOLEAN", "INTEGER"]>>)
add_command("c", "C", <<["B", "b"], ["INTEGER", "INTEGER"], ["C", "INTEGER"], ["A", "BOOLEAN"], ["B", "INTEGER"], ["d", "BOOLEAN"]>>)
bool_value (true)
add_call_chain(<<b,e>>)
generate_java_code
int_value (35)
add_attribute("c", "BOOLEAN", "INTEGER")
int_value (13)
add_attribute("e", "C", "BOOLEAN")
bool_value (false)
add_call_chain(<<b,a,B,D,INTEGER,C,A,BOOLEAN>>)
add_command("BOOLEAN", "d", <<["e", "INTEGER"], ["D", "INTEGER"], ["B", "INTEGER"], ["C", "INTEGER"], ["C", "INTEGER"], ["a", "BOOLEAN"]>>)
add_command("D", "c", <<["D", "INTEGER"]>>)
add_query("C", "B", <<["C", "BOOLEAN"]>>, "D")
add_query("b", "d", <<["C", "b"], ["C", "D"], ["A", "INTEGER"]>>, "a")
add_query("e", "A", <<["A", "INTEGER"], ["C", "BOOLEAN"], ["a", "BOOLEAN"], ["INTEGER", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>, "b")
type_check
add_attribute("BOOLEAN", "D", "c")
bool_value (true)
less_than
add_attribute("C", "A", "D")
logical_negation
generate_java_code
type_check
int_value (27)
bool_value (true)
generate_java_code
disjunction
add_call_chain(<<A,B,D,b,D>>)
add_call_chain(<<a,D,BOOLEAN>>)
logical_negation
int_value (5)
add_command("C", "C", <<["a", "BOOLEAN"], ["b", "d"], ["B", "INTEGER"], ["C", "INTEGER"], ["D", "BOOLEAN"]>>)
bool_value (true)
add_command("C", "A", <<["D", "a"], ["C", "a"], ["b", "INTEGER"], ["B", "BOOLEAN"]>>)
add_query("d", "B", <<["a", "INTEGER"], ["a", "c"], ["INTEGER", "d"], ["d", "e"], ["INTEGER", "b"], ["D", "BOOLEAN"], ["B", "BOOLEAN"]>>, "e")
type_check
greater_than
add_attribute("A", "a", "D")
type_check
int_value (41)
add_class(C)
add_attribute("a", "A", "INTEGER")
add_call_chain(<<C,D,b,a,a,D>>)
add_attribute("INTEGER", "D", "BOOLEAN")
numerical_negation
add_query("INTEGER", "C", <<["b", "INTEGER"], ["A", "INTEGER"], ["d", "a"], ["A", "C"], ["A", "INTEGER"]>>, "B")
add_call_chain(<<e,d,INTEGER,A,D>>)
add_call_chain(<<C,D,c,e,a,e,C,b,a>>)
quotient
add_attribute("b", "a", "INTEGER")
add_attribute("INTEGER", "B", "C")
multiplication
bool_value (false)
add_query("BOOLEAN", "A", <<["c", "b"]>>, "B")
add_command("c", "C", <<["D", "INTEGER"], ["A", "a"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["b", "INTEGER"], ["D", "BOOLEAN"], ["d", "BOOLEAN"]>>)
add_attribute("B", "d", "BOOLEAN")
add_command("d", "D", <<["a", "BOOLEAN"], ["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["c", "INTEGER"], ["A", "C"]>>)
disjunction
int_value (17)
disjunction
add_attribute("C", "A", "A")
add_call_chain(<<BOOLEAN,c,e,c,e,c,D,C,c>>)
add_query("b", "d", <<["b", "INTEGER"], ["e", "INTEGER"], ["d", "INTEGER"], ["a", "BOOLEAN"], ["C", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["INTEGER", "BOOLEAN"]>>, "c")
int_value (33)
add_command("C", "C", <<["c", "b"], ["e", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "a"], ["e", "BOOLEAN"]>>)
quotient
int_value (42)
add_attribute("C", "B", "D")
numerical_negation
equals
add_call_chain(<<b,d,e,e,BOOLEAN,b,A,B>>)
add_attribute("B", "d", "BOOLEAN")
add_call_chain(<<c,c,d,a,B,d,d,e>>)
add_call_chain(<<INTEGER,A,D,b>>)
numerical_negation
generate_java_code
greater_than
add_call_chain(<<c,BOOLEAN,INTEGER,c,c>>)
bool_value (true)
logical_negation
add_command("B", "BOOLEAN", <<["BOOLEAN", "B"]>>)
add_query("e", "D", <<["C", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "BOOLEAN"], ["e", "d"], ["C", "BOOLEAN"], ["C", "BOOLEAN"]>>, "e")
add_command("C", "A", <<["d", "A"], ["A", "c"], ["C", "C"], ["C", "e"], ["B", "C"], ["D", "A"], ["C", "a"]>>)
modulo
logical_negation
type_check
int_value (20)
type_check
logical_negation
bool_value (false)
add_command("e", "A", <<["D", "C"], ["B", "INTEGER"], ["C", "B"], ["b", "A"], ["B", "BOOLEAN"], ["A", "BOOLEAN"]>>)
bool_value (true)
add_call_chain(<<d,D,a,c,e>>)
add_attribute("B", "a", "INTEGER")
logical_negation
add_call_chain(<<b,c,A,a,b,D,d>>)
add_class(d)
type_check
logical_negation
numerical_negation
add_command("c", "d", <<["INTEGER", "e"], ["d", "A"], ["D", "INTEGER"], ["A", "BOOLEAN"], ["B", "INTEGER"], ["a", "BOOLEAN"]>>)
add_command("c", "C", <<["C", "BOOLEAN"], ["e", "c"], ["c", "BOOLEAN"], ["D", "INTEGER"], ["C", "INTEGER"], ["C", "INTEGER"], ["b", "INTEGER"]>>)
add_call_chain(<<B,c,C>>)
add_command("d", "B", <<["e", "BOOLEAN"], ["b", "INTEGER"]>>)
add_call_chain(<<d,A,INTEGER,c,B,c,B,e,A>>)
add_command("e", "C", <<["b", "BOOLEAN"], ["e", "c"], ["D", "e"], ["C", "BOOLEAN"], ["c", "BOOLEAN"], ["a", "INTEGER"], ["C", "INTEGER"], ["D", "INTEGER"]>>)
multiplication
add_attribute("B", "BOOLEAN", "INTEGER")
add_query("e", "b", <<["d", "b"], ["c", "INTEGER"], ["c", "BOOLEAN"], ["D", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["A", "BOOLEAN"]>>, "c")
int_value (29)
add_command("D", "B", <<["e", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["d", "BOOLEAN"], ["c", "INTEGER"], ["a", "BOOLEAN"], ["d", "b"], ["A", "BOOLEAN"], ["d", "A"], ["C", "C"]>>)
add_call_chain(<<D,INTEGER>>)
add_query("A", "B", <<["a", "BOOLEAN"], ["INTEGER", "a"], ["c", "BOOLEAN"], ["A", "INTEGER"]>>, "e")
numerical_negation
add_call_chain(<<B,C,INTEGER,d,D,BOOLEAN>>)
bool_value (true)
numerical_negation
add_command("d", "d", <<["c", "B"], ["d", "BOOLEAN"], ["e", "BOOLEAN"], ["B", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["e", "b"]>>)
int_value (12)
bool_value (false)
numerical_negation
bool_value (true)
add_class(BOOLEAN)
numerical_negation
less_than
equals
multiplication
add_query("B", "d", <<["BOOLEAN", "INTEGER"], ["B", "a"]>>, "BOOLEAN")
add_attribute("e", "BOOLEAN", "INTEGER")
add_class(D)
bool_value (true)
int_value (22)
bool_value (true)
add_class(d)
add_call_chain(<<D,c,A>>)
add_command("A", "a", <<["D", "BOOLEAN"], ["D", "BOOLEAN"], ["b", "BOOLEAN"]>>)
logical_negation
add_call_chain(<<C,c,a,C,C,a,b,e>>)
add_attribute("BOOLEAN", "A", "INTEGER")
add_query("B", "c", <<["C", "BOOLEAN"], ["c", "A"], ["D", "BOOLEAN"], ["C", "BOOLEAN"]>>, "D")
add_query("e", "B", <<["a", "BOOLEAN"]>>, "d")
add_query("b", "e", <<["b", "C"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["A", "B"], ["e", "BOOLEAN"], ["a", "INTEGER"]>>, "D")
disjunction
add_command("b", "e", <<["e", "INTEGER"], ["C", "C"], ["b", "C"]>>)
add_query("C", "C", <<["A", "INTEGER"], ["D", "INTEGER"], ["A", "e"]>>, "A")
type_check
equals
modulo
int_value (45)
add_command("d", "b", <<["BOOLEAN", "INTEGER"], ["a", "BOOLEAN"], ["INTEGER", "c"], ["d", "d"]>>)
bool_value (true)
add_call_chain(<<D>>)
numerical_negation
numerical_negation
add_command("D", "D", <<["D", "BOOLEAN"]>>)
add_attribute("b", "D", "b")
add_attribute("B", "INTEGER", "c")
logical_negation
add_class(d)
generate_java_code
disjunction
add_call_chain(<<C,C,b,d,c,C,BOOLEAN,a,c>>)
numerical_negation
add_query("b", "e", <<["INTEGER", "BOOLEAN"], ["c", "BOOLEAN"]>>, "e")
int_value (22)
add_call_chain(<<d>>)
add_call_chain(<<D>>)
add_call_chain(<<B,b,D,C,a,c>>)
add_attribute("e", "C", "INTEGER")
greater_than
equals
numerical_negation
logical_negation
multiplication
generate_java_code
int_value (44)
add_command("d", "C", <<["d", "BOOLEAN"], ["e", "C"], ["INTEGER", "C"], ["b", "BOOLEAN"], ["A", "INTEGER"], ["c", "INTEGER"]>>)
add_command("D", "c", <<["a", "INTEGER"], ["A", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "BOOLEAN"]>>)
type_check
type_check
add_call_chain(<<B,a>>)
add_query("c", "e", <<["b", "BOOLEAN"], ["d", "BOOLEAN"], ["c", "INTEGER"], ["c", "INTEGER"], ["D", "INTEGER"], ["A", "C"]>>, "a")
generate_java_code
bool_value (false)
int_value (9)
add_call_chain(<<INTEGER,A>>)
generate_java_code
add_attribute("a", "e", "BOOLEAN")
bool_value (false)
add_class(a)
add_attribute("D", "D", "BOOLEAN")
logical_negation
logical_negation
add_call_chain(<<B,d,e,A,c>>)
add_call_chain(<<B,D,A,a,A,e,C,D,A>>)
add_command("B", "BOOLEAN", <<["c", "BOOLEAN"], ["b", "INTEGER"], ["B", "BOOLEAN"], ["D", "BOOLEAN"], ["e", "D"], ["C", "BOOLEAN"], ["A", "a"], ["c", "BOOLEAN"]>>)
multiplication
generate_java_code
equals
add_attribute("BOOLEAN", "A", "b")
add_query("BOOLEAN", "B", <<["D", "INTEGER"]>>, "A")
add_call_chain(<<B,a,d,C,C,d,e>>)
add_call_chain(<<D>>)
add_command("D", "A", <<["c", "INTEGER"], ["b", "INTEGER"], ["D", "a"], ["b", "INTEGER"], ["C", "BOOLEAN"], ["D", "C"], ["D", "BOOLEAN"]>>)
add_call_chain(<<a,B>>)
modulo
add_command("b", "A", <<["a", "INTEGER"]>>)
add_call_chain(<<d,c>>)
add_attribute("BOOLEAN", "c", "INTEGER")
numerical_negation
numerical_negation
subtraction
add_command("c", "B", <<["b", "e"], ["A", "BOOLEAN"], ["e", "INTEGER"], ["C", "BOOLEAN"], ["e", "B"], ["D", "INTEGER"], ["C", "INTEGER"], ["c", "a"], ["d", "c"]>>)
add_query("D", "A", <<["c", "INTEGER"], ["e", "INTEGER"], ["d", "INTEGER"]>>, "b")
add_query("A", "C", <<["d", "BOOLEAN"], ["e", "BOOLEAN"], ["d", "BOOLEAN"], ["C", "INTEGER"], ["b", "BOOLEAN"]>>, "d")
generate_java_code
bool_value (true)
