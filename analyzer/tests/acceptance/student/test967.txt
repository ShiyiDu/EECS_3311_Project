logical_negation
logical_negation
add_call_chain(<<A,C>>)
add_attribute("a", "b", "BOOLEAN")
int_value (27)
add_query("c", "C", <<["C", "C"], ["d", "INTEGER"], ["e", "BOOLEAN"], ["c", "BOOLEAN"], ["c", "BOOLEAN"], ["B", "a"], ["c", "D"]>>, "D")
greater_than
less_than
bool_value (true)
add_call_chain(<<B,b,a>>)
add_attribute("B", "d", "b")
bool_value (true)
add_call_chain(<<A,c,e,A,C>>)
add_command("A", "INTEGER", <<["e", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "BOOLEAN"], ["b", "d"]>>)
add_query("b", "C", <<["b", "e"], ["c", "INTEGER"], ["b", "INTEGER"], ["b", "BOOLEAN"], ["e", "A"], ["c", "BOOLEAN"], ["b", "B"], ["d", "INTEGER"]>>, "B")
disjunction
less_than
add_attribute("D", "D", "BOOLEAN")
add_attribute("INTEGER", "d", "D")
add_query("b", "D", <<["a", "BOOLEAN"], ["b", "a"], ["b", "BOOLEAN"], ["e", "INTEGER"], ["d", "A"], ["D", "e"], ["C", "a"]>>, "e")
type_check
add_command("b", "a", <<["d", "BOOLEAN"], ["BOOLEAN", "b"], ["c", "B"], ["b", "BOOLEAN"]>>)
add_class(D)
add_command("A", "b", <<["C", "C"], ["e", "BOOLEAN"], ["e", "INTEGER"], ["A", "BOOLEAN"], ["A", "INTEGER"]>>)
add_call_chain(<<INTEGER,a,c,d,INTEGER,C,b>>)
add_call_chain(<<A,A,b,d,D,b,a>>)
add_call_chain(<<a,D,INTEGER,d,b,B>>)
add_command("C", "A", <<["a", "a"], ["b", "INTEGER"]>>)
numerical_negation
add_class(a)
add_query("D", "A", <<["A", "BOOLEAN"], ["d", "c"], ["a", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["A", "A"], ["d", "INTEGER"]>>, "B")
generate_java_code
logical_negation
add_command("a", "BOOLEAN", <<["a", "INTEGER"], ["A", "INTEGER"], ["b", "INTEGER"]>>)
type_check
add_attribute("a", "B", "C")
type_check
add_attribute("c", "a", "BOOLEAN")
add_query("e", "e", <<["a", "INTEGER"], ["D", "INTEGER"]>>, "e")
generate_java_code
add_query("A", "e", <<["B", "c"], ["c", "INTEGER"], ["A", "BOOLEAN"], ["A", "INTEGER"], ["A", "BOOLEAN"], ["A", "INTEGER"], ["B", "BOOLEAN"], ["e", "INTEGER"]>>, "D")
add_call_chain(<<B,D,c,INTEGER,D,A,A,d,d>>)
add_call_chain(<<A>>)
add_call_chain(<<b,e,d,a,A,e,D,c>>)
add_call_chain(<<d>>)
modulo
add_attribute("BOOLEAN", "c", "C")
add_query("A", "C", <<["A", "B"], ["BOOLEAN", "BOOLEAN"], ["c", "BOOLEAN"], ["B", "BOOLEAN"], ["INTEGER", "d"], ["C", "BOOLEAN"], ["d", "INTEGER"], ["e", "b"]>>, "c")
less_than
int_value (43)
add_call_chain(<<a,BOOLEAN,a,C>>)
int_value (42)
addition
add_attribute("c", "BOOLEAN", "e")
logical_negation
add_call_chain(<<INTEGER,D,A,e,B,D,e,A>>)
add_call_chain(<<d,B,d,d,A>>)
multiplication
add_query("d", "C", <<["D", "BOOLEAN"]>>, "b")
add_call_chain(<<C,A,A,B,B,b,C,A,BOOLEAN>>)
add_attribute("a", "a", "INTEGER")
add_call_chain(<<B,b,A,A,b,A>>)
greater_than
add_class(B)
add_call_chain(<<C>>)
add_call_chain(<<e,C,e>>)
add_call_chain(<<e>>)
add_call_chain(<<A,b,e,e>>)
logical_negation
add_call_chain(<<A,a,INTEGER,C,e>>)
add_query("C", "b", <<["b", "INTEGER"], ["INTEGER", "A"]>>, "B")
generate_java_code
add_attribute("a", "a", "INTEGER")
type_check
multiplication
add_query("a", "D", <<["C", "A"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["C", "A"], ["INTEGER", "INTEGER"], ["B", "BOOLEAN"], ["d", "A"], ["c", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>, "a")
add_attribute("A", "D", "BOOLEAN")
add_class(C)
numerical_negation
add_query("C", "b", <<["B", "D"]>>, "INTEGER")
type_check
numerical_negation
add_class(a)
type_check
logical_negation
type_check
add_attribute("c", "D", "INTEGER")
add_class(A)
add_class(c)
add_call_chain(<<BOOLEAN,D,e,C,A>>)
greater_than
add_class(C)
numerical_negation
add_command("A", "c", <<["C", "INTEGER"], ["b", "A"], ["b", "BOOLEAN"], ["e", "e"], ["D", "c"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["d", "BOOLEAN"]>>)
add_attribute("b", "C", "C")
int_value (49)
bool_value (false)
add_class(D)
add_call_chain(<<d>>)
numerical_negation
add_call_chain(<<INTEGER,B,A,A>>)
add_query("D", "A", <<["B", "BOOLEAN"]>>, "A")
add_query("C", "c", <<["C", "D"], ["a", "a"], ["a", "BOOLEAN"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["C", "D"]>>, "A")
int_value (44)
add_query("C", "b", <<["B", "INTEGER"], ["d", "INTEGER"], ["c", "B"], ["b", "b"], ["a", "BOOLEAN"]>>, "c")
addition
int_value (40)
add_command("e", "C", <<["D", "BOOLEAN"], ["e", "e"], ["c", "INTEGER"]>>)
int_value (23)
greater_than
add_query("a", "b", <<["d", "INTEGER"]>>, "INTEGER")
numerical_negation
add_attribute("A", "D", "b")
add_call_chain(<<e,C,B>>)
conjunction
type_check
logical_negation
numerical_negation
add_call_chain(<<a,B,C,D,d>>)
logical_negation
add_call_chain(<<D,A,A,c>>)
add_command("a", "A", <<["INTEGER", "INTEGER"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["A", "B"], ["C", "D"], ["INTEGER", "BOOLEAN"]>>)
numerical_negation
bool_value (false)
add_command("d", "a", <<["b", "BOOLEAN"], ["c", "INTEGER"], ["C", "INTEGER"], ["C", "BOOLEAN"], ["B", "A"], ["A", "C"], ["C", "BOOLEAN"]>>)
int_value (31)
add_call_chain(<<B,BOOLEAN,B,d,e,D,a,c,C>>)
add_attribute("c", "d", "d")
add_call_chain(<<D,B,c,B,D>>)
logical_negation
add_query("d", "D", <<["e", "INTEGER"], ["C", "B"], ["D", "BOOLEAN"], ["e", "INTEGER"]>>, "b")
add_class(INTEGER)
disjunction
int_value (39)
logical_negation
add_attribute("B", "A", "INTEGER")
int_value (42)
add_call_chain(<<B,B,e,A>>)
subtraction
add_attribute("D", "d", "BOOLEAN")
add_command("a", "B", <<["e", "INTEGER"], ["c", "D"]>>)
add_attribute("b", "C", "A")
add_call_chain(<<e,B,D,d,b,D,e>>)
conjunction
int_value (48)
conjunction
generate_java_code
bool_value (true)
add_attribute("e", "B", "C")
int_value (3)
logical_negation
disjunction
add_query("A", "INTEGER", <<["C", "BOOLEAN"]>>, "D")
bool_value (true)
disjunction
generate_java_code
generate_java_code
int_value (13)
add_call_chain(<<e,BOOLEAN,A,D,c,a,c,e,D>>)
add_call_chain(<<D,A,B,e,A,B,A,INTEGER>>)
logical_negation
add_attribute("A", "c", "INTEGER")
type_check
numerical_negation
add_call_chain(<<INTEGER,B>>)
int_value (17)
add_call_chain(<<A,A,B,e,A,a,c,C,B>>)
add_command("C", "B", <<["C", "a"], ["a", "INTEGER"], ["A", "BOOLEAN"], ["a", "BOOLEAN"], ["C", "BOOLEAN"], ["D", "INTEGER"], ["d", "INTEGER"], ["C", "BOOLEAN"]>>)
generate_java_code
add_query("b", "D", <<["C", "INTEGER"], ["a", "INTEGER"]>>, "B")
logical_negation
add_query("e", "B", <<["BOOLEAN", "BOOLEAN"], ["C", "INTEGER"], ["a", "INTEGER"], ["B", "BOOLEAN"], ["d", "BOOLEAN"]>>, "A")
numerical_negation
logical_negation
numerical_negation
add_command("e", "B", <<["c", "INTEGER"], ["c", "INTEGER"], ["BOOLEAN", "INTEGER"], ["e", "BOOLEAN"], ["a", "INTEGER"], ["a", "BOOLEAN"], ["A", "D"], ["BOOLEAN", "D"]>>)
int_value (9)
int_value (26)
bool_value (false)
quotient
conjunction
add_call_chain(<<d,A,INTEGER,d,c,c,b,A,e>>)
logical_negation
add_command("A", "D", <<["b", "BOOLEAN"], ["a", "BOOLEAN"], ["D", "C"], ["e", "C"]>>)
quotient
add_command("a", "c", <<["c", "INTEGER"]>>)
add_class(b)
int_value (2)
modulo
bool_value (false)
add_query("d", "e", <<["B", "e"], ["A", "c"], ["e", "BOOLEAN"], ["d", "c"], ["d", "BOOLEAN"]>>, "B")
logical_negation
generate_java_code
add_command("b", "e", <<["a", "INTEGER"], ["b", "BOOLEAN"], ["a", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["b", "INTEGER"], ["C", "c"], ["c", "B"]>>)
int_value (14)
add_query("A", "b", <<["a", "C"], ["a", "INTEGER"], ["a", "INTEGER"], ["b", "a"], ["A", "INTEGER"], ["C", "D"]>>, "e")
conjunction
add_class(B)
generate_java_code
disjunction
add_query("D", "C", <<["C", "INTEGER"]>>, "b")
logical_negation
add_command("a", "c", <<["A", "BOOLEAN"]>>)
add_command("b", "e", <<["C", "BOOLEAN"], ["b", "INTEGER"], ["D", "BOOLEAN"]>>)
add_attribute("B", "b", "INTEGER")
type_check
add_query("d", "C", <<["c", "BOOLEAN"], ["b", "INTEGER"]>>, "d")
int_value (27)
add_call_chain(<<a,D,c,C,C>>)
add_call_chain(<<e,D,e,b,A,A>>)
add_command("B", "d", <<["D", "INTEGER"], ["A", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "C"], ["b", "INTEGER"], ["d", "BOOLEAN"], ["b", "BOOLEAN"]>>)
bool_value (true)
int_value (5)
bool_value (false)
bool_value (true)
generate_java_code
add_class(B)
add_command("A", "a", <<["A", "a"], ["d", "d"]>>)
modulo
numerical_negation
bool_value (true)
int_value (16)
add_query("C", "B", <<["a", "b"], ["a", "INTEGER"]>>, "INTEGER")
add_query("INTEGER", "BOOLEAN", <<["D", "BOOLEAN"], ["D", "INTEGER"], ["A", "INTEGER"], ["B", "INTEGER"], ["d", "INTEGER"], ["B", "INTEGER"], ["A", "BOOLEAN"], ["c", "INTEGER"]>>, "B")
conjunction
generate_java_code
add_command("b", "BOOLEAN", <<["b", "c"]>>)
add_call_chain(<<c,d,d,b,e,e,B,e,B>>)
add_query("B", "D", <<["e", "INTEGER"], ["B", "e"], ["e", "INTEGER"], ["D", "c"], ["A", "B"], ["e", "D"]>>, "c")
int_value (14)
add_command("e", "D", <<["d", "INTEGER"], ["d", "INTEGER"], ["b", "b"], ["c", "INTEGER"]>>)
modulo
bool_value (false)
conjunction
add_call_chain(<<B,BOOLEAN,d,A,a>>)
add_call_chain(<<D>>)
logical_negation
generate_java_code
add_attribute("b", "B", "BOOLEAN")
disjunction
add_call_chain(<<A,d,c,C,b,C>>)
add_call_chain(<<c,c,c,c,C,B,INTEGER>>)
numerical_negation
type_check
bool_value (false)
add_call_chain(<<A,a,D,a,D,e,INTEGER>>)
numerical_negation
add_call_chain(<<B>>)
logical_negation
type_check
equals
int_value (7)
add_command("e", "a", <<["B", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "BOOLEAN"], ["b", "a"], ["e", "INTEGER"], ["d", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["e", "BOOLEAN"]>>)
add_call_chain(<<C,b,b,e,B,d,C>>)
add_call_chain(<<e>>)
add_command("e", "e", <<["b", "INTEGER"], ["e", "BOOLEAN"], ["BOOLEAN", "a"], ["d", "INTEGER"], ["c", "BOOLEAN"], ["D", "INTEGER"], ["D", "INTEGER"]>>)
add_call_chain(<<B>>)
