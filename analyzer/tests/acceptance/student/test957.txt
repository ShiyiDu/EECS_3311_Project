add_command("C", "D", <<["D", "e"], ["e", "INTEGER"], ["C", "D"], ["c", "a"], ["D", "BOOLEAN"], ["a", "e"], ["D", "D"], ["BOOLEAN", "INTEGER"]>>)
add_query("e", "e", <<["B", "BOOLEAN"]>>, "c")
add_query("A", "d", <<["B", "INTEGER"], ["d", "B"], ["BOOLEAN", "a"], ["a", "BOOLEAN"], ["b", "e"], ["a", "D"], ["a", "INTEGER"]>>, "C")
add_call_chain(<<BOOLEAN,e,B>>)
equals
add_call_chain(<<INTEGER>>)
add_query("C", "A", <<["e", "INTEGER"], ["c", "c"], ["A", "INTEGER"], ["c", "BOOLEAN"], ["d", "B"], ["d", "BOOLEAN"], ["B", "D"]>>, "d")
conjunction
add_call_chain(<<a,B,D,c,B>>)
numerical_negation
logical_negation
add_call_chain(<<c,e>>)
add_call_chain(<<b>>)
bool_value (false)
add_call_chain(<<A,c,D,BOOLEAN,c,d>>)
logical_negation
greater_than
add_class(B)
logical_negation
logical_negation
add_class(C)
int_value (46)
add_query("INTEGER", "INTEGER", <<["C", "b"], ["B", "D"], ["BOOLEAN", "c"], ["C", "INTEGER"], ["INTEGER", "c"]>>, "a")
add_command("D", "A", <<["C", "B"], ["C", "INTEGER"], ["C", "B"], ["B", "BOOLEAN"], ["B", "INTEGER"], ["a", "D"]>>)
logical_negation
add_call_chain(<<e,D,b,D,B,e>>)
add_query("D", "B", <<["c", "INTEGER"], ["b", "c"], ["BOOLEAN", "INTEGER"], ["D", "D"]>>, "BOOLEAN")
modulo
bool_value (true)
add_class(c)
bool_value (false)
logical_negation
add_command("BOOLEAN", "e", <<["C", "INTEGER"], ["c", "INTEGER"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["D", "BOOLEAN"], ["INTEGER", "B"], ["d", "d"], ["d", "BOOLEAN"]>>)
numerical_negation
disjunction
add_call_chain(<<a,a,e,INTEGER,c>>)
bool_value (false)
add_call_chain(<<b,a>>)
add_attribute("A", "C", "BOOLEAN")
int_value (25)
add_command("D", "b", <<["e", "INTEGER"], ["A", "BOOLEAN"], ["C", "INTEGER"], ["b", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "d"]>>)
conjunction
int_value (31)
less_than
add_call_chain(<<a,d>>)
numerical_negation
add_query("B", "c", <<["e", "INTEGER"], ["C", "BOOLEAN"], ["A", "e"], ["d", "INTEGER"]>>, "D")
add_call_chain(<<BOOLEAN,C,A,c,b,c,INTEGER>>)
numerical_negation
add_call_chain(<<A,c,d,A,A>>)
int_value (49)
generate_java_code
int_value (7)
add_class(BOOLEAN)
add_command("B", "INTEGER", <<["e", "BOOLEAN"]>>)
multiplication
less_than
int_value (39)
disjunction
add_query("B", "A", <<["D", "INTEGER"], ["b", "INTEGER"], ["D", "BOOLEAN"], ["C", "INTEGER"], ["a", "A"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["D", "c"]>>, "B")
add_call_chain(<<c>>)
add_call_chain(<<a>>)
quotient
logical_negation
bool_value (false)
int_value (27)
int_value (38)
add_query("D", "C", <<["a", "INTEGER"], ["B", "INTEGER"], ["B", "D"], ["e", "e"], ["C", "BOOLEAN"], ["D", "d"]>>, "D")
disjunction
add_command("BOOLEAN", "B", <<["e", "BOOLEAN"], ["a", "BOOLEAN"]>>)
add_command("d", "a", <<["c", "INTEGER"], ["B", "BOOLEAN"]>>)
add_attribute("B", "b", "BOOLEAN")
add_attribute("B", "A", "D")
add_attribute("A", "a", "INTEGER")
numerical_negation
add_call_chain(<<C>>)
add_call_chain(<<c,D,A,b,b>>)
add_command("d", "e", <<["INTEGER", "INTEGER"], ["C", "c"], ["A", "d"], ["C", "BOOLEAN"]>>)
add_query("b", "d", <<["A", "INTEGER"], ["A", "C"], ["B", "BOOLEAN"]>>, "d")
disjunction
logical_negation
add_call_chain(<<A,B,b>>)
add_call_chain(<<B,c>>)
multiplication
equals
bool_value (true)
add_call_chain(<<D,b,e,a,D,INTEGER,e,D>>)
add_call_chain(<<b,B,A,B,d,C,B,a>>)
bool_value (true)
logical_negation
greater_than
generate_java_code
add_query("d", "C", <<["b", "BOOLEAN"], ["C", "B"], ["BOOLEAN", "BOOLEAN"]>>, "A")
logical_negation
type_check
disjunction
add_query("D", "b", <<["b", "BOOLEAN"], ["D", "BOOLEAN"], ["C", "INTEGER"], ["a", "BOOLEAN"], ["C", "INTEGER"]>>, "C")
add_call_chain(<<a,B>>)
add_command("A", "C", <<["C", "c"]>>)
bool_value (true)
add_call_chain(<<A,B,d,A,b,C,e>>)
add_query("C", "C", <<["D", "C"], ["C", "INTEGER"], ["D", "INTEGER"], ["BOOLEAN", "INTEGER"], ["BOOLEAN", "INTEGER"], ["B", "d"], ["B", "a"]>>, "C")
add_command("c", "c", <<["A", "BOOLEAN"], ["A", "b"], ["B", "C"], ["c", "INTEGER"], ["e", "BOOLEAN"], ["A", "INTEGER"], ["C", "INTEGER"], ["C", "D"], ["d", "A"]>>)
subtraction
int_value (17)
add_query("e", "BOOLEAN", <<["a", "BOOLEAN"], ["a", "C"], ["C", "BOOLEAN"], ["c", "e"]>>, "a")
greater_than
generate_java_code
numerical_negation
add_call_chain(<<C,C>>)
int_value (5)
int_value (2)
generate_java_code
bool_value (true)
add_call_chain(<<D,A,B,b,A,c,C,D,b>>)
generate_java_code
quotient
add_call_chain(<<d,a,c>>)
numerical_negation
int_value (32)
add_call_chain(<<b,B,d,a,C>>)
bool_value (true)
bool_value (false)
add_call_chain(<<D,A,d,B,BOOLEAN,e,BOOLEAN>>)
add_query("d", "C", <<["C", "A"]>>, "a")
logical_negation
add_query("d", "a", <<["e", "INTEGER"], ["a", "BOOLEAN"], ["d", "INTEGER"], ["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "D"], ["e", "INTEGER"]>>, "c")
int_value (10)
add_command("a", "A", <<["a", "b"], ["e", "INTEGER"], ["BOOLEAN", "INTEGER"], ["d", "BOOLEAN"], ["e", "INTEGER"], ["C", "BOOLEAN"], ["e", "BOOLEAN"]>>)
conjunction
equals
add_call_chain(<<D,d,a>>)
add_class(A)
add_attribute("B", "e", "INTEGER")
generate_java_code
add_call_chain(<<A,a,b,e,d,B>>)
logical_negation
add_query("D", "C", <<["C", "INTEGER"], ["a", "INTEGER"], ["D", "INTEGER"], ["D", "BOOLEAN"], ["D", "INTEGER"], ["A", "BOOLEAN"], ["c", "BOOLEAN"]>>, "C")
disjunction
add_query("INTEGER", "INTEGER", <<["B", "INTEGER"], ["B", "BOOLEAN"], ["D", "INTEGER"], ["D", "INTEGER"], ["B", "a"], ["D", "BOOLEAN"]>>, "C")
add_class(INTEGER)
add_call_chain(<<a,B,a,a,A>>)
int_value (33)
add_class(A)
add_command("BOOLEAN", "e", <<["e", "BOOLEAN"], ["A", "INTEGER"], ["INTEGER", "e"], ["B", "INTEGER"], ["C", "BOOLEAN"]>>)
bool_value (true)
int_value (38)
add_command("e", "c", <<["a", "e"], ["a", "C"], ["e", "C"], ["INTEGER", "C"], ["e", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "A"], ["c", "BOOLEAN"], ["c", "INTEGER"]>>)
add_attribute("c", "A", "BOOLEAN")
add_attribute("a", "d", "B")
add_attribute("a", "A", "INTEGER")
numerical_negation
logical_negation
modulo
type_check
generate_java_code
int_value (49)
add_call_chain(<<b,b,INTEGER,d,d>>)
add_command("A", "c", <<["A", "B"], ["b", "C"], ["c", "C"], ["C", "D"]>>)
add_call_chain(<<C,C,D,c,d,c,A,C>>)
add_class(A)
logical_negation
add_call_chain(<<D,d,A,c,A,C,c>>)
equals
add_call_chain(<<C,c,e,e,INTEGER,a,BOOLEAN>>)
int_value (32)
disjunction
generate_java_code
add_class(INTEGER)
add_attribute("c", "b", "BOOLEAN")
int_value (18)
quotient
logical_negation
add_call_chain(<<a,a,B,D,INTEGER,C,C,C>>)
add_call_chain(<<d,C>>)
add_attribute("INTEGER", "D", "B")
add_attribute("c", "e", "BOOLEAN")
add_command("D", "b", <<["BOOLEAN", "BOOLEAN"], ["BOOLEAN", "e"], ["INTEGER", "e"], ["a", "INTEGER"], ["A", "D"], ["c", "INTEGER"], ["INTEGER", "BOOLEAN"], ["D", "e"]>>)
add_call_chain(<<B,c,e,a,c,D,INTEGER>>)
add_call_chain(<<C,D,A,c,a,B,b,e,a>>)
add_command("c", "b", <<["A", "C"]>>)
add_attribute("b", "D", "BOOLEAN")
numerical_negation
add_command("b", "B", <<["INTEGER", "INTEGER"], ["a", "c"], ["e", "BOOLEAN"], ["a", "BOOLEAN"], ["D", "b"], ["b", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["a", "A"]>>)
add_query("INTEGER", "C", <<["a", "BOOLEAN"], ["e", "INTEGER"], ["D", "BOOLEAN"], ["a", "d"]>>, "e")
add_attribute("c", "b", "INTEGER")
add_class(INTEGER)
add_attribute("c", "d", "b")
add_query("INTEGER", "BOOLEAN", <<["e", "a"], ["D", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>, "C")
add_command("A", "c", <<["INTEGER", "INTEGER"], ["C", "INTEGER"], ["C", "BOOLEAN"], ["d", "BOOLEAN"], ["B", "A"], ["a", "INTEGER"], ["b", "INTEGER"], ["c", "BOOLEAN"], ["B", "BOOLEAN"]>>)
add_call_chain(<<a,d,A,d,C,e,C>>)
bool_value (true)
logical_negation
add_command("d", "b", <<["e", "INTEGER"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["C", "INTEGER"], ["A", "INTEGER"]>>)
conjunction
add_call_chain(<<b,e,INTEGER,BOOLEAN,INTEGER>>)
add_query("C", "a", <<["b", "BOOLEAN"], ["B", "C"], ["B", "d"], ["A", "D"], ["INTEGER", "BOOLEAN"], ["d", "BOOLEAN"], ["d", "INTEGER"]>>, "C")
logical_negation
add_call_chain(<<C,B,A,D,D,e,D>>)
int_value (39)
add_class(C)
add_attribute("B", "C", "INTEGER")
logical_negation
equals
add_attribute("b", "D", "INTEGER")
type_check
add_query("c", "D", <<["a", "INTEGER"], ["C", "BOOLEAN"]>>, "A")
generate_java_code
bool_value (true)
add_class(B)
add_class(b)
add_command("C", "d", <<["e", "BOOLEAN"], ["C", "a"]>>)
add_call_chain(<<C>>)
add_call_chain(<<b,a>>)
