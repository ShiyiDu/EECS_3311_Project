logical_negation
generate_java_code
add_call_chain(<<a,A,b,BOOLEAN,INTEGER>>)
add_call_chain(<<A,c,B,BOOLEAN,D,A>>)
numerical_negation
int_value (29)
add_call_chain(<<b,A,C,d,b,D,B,C>>)
add_call_chain(<<d,C,INTEGER,d,d>>)
greater_than
add_attribute("INTEGER", "A", "BOOLEAN")
add_call_chain(<<B,D,d,C,BOOLEAN,c,a,a>>)
add_call_chain(<<BOOLEAN,B,d,A,BOOLEAN,A,B,A>>)
add_call_chain(<<D,a>>)
add_attribute("a", "D", "INTEGER")
add_attribute("D", "C", "INTEGER")
numerical_negation
add_call_chain(<<A,A,b,A,A>>)
add_call_chain(<<d,B,B,c,A>>)
bool_value (true)
bool_value (true)
add_command("BOOLEAN", "c", <<["D", "a"]>>)
add_attribute("e", "C", "INTEGER")
add_query("a", "B", <<["a", "BOOLEAN"], ["e", "INTEGER"]>>, "C")
add_query("e", "B", <<["BOOLEAN", "INTEGER"], ["a", "INTEGER"], ["a", "D"], ["b", "INTEGER"], ["e", "INTEGER"]>>, "b")
add_attribute("A", "c", "INTEGER")
add_attribute("a", "c", "C")
add_command("d", "a", <<["D", "INTEGER"], ["c", "INTEGER"]>>)
greater_than
conjunction
add_command("C", "A", <<["b", "BOOLEAN"], ["C", "BOOLEAN"], ["D", "INTEGER"], ["A", "A"], ["e", "INTEGER"], ["A", "BOOLEAN"], ["C", "A"]>>)
add_class(e)
add_query("c", "a", <<["e", "BOOLEAN"], ["c", "BOOLEAN"]>>, "BOOLEAN")
add_class(A)
generate_java_code
add_query("d", "d", <<["c", "INTEGER"], ["e", "BOOLEAN"], ["c", "BOOLEAN"], ["b", "BOOLEAN"], ["d", "INTEGER"], ["A", "INTEGER"]>>, "B")
numerical_negation
numerical_negation
logical_negation
add_class(e)
logical_negation
generate_java_code
type_check
int_value (21)
multiplication
add_attribute("C", "e", "BOOLEAN")
add_call_chain(<<c,a,d,C,A,a,C>>)
add_call_chain(<<C,d,c,C,B,A>>)
bool_value (true)
add_command("D", "b", <<["e", "INTEGER"], ["INTEGER", "C"], ["C", "BOOLEAN"], ["D", "C"]>>)
add_command("BOOLEAN", "a", <<["D", "INTEGER"], ["D", "INTEGER"], ["c", "BOOLEAN"], ["c", "D"], ["a", "INTEGER"]>>)
type_check
add_command("e", "b", <<["a", "BOOLEAN"]>>)
add_attribute("D", "D", "d")
add_query("d", "INTEGER", <<["A", "BOOLEAN"], ["b", "INTEGER"], ["a", "BOOLEAN"], ["d", "INTEGER"], ["INTEGER", "INTEGER"], ["a", "INTEGER"], ["A", "BOOLEAN"]>>, "A")
add_class(INTEGER)
add_call_chain(<<C,B,d,e,B,D,B,c,b>>)
generate_java_code
conjunction
add_class(BOOLEAN)
add_class(c)
logical_negation
bool_value (false)
add_attribute("BOOLEAN", "C", "INTEGER")
add_query("BOOLEAN", "d", <<["A", "INTEGER"], ["D", "BOOLEAN"], ["D", "INTEGER"], ["c", "INTEGER"], ["e", "BOOLEAN"], ["B", "BOOLEAN"]>>, "A")
add_call_chain(<<C,c,D,C>>)
int_value (49)
conjunction
int_value (44)
add_class(D)
int_value (46)
numerical_negation
disjunction
add_call_chain(<<c,e,b,C,c,a,b,B,D>>)
add_command("A", "B", <<["d", "BOOLEAN"], ["B", "D"], ["C", "b"], ["A", "BOOLEAN"], ["A", "BOOLEAN"], ["c", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["D", "INTEGER"], ["a", "INTEGER"]>>)
int_value (4)
add_attribute("a", "C", "INTEGER")
bool_value (false)
disjunction
disjunction
add_attribute("INTEGER", "a", "INTEGER")
add_query("c", "a", <<["c", "INTEGER"], ["c", "BOOLEAN"], ["b", "C"], ["d", "BOOLEAN"], ["C", "A"], ["a", "d"]>>, "c")
logical_negation
add_call_chain(<<b,A>>)
disjunction
add_call_chain(<<A,a,d,b,A,D,a,C>>)
type_check
add_attribute("b", "D", "INTEGER")
less_than
bool_value (false)
add_command("A", "D", <<["INTEGER", "INTEGER"], ["INTEGER", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "b"]>>)
bool_value (true)
type_check
add_query("d", "C", <<["e", "INTEGER"], ["b", "INTEGER"], ["c", "INTEGER"], ["A", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>, "a")
add_attribute("e", "INTEGER", "BOOLEAN")
add_call_chain(<<D,B,b,A,D,A,a>>)
add_command("A", "a", <<["d", "C"], ["A", "C"], ["D", "A"], ["D", "INTEGER"], ["BOOLEAN", "INTEGER"], ["INTEGER", "BOOLEAN"]>>)
add_command("c", "e", <<["a", "B"], ["b", "e"], ["a", "BOOLEAN"], ["D", "e"]>>)
add_call_chain(<<BOOLEAN,B>>)
type_check
numerical_negation
numerical_negation
conjunction
add_call_chain(<<D,d,C,e,c>>)
add_attribute("INTEGER", "C", "c")
int_value (34)
add_call_chain(<<D,D,B,B,c>>)
bool_value (false)
disjunction
add_command("INTEGER", "e", <<["d", "BOOLEAN"]>>)
add_command("b", "C", <<["D", "INTEGER"], ["INTEGER", "e"], ["e", "INTEGER"]>>)
add_call_chain(<<C,d,e,c,A,A,c>>)
add_attribute("d", "A", "BOOLEAN")
int_value (31)
conjunction
add_query("D", "INTEGER", <<["A", "INTEGER"], ["d", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["INTEGER", "B"], ["b", "BOOLEAN"], ["C", "A"], ["a", "c"], ["BOOLEAN", "BOOLEAN"]>>, "BOOLEAN")
add_attribute("c", "BOOLEAN", "INTEGER")
add_attribute("a", "D", "BOOLEAN")
add_call_chain(<<A,A,A,d,C>>)
logical_negation
type_check
add_call_chain(<<c,A,C,INTEGER,INTEGER,A>>)
add_query("INTEGER", "D", <<["A", "INTEGER"]>>, "e")
type_check
add_attribute("B", "d", "C")
logical_negation
int_value (13)
modulo
add_query("C", "a", <<["A", "B"], ["e", "INTEGER"], ["e", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["INTEGER", "INTEGER"]>>, "C")
equals
disjunction
numerical_negation
int_value (41)
add_command("a", "A", <<["C", "BOOLEAN"]>>)
add_call_chain(<<D>>)
add_attribute("D", "e", "D")
add_command("e", "INTEGER", <<["A", "BOOLEAN"], ["e", "BOOLEAN"], ["C", "INTEGER"], ["A", "BOOLEAN"], ["c", "INTEGER"], ["C", "d"], ["A", "INTEGER"], ["d", "e"], ["B", "BOOLEAN"]>>)
add_command("e", "A", <<["c", "BOOLEAN"], ["d", "d"], ["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"]>>)
add_attribute("A", "d", "INTEGER")
add_query("D", "INTEGER", <<["A", "c"]>>, "C")
add_query("D", "D", <<["d", "BOOLEAN"], ["c", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "INTEGER"], ["INTEGER", "a"], ["B", "D"], ["b", "INTEGER"], ["B", "c"], ["d", "BOOLEAN"]>>, "BOOLEAN")
bool_value (true)
int_value (24)
add_command("a", "a", <<["e", "BOOLEAN"], ["A", "INTEGER"]>>)
add_attribute("e", "C", "INTEGER")
add_call_chain(<<B,B,a>>)
generate_java_code
add_command("C", "e", <<["D", "d"], ["B", "BOOLEAN"], ["c", "d"], ["A", "INTEGER"]>>)
add_command("B", "A", <<["D", "BOOLEAN"], ["D", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "INTEGER"]>>)
add_attribute("c", "B", "INTEGER")
add_command("A", "BOOLEAN", <<["b", "BOOLEAN"], ["C", "A"]>>)
add_command("b", "d", <<["C", "INTEGER"], ["A", "INTEGER"], ["INTEGER", "BOOLEAN"]>>)
add_attribute("d", "e", "BOOLEAN")
add_call_chain(<<BOOLEAN,D,C,c,A>>)
add_attribute("A", "BOOLEAN", "INTEGER")
add_call_chain(<<b,D,d,e,D,D,b,INTEGER>>)
numerical_negation
add_attribute("e", "d", "INTEGER")
add_class(a)
add_call_chain(<<c,b,D,d,D,A,b,A,e>>)
add_attribute("B", "C", "d")
add_class(c)
generate_java_code
add_query("c", "C", <<["d", "BOOLEAN"], ["D", "D"], ["C", "INTEGER"]>>, "A")
less_than
add_call_chain(<<A>>)
int_value (15)
add_command("e", "B", <<["c", "BOOLEAN"], ["e", "INTEGER"], ["b", "BOOLEAN"], ["C", "INTEGER"], ["c", "INTEGER"], ["B", "BOOLEAN"], ["D", "INTEGER"], ["D", "BOOLEAN"]>>)
greater_than
logical_negation
conjunction
int_value (40)
add_call_chain(<<C,C,c,b,A,C,d,a,INTEGER>>)
int_value (7)
type_check
add_query("C", "BOOLEAN", <<["C", "BOOLEAN"]>>, "a")
add_call_chain(<<d,b,d>>)
add_query("c", "a", <<["C", "BOOLEAN"], ["a", "BOOLEAN"], ["c", "A"], ["c", "BOOLEAN"], ["A", "INTEGER"]>>, "A")
conjunction
type_check
add_command("a", "C", <<["B", "C"], ["e", "C"], ["a", "b"], ["A", "BOOLEAN"], ["C", "INTEGER"]>>)
int_value (49)
add_command("c", "D", <<["c", "BOOLEAN"], ["D", "D"], ["D", "BOOLEAN"], ["B", "BOOLEAN"]>>)
add_command("c", "a", <<["A", "c"], ["c", "BOOLEAN"], ["b", "INTEGER"], ["d", "INTEGER"]>>)
subtraction
add_call_chain(<<a,b,b>>)
logical_negation
bool_value (false)
add_command("e", "C", <<["e", "BOOLEAN"], ["D", "BOOLEAN"], ["d", "INTEGER"]>>)
conjunction
numerical_negation
disjunction
int_value (29)
add_attribute("A", "b", "BOOLEAN")
type_check
less_than
add_query("b", "c", <<["c", "INTEGER"], ["C", "INTEGER"], ["B", "BOOLEAN"], ["INTEGER", "d"], ["a", "BOOLEAN"], ["A", "INTEGER"], ["b", "A"], ["e", "INTEGER"]>>, "d")
numerical_negation
numerical_negation
bool_value (false)
add_call_chain(<<a>>)
add_call_chain(<<e,B,A,D,INTEGER,e,BOOLEAN,C>>)
add_call_chain(<<d>>)
type_check
int_value (32)
add_call_chain(<<B,C,C,C>>)
bool_value (true)
add_call_chain(<<C,D,e,e,c,e,B>>)
subtraction
type_check
conjunction
add_command("d", "A", <<["e", "BOOLEAN"], ["A", "INTEGER"], ["c", "INTEGER"]>>)
add_class(d)
logical_negation
add_command("D", "e", <<["B", "INTEGER"], ["e", "BOOLEAN"], ["C", "a"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["B", "BOOLEAN"], ["BOOLEAN", "C"]>>)
add_query("C", "D", <<["c", "BOOLEAN"], ["c", "INTEGER"], ["b", "BOOLEAN"], ["D", "INTEGER"]>>, "d")
add_command("A", "C", <<["A", "BOOLEAN"], ["a", "INTEGER"], ["d", "INTEGER"], ["a", "INTEGER"], ["e", "BOOLEAN"]>>)
add_call_chain(<<b,A,a,A,d,C,d,INTEGER>>)
add_attribute("c", "b", "B")
add_attribute("D", "b", "BOOLEAN")
modulo
add_attribute("B", "B", "BOOLEAN")
numerical_negation
bool_value (false)
conjunction
add_command("C", "D", <<["D", "BOOLEAN"], ["d", "BOOLEAN"], ["d", "BOOLEAN"], ["A", "c"], ["d", "d"]>>)
add_call_chain(<<B>>)
add_call_chain(<<a,D,C,C,c>>)
greater_than
generate_java_code
add_attribute("D", "d", "INTEGER")
multiplication
conjunction
add_query("A", "B", <<["c", "INTEGER"]>>, "D")
add_command("d", "e", <<["A", "A"]>>)
add_call_chain(<<D,A>>)
bool_value (true)
add_command("INTEGER", "BOOLEAN", <<["C", "INTEGER"], ["B", "A"], ["e", "INTEGER"], ["b", "BOOLEAN"]>>)
add_attribute("b", "d", "INTEGER")
add_command("d", "d", <<["d", "BOOLEAN"], ["c", "BOOLEAN"], ["d", "e"]>>)
add_attribute("B", "INTEGER", "BOOLEAN")
int_value (9)
add_call_chain(<<b,c>>)
int_value (14)
add_call_chain(<<b,D,a,c,A,c,B,C,a>>)
int_value (42)
int_value (48)
int_value (40)
logical_negation
equals
add_attribute("a", "a", "c")
equals
disjunction
