type_check
numerical_negation
add_call_chain(<<D,d,e,D>>)
greater_than
add_attribute("INTEGER", "b", "BOOLEAN")
add_call_chain(<<C,c,A,e,D>>)
int_value (5)
int_value (46)
less_than
numerical_negation
conjunction
add_attribute("D", "C", "BOOLEAN")
generate_java_code
bool_value (false)
add_attribute("A", "a", "BOOLEAN")
addition
subtraction
add_attribute("C", "D", "BOOLEAN")
int_value (35)
bool_value (true)
add_call_chain(<<e>>)
add_call_chain(<<A>>)
add_call_chain(<<b,D,B,A>>)
add_attribute("d", "D", "INTEGER")
type_check
generate_java_code
add_query("a", "e", <<["a", "B"]>>, "A")
add_call_chain(<<C>>)
add_class(C)
generate_java_code
add_query("d", "e", <<["D", "C"], ["C", "INTEGER"], ["D", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "A"], ["BOOLEAN", "A"]>>, "INTEGER")
bool_value (true)
add_call_chain(<<d,B,C,e,B,d,B>>)
equals
type_check
conjunction
less_than
add_class(B)
quotient
subtraction
add_class(B)
add_class(d)
int_value (44)
add_class(c)
add_attribute("d", "D", "b")
bool_value (false)
add_call_chain(<<c,A>>)
add_call_chain(<<B,a,c,D,d,B,b,e>>)
bool_value (false)
add_command("B", "C", <<["INTEGER", "INTEGER"], ["B", "INTEGER"], ["D", "INTEGER"], ["INTEGER", "INTEGER"], ["D", "INTEGER"], ["D", "INTEGER"]>>)
add_query("a", "b", <<["C", "BOOLEAN"]>>, "e")
add_attribute("c", "a", "a")
type_check
add_call_chain(<<c,C,D,e,a,C>>)
bool_value (true)
disjunction
add_class(c)
int_value (35)
numerical_negation
conjunction
add_query("BOOLEAN", "b", <<["C", "INTEGER"]>>, "d")
conjunction
add_query("A", "A", <<["D", "BOOLEAN"], ["d", "c"], ["C", "INTEGER"], ["e", "e"]>>, "d")
numerical_negation
int_value (32)
int_value (33)
int_value (4)
add_attribute("C", "B", "INTEGER")
add_attribute("A", "e", "INTEGER")
add_call_chain(<<BOOLEAN,D,b>>)
add_attribute("d", "D", "d")
add_call_chain(<<b,C,a,c>>)
add_call_chain(<<A,a,C,e,a,a,C,B,C>>)
bool_value (true)
numerical_negation
bool_value (false)
bool_value (true)
disjunction
add_query("A", "e", <<["d", "BOOLEAN"], ["D", "BOOLEAN"], ["D", "B"], ["A", "c"], ["d", "D"], ["D", "A"]>>, "a")
add_query("D", "C", <<["e", "INTEGER"], ["C", "A"]>>, "d")
add_call_chain(<<c,B,A>>)
add_query("b", "c", <<["d", "INTEGER"]>>, "D")
less_than
int_value (43)
bool_value (true)
add_call_chain(<<D,D,b>>)
disjunction
generate_java_code
less_than
add_call_chain(<<C,A,B,A,B>>)
type_check
add_attribute("d", "B", "B")
int_value (48)
multiplication
type_check
generate_java_code
add_attribute("INTEGER", "B", "BOOLEAN")
conjunction
add_call_chain(<<d,A,INTEGER,C,e,C,A,B,C>>)
add_query("C", "C", <<["d", "BOOLEAN"], ["B", "D"], ["A", "BOOLEAN"], ["a", "BOOLEAN"], ["c", "BOOLEAN"]>>, "BOOLEAN")
generate_java_code
less_than
add_attribute("e", "B", "A")
generate_java_code
add_call_chain(<<A,INTEGER,A,A,c,B>>)
addition
bool_value (true)
generate_java_code
add_call_chain(<<D,c,b,a,A>>)
add_query("BOOLEAN", "e", <<["A", "INTEGER"], ["B", "BOOLEAN"]>>, "D")
disjunction
add_call_chain(<<b,C,D,B>>)
type_check
equals
less_than
numerical_negation
generate_java_code
bool_value (false)
numerical_negation
add_query("e", "BOOLEAN", <<["A", "BOOLEAN"], ["a", "BOOLEAN"], ["b", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "b"], ["d", "a"], ["A", "BOOLEAN"], ["B", "INTEGER"]>>, "a")
int_value (46)
add_call_chain(<<d,BOOLEAN,d,c,C,A,e,b,C>>)
add_query("d", "d", <<["a", "b"], ["a", "A"], ["D", "b"], ["C", "BOOLEAN"], ["B", "INTEGER"], ["e", "d"]>>, "A")
generate_java_code
add_attribute("A", "b", "c")
add_call_chain(<<INTEGER,B,B,D,D,A>>)
disjunction
numerical_negation
generate_java_code
add_command("A", "d", <<["a", "BOOLEAN"], ["c", "BOOLEAN"], ["c", "BOOLEAN"]>>)
add_call_chain(<<C>>)
add_class(d)
int_value (40)
add_call_chain(<<b,B,b>>)
numerical_negation
numerical_negation
add_query("A", "C", <<["d", "c"], ["c", "INTEGER"]>>, "A")
add_attribute("D", "c", "INTEGER")
int_value (40)
add_command("b", "INTEGER", <<["A", "INTEGER"], ["d", "BOOLEAN"], ["INTEGER", "A"], ["INTEGER", "BOOLEAN"]>>)
add_call_chain(<<a,B,e,A,a>>)
conjunction
add_command("BOOLEAN", "d", <<["B", "BOOLEAN"], ["e", "INTEGER"]>>)
int_value (43)
bool_value (true)
add_query("C", "B", <<["b", "d"], ["C", "BOOLEAN"], ["d", "BOOLEAN"], ["B", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["INTEGER", "a"], ["B", "INTEGER"]>>, "BOOLEAN")
add_call_chain(<<a,d>>)
add_call_chain(<<a>>)
int_value (19)
disjunction
generate_java_code
logical_negation
generate_java_code
add_query("b", "A", <<["c", "e"], ["D", "INTEGER"]>>, "e")
add_command("e", "b", <<["D", "INTEGER"]>>)
logical_negation
numerical_negation
add_call_chain(<<d>>)
add_command("c", "e", <<["e", "INTEGER"], ["d", "INTEGER"], ["b", "INTEGER"], ["B", "a"]>>)
add_command("C", "a", <<["d", "INTEGER"], ["A", "BOOLEAN"], ["D", "BOOLEAN"], ["d", "e"], ["d", "D"], ["b", "B"]>>)
add_class(D)
add_query("D", "BOOLEAN", <<["a", "e"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["e", "INTEGER"]>>, "e")
generate_java_code
type_check
bool_value (false)
generate_java_code
add_query("B", "e", <<["a", "INTEGER"], ["D", "INTEGER"], ["e", "INTEGER"], ["D", "BOOLEAN"], ["D", "c"], ["d", "A"], ["b", "BOOLEAN"], ["e", "BOOLEAN"], ["C", "INTEGER"]>>, "d")
add_query("B", "A", <<["c", "BOOLEAN"], ["A", "e"], ["C", "INTEGER"], ["B", "B"], ["A", "BOOLEAN"]>>, "a")
add_class(e)
generate_java_code
generate_java_code
add_call_chain(<<c,e,C,a,c,d,D,BOOLEAN>>)
add_call_chain(<<d,C,a,D,INTEGER>>)
add_call_chain(<<B,d,INTEGER>>)
add_query("BOOLEAN", "d", <<["B", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["A", "A"], ["A", "INTEGER"], ["b", "B"], ["a", "D"], ["D", "INTEGER"], ["a", "INTEGER"], ["A", "d"]>>, "a")
multiplication
add_attribute("a", "B", "D")
add_call_chain(<<A,c,INTEGER,e,e,d>>)
add_query("a", "c", <<["B", "BOOLEAN"], ["c", "INTEGER"], ["D", "INTEGER"], ["e", "INTEGER"], ["e", "A"], ["B", "INTEGER"]>>, "C")
add_command("C", "e", <<["C", "BOOLEAN"], ["A", "A"], ["A", "BOOLEAN"], ["a", "BOOLEAN"], ["b", "INTEGER"], ["INTEGER", "INTEGER"]>>)
add_query("b", "INTEGER", <<["C", "BOOLEAN"], ["b", "BOOLEAN"], ["B", "e"], ["A", "C"], ["B", "INTEGER"], ["b", "INTEGER"]>>, "C")
numerical_negation
add_query("A", "B", <<["e", "INTEGER"], ["D", "e"], ["B", "INTEGER"], ["d", "BOOLEAN"], ["A", "INTEGER"], ["c", "INTEGER"], ["B", "A"]>>, "D")
logical_negation
logical_negation
add_query("A", "C", <<["d", "INTEGER"], ["B", "INTEGER"], ["d", "INTEGER"], ["c", "d"], ["A", "e"], ["b", "D"], ["D", "C"], ["e", "BOOLEAN"], ["c", "INTEGER"]>>, "b")
type_check
add_call_chain(<<e,B,B,A,a,D,BOOLEAN,A,a>>)
int_value (27)
add_call_chain(<<a,e>>)
add_attribute("BOOLEAN", "b", "INTEGER")
int_value (47)
generate_java_code
generate_java_code
logical_negation
add_class(b)
generate_java_code
add_call_chain(<<c,B,B>>)
add_call_chain(<<B,a,INTEGER,c,d,C,A,d,d>>)
int_value (42)
add_call_chain(<<INTEGER,BOOLEAN,B,C,a,C,b,c,a>>)
bool_value (true)
logical_negation
logical_negation
bool_value (true)
conjunction
type_check
multiplication
int_value (11)
add_query("B", "D", <<["a", "INTEGER"]>>, "A")
add_attribute("B", "A", "INTEGER")
add_call_chain(<<D,D,B,D,D,e>>)
add_class(D)
add_class(d)
add_call_chain(<<C,A,BOOLEAN>>)
multiplication
logical_negation
logical_negation
numerical_negation
add_call_chain(<<C,A>>)
int_value (23)
multiplication
add_attribute("B", "a", "c")
addition
numerical_negation
add_command("B", "D", <<["D", "A"], ["A", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["c", "b"], ["B", "BOOLEAN"], ["c", "INTEGER"], ["b", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["B", "a"]>>)
add_call_chain(<<b,d,D,A,c>>)
add_attribute("C", "c", "BOOLEAN")
add_command("BOOLEAN", "a", <<["C", "BOOLEAN"], ["d", "A"], ["b", "A"], ["B", "INTEGER"], ["C", "D"], ["d", "INTEGER"], ["C", "INTEGER"], ["BOOLEAN", "INTEGER"]>>)
add_call_chain(<<D,INTEGER>>)
add_query("D", "A", <<["A", "INTEGER"], ["b", "a"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["c", "BOOLEAN"], ["C", "BOOLEAN"], ["b", "BOOLEAN"]>>, "D")
add_query("b", "c", <<["a", "b"], ["c", "C"], ["INTEGER", "A"]>>, "B")
int_value (17)
generate_java_code
add_class(D)
bool_value (true)
add_command("e", "B", <<["C", "INTEGER"]>>)
add_attribute("C", "e", "a")
add_call_chain(<<A,C,A,b,B,A>>)
type_check
add_query("D", "c", <<["B", "BOOLEAN"], ["e", "INTEGER"], ["A", "INTEGER"], ["B", "INTEGER"], ["C", "INTEGER"], ["e", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>, "C")
numerical_negation
add_call_chain(<<a,D>>)
equals
add_query("B", "C", <<["c", "BOOLEAN"]>>, "a")
add_command("e", "c", <<["C", "D"]>>)
type_check
add_call_chain(<<A>>)
