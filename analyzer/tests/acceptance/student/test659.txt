add_call_chain(<<D,a,e,INTEGER>>)
add_call_chain(<<D,c,INTEGER>>)
disjunction
equals
add_call_chain(<<D>>)
add_call_chain(<<BOOLEAN,A,C,C,C>>)
add_call_chain(<<c,D,D,A>>)
generate_java_code
disjunction
conjunction
conjunction
add_call_chain(<<a,c>>)
bool_value (false)
int_value (2)
add_attribute("b", "A", "INTEGER")
add_call_chain(<<A,e,a,a,c,b>>)
logical_negation
numerical_negation
equals
add_call_chain(<<b,D,b,b,c>>)
generate_java_code
bool_value (true)
greater_than
generate_java_code
add_query("D", "D", <<["c", "BOOLEAN"], ["A", "BOOLEAN"], ["e", "INTEGER"], ["INTEGER", "BOOLEAN"], ["D", "b"], ["C", "INTEGER"]>>, "b")
add_attribute("c", "b", "BOOLEAN")
type_check
add_call_chain(<<b,e,D,A,BOOLEAN,B,b,BOOLEAN>>)
add_query("B", "INTEGER", <<["A", "BOOLEAN"], ["c", "D"], ["d", "BOOLEAN"], ["a", "INTEGER"], ["B", "A"], ["b", "INTEGER"], ["INTEGER", "INTEGER"]>>, "C")
generate_java_code
logical_negation
multiplication
bool_value (false)
greater_than
add_command("c", "B", <<["B", "INTEGER"], ["b", "INTEGER"], ["c", "INTEGER"], ["A", "C"], ["e", "INTEGER"], ["d", "d"]>>)
add_call_chain(<<a,e,B,B>>)
bool_value (true)
add_call_chain(<<D>>)
add_attribute("B", "C", "BOOLEAN")
add_class(C)
add_command("C", "C", <<["A", "BOOLEAN"], ["D", "BOOLEAN"]>>)
add_attribute("D", "d", "BOOLEAN")
greater_than
quotient
add_query("D", "e", <<["b", "INTEGER"], ["e", "BOOLEAN"], ["e", "BOOLEAN"], ["a", "D"], ["b", "c"], ["d", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["a", "D"], ["e", "INTEGER"]>>, "A")
numerical_negation
add_command("A", "c", <<["e", "D"], ["A", "INTEGER"]>>)
bool_value (true)
add_class(D)
bool_value (false)
add_attribute("C", "B", "INTEGER")
greater_than
logical_negation
add_query("C", "C", <<["C", "a"], ["b", "INTEGER"], ["a", "a"], ["INTEGER", "d"], ["c", "INTEGER"], ["d", "INTEGER"], ["B", "B"], ["c", "BOOLEAN"], ["e", "BOOLEAN"]>>, "e")
add_attribute("c", "INTEGER", "BOOLEAN")
int_value (9)
int_value (1)
logical_negation
less_than
add_call_chain(<<D,C,a,D,INTEGER,b,INTEGER,BOOLEAN,BOOLEAN>>)
int_value (36)
numerical_negation
add_call_chain(<<d,A,A,C,a>>)
type_check
bool_value (false)
addition
disjunction
add_attribute("b", "a", "C")
add_call_chain(<<d,c,B>>)
int_value (1)
bool_value (true)
less_than
type_check
generate_java_code
logical_negation
add_call_chain(<<C,c,B,B,C,c,a,D,A>>)
generate_java_code
bool_value (false)
add_query("c", "A", <<["c", "BOOLEAN"], ["C", "INTEGER"], ["A", "B"], ["BOOLEAN", "BOOLEAN"]>>, "INTEGER")
generate_java_code
bool_value (false)
add_call_chain(<<c,C,B,b>>)
numerical_negation
add_query("B", "A", <<["C", "B"], ["B", "INTEGER"], ["D", "INTEGER"], ["a", "BOOLEAN"], ["d", "BOOLEAN"]>>, "B")
add_query("c", "e", <<["b", "BOOLEAN"], ["a", "b"]>>, "c")
quotient
add_call_chain(<<C,INTEGER,C>>)
logical_negation
int_value (26)
numerical_negation
generate_java_code
int_value (24)
add_call_chain(<<A,INTEGER,b,b,d,B,A>>)
equals
add_call_chain(<<BOOLEAN,BOOLEAN,A,b,A,B,INTEGER,a,D>>)
multiplication
add_call_chain(<<A,C,c,D,a,e,C,a,INTEGER>>)
type_check
greater_than
add_call_chain(<<B,B,a,e,c,BOOLEAN,C>>)
add_call_chain(<<B,A,C,a,C,b,B,INTEGER,a>>)
add_command("A", "B", <<["A", "INTEGER"], ["A", "INTEGER"]>>)
add_attribute("e", "D", "B")
add_call_chain(<<c,B>>)
modulo
subtraction
add_attribute("A", "C", "d")
add_command("a", "D", <<["INTEGER", "INTEGER"], ["INTEGER", "INTEGER"], ["c", "INTEGER"]>>)
add_command("e", "D", <<["BOOLEAN", "b"], ["D", "INTEGER"], ["e", "A"], ["INTEGER", "BOOLEAN"], ["e", "D"], ["c", "BOOLEAN"], ["e", "INTEGER"], ["c", "A"], ["d", "A"]>>)
add_command("d", "b", <<["BOOLEAN", "INTEGER"]>>)
equals
bool_value (false)
add_call_chain(<<e,A,a,b,e,b>>)
add_command("BOOLEAN", "b", <<["d", "INTEGER"], ["a", "D"], ["B", "BOOLEAN"], ["d", "INTEGER"]>>)
numerical_negation
add_attribute("e", "B", "BOOLEAN")
add_class(C)
add_command("A", "A", <<["e", "BOOLEAN"], ["D", "INTEGER"], ["C", "INTEGER"], ["INTEGER", "INTEGER"], ["c", "BOOLEAN"]>>)
generate_java_code
bool_value (false)
bool_value (false)
add_command("A", "d", <<["a", "BOOLEAN"], ["C", "INTEGER"]>>)
add_query("D", "D", <<["B", "B"], ["C", "BOOLEAN"]>>, "e")
int_value (10)
add_attribute("A", "e", "BOOLEAN")
add_command("D", "A", <<["A", "INTEGER"], ["B", "INTEGER"], ["a", "BOOLEAN"], ["d", "BOOLEAN"], ["A", "A"]>>)
add_query("c", "D", <<["d", "b"], ["e", "c"], ["e", "INTEGER"], ["c", "INTEGER"], ["INTEGER", "INTEGER"], ["d", "a"], ["C", "C"]>>, "c")
numerical_negation
add_attribute("C", "C", "INTEGER")
conjunction
add_query("A", "d", <<["e", "INTEGER"], ["a", "C"], ["d", "BOOLEAN"], ["B", "INTEGER"], ["a", "INTEGER"], ["C", "INTEGER"], ["D", "BOOLEAN"], ["D", "BOOLEAN"], ["a", "BOOLEAN"]>>, "B")
logical_negation
type_check
add_attribute("D", "A", "BOOLEAN")
add_class(A)
generate_java_code
add_query("A", "c", <<["b", "BOOLEAN"], ["A", "d"], ["e", "D"], ["a", "BOOLEAN"]>>, "BOOLEAN")
type_check
addition
disjunction
type_check
less_than
add_query("a", "D", <<["e", "INTEGER"], ["b", "b"], ["C", "INTEGER"], ["B", "BOOLEAN"], ["b", "BOOLEAN"]>>, "e")
bool_value (true)
equals
add_attribute("c", "e", "e")
generate_java_code
add_query("e", "B", <<["e", "BOOLEAN"], ["B", "B"], ["D", "BOOLEAN"], ["B", "INTEGER"], ["b", "BOOLEAN"], ["b", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["B", "INTEGER"]>>, "D")
int_value (36)
add_command("BOOLEAN", "d", <<["c", "c"], ["b", "INTEGER"], ["e", "BOOLEAN"], ["D", "c"], ["C", "BOOLEAN"]>>)
add_query("b", "b", <<["d", "INTEGER"], ["D", "BOOLEAN"], ["d", "INTEGER"]>>, "C")
add_call_chain(<<C,d,D,D,b,c,BOOLEAN>>)
bool_value (false)
add_call_chain(<<C,d,A,a,C,C>>)
bool_value (false)
add_call_chain(<<BOOLEAN,D>>)
add_attribute("b", "c", "BOOLEAN")
add_query("D", "D", <<["B", "D"], ["C", "A"], ["D", "INTEGER"], ["A", "INTEGER"]>>, "d")
logical_negation
int_value (10)
add_command("b", "e", <<["B", "BOOLEAN"], ["b", "BOOLEAN"], ["A", "e"], ["c", "BOOLEAN"], ["d", "BOOLEAN"]>>)
add_command("d", "d", <<["C", "INTEGER"], ["a", "A"]>>)
add_command("a", "a", <<["D", "INTEGER"], ["D", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "INTEGER"], ["A", "a"], ["A", "B"], ["C", "INTEGER"], ["D", "BOOLEAN"], ["d", "d"]>>)
generate_java_code
bool_value (false)
generate_java_code
generate_java_code
add_call_chain(<<a,c,INTEGER,b,a>>)
conjunction
generate_java_code
less_than
type_check
int_value (33)
add_command("e", "c", <<["b", "BOOLEAN"], ["D", "INTEGER"], ["C", "INTEGER"], ["d", "BOOLEAN"], ["a", "BOOLEAN"]>>)
add_command("C", "A", <<["INTEGER", "INTEGER"], ["b", "BOOLEAN"], ["B", "INTEGER"], ["a", "BOOLEAN"], ["A", "INTEGER"], ["C", "B"], ["C", "INTEGER"], ["d", "INTEGER"]>>)
add_attribute("B", "B", "D")
int_value (17)
add_call_chain(<<A,a,B,C,INTEGER,d,b>>)
equals
int_value (39)
add_query("D", "A", <<["BOOLEAN", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "e"]>>, "b")
add_command("D", "b", <<["C", "BOOLEAN"]>>)
int_value (15)
add_command("B", "b", <<["b", "BOOLEAN"], ["B", "c"], ["b", "INTEGER"]>>)
add_call_chain(<<C,c,A,A,d>>)
quotient
logical_negation
numerical_negation
add_command("e", "e", <<["b", "INTEGER"], ["b", "e"], ["a", "a"], ["A", "INTEGER"], ["e", "INTEGER"]>>)
add_attribute("c", "d", "e")
generate_java_code
add_query("e", "INTEGER", <<["d", "d"], ["b", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["c", "BOOLEAN"]>>, "C")
bool_value (true)
logical_negation
generate_java_code
add_attribute("D", "C", "BOOLEAN")
add_query("D", "a", <<["c", "INTEGER"], ["B", "D"], ["C", "D"], ["d", "BOOLEAN"]>>, "D")
add_attribute("e", "INTEGER", "c")
add_class(A)
type_check
bool_value (false)
add_command("A", "BOOLEAN", <<["A", "INTEGER"], ["C", "BOOLEAN"], ["C", "INTEGER"], ["c", "BOOLEAN"], ["C", "BOOLEAN"], ["B", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "C"], ["C", "BOOLEAN"]>>)
add_call_chain(<<d,c,e,B,INTEGER,a,B,d,A>>)
bool_value (false)
add_query("INTEGER", "B", <<["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["d", "INTEGER"], ["A", "INTEGER"], ["BOOLEAN", "INTEGER"], ["BOOLEAN", "INTEGER"], ["b", "INTEGER"], ["e", "BOOLEAN"]>>, "c")
add_call_chain(<<e,b,C,D>>)
add_class(c)
add_call_chain(<<c,b,B,a,d,a,D,B,D>>)
logical_negation
numerical_negation
add_call_chain(<<a>>)
conjunction
add_query("A", "A", <<["a", "C"], ["a", "D"], ["A", "INTEGER"], ["d", "B"], ["B", "BOOLEAN"], ["C", "A"], ["A", "BOOLEAN"], ["a", "INTEGER"], ["c", "d"]>>, "C")
add_command("BOOLEAN", "a", <<["A", "BOOLEAN"]>>)
disjunction
modulo
add_class(INTEGER)
multiplication
generate_java_code
quotient
quotient
add_attribute("BOOLEAN", "D", "INTEGER")
add_call_chain(<<D,A,b>>)
bool_value (true)
int_value (31)
bool_value (true)
