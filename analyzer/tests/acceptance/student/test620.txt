add_class(A)
equals
generate_java_code
bool_value (true)
equals
numerical_negation
int_value (17)
numerical_negation
add_call_chain(<<a,d,e,C,BOOLEAN,A,b,D,B>>)
add_command("D", "a", <<["A", "BOOLEAN"], ["A", "INTEGER"]>>)
logical_negation
addition
add_class(a)
add_call_chain(<<C,A,A,C>>)
add_call_chain(<<A,D,c,B>>)
add_call_chain(<<d,D,A,c,A>>)
add_call_chain(<<b>>)
generate_java_code
add_call_chain(<<c,D,d,C,d,d,d,c>>)
logical_negation
add_command("c", "A", <<["e", "c"], ["d", "d"], ["D", "BOOLEAN"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["b", "INTEGER"]>>)
add_call_chain(<<b,D,a,b,e,B,B,d,B>>)
add_attribute("B", "B", "C")
conjunction
type_check
add_call_chain(<<e,A,D>>)
add_attribute("b", "A", "C")
int_value (32)
add_command("a", "C", <<["d", "INTEGER"], ["B", "BOOLEAN"], ["B", "BOOLEAN"]>>)
add_query("BOOLEAN", "b", <<["B", "d"], ["D", "INTEGER"], ["D", "INTEGER"], ["c", "b"], ["b", "BOOLEAN"]>>, "C")
logical_negation
equals
add_call_chain(<<c>>)
add_query("A", "b", <<["a", "INTEGER"], ["c", "INTEGER"], ["A", "INTEGER"], ["a", "B"], ["C", "D"], ["a", "INTEGER"], ["a", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "INTEGER"]>>, "d")
add_call_chain(<<D,D,e,D,A,B>>)
add_command("c", "d", <<["d", "BOOLEAN"], ["A", "e"], ["BOOLEAN", "A"], ["B", "INTEGER"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["B", "BOOLEAN"], ["C", "b"], ["A", "BOOLEAN"]>>)
add_query("C", "A", <<["A", "BOOLEAN"], ["B", "b"], ["e", "INTEGER"], ["d", "BOOLEAN"], ["c", "BOOLEAN"], ["C", "c"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["D", "D"]>>, "d")
add_class(D)
add_class(A)
add_attribute("BOOLEAN", "C", "BOOLEAN")
add_attribute("BOOLEAN", "D", "INTEGER")
equals
add_query("D", "B", <<["c", "C"], ["B", "BOOLEAN"], ["b", "INTEGER"], ["b", "BOOLEAN"], ["C", "BOOLEAN"], ["c", "INTEGER"], ["INTEGER", "BOOLEAN"], ["a", "BOOLEAN"]>>, "d")
add_attribute("B", "D", "BOOLEAN")
add_attribute("d", "D", "BOOLEAN")
numerical_negation
add_command("d", "B", <<["e", "B"], ["C", "BOOLEAN"], ["D", "BOOLEAN"], ["C", "BOOLEAN"]>>)
add_command("C", "a", <<["A", "D"], ["d", "BOOLEAN"], ["D", "BOOLEAN"], ["e", "b"]>>)
type_check
add_attribute("A", "BOOLEAN", "B")
add_attribute("a", "B", "d")
generate_java_code
disjunction
add_class(C)
add_command("c", "D", <<["e", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "D"], ["A", "B"], ["B", "INTEGER"]>>)
add_query("B", "B", <<["C", "INTEGER"], ["e", "D"], ["D", "e"], ["d", "INTEGER"]>>, "C")
add_call_chain(<<D,b,C,C,C,B,D>>)
add_call_chain(<<d,B,A,c,a,a,b>>)
numerical_negation
bool_value (true)
conjunction
bool_value (false)
equals
add_attribute("A", "b", "BOOLEAN")
int_value (18)
add_command("D", "e", <<["D", "D"]>>)
add_query("c", "A", <<["e", "INTEGER"], ["b", "c"], ["e", "BOOLEAN"], ["INTEGER", "INTEGER"]>>, "e")
add_call_chain(<<B,c>>)
bool_value (false)
numerical_negation
greater_than
generate_java_code
add_query("e", "c", <<["A", "BOOLEAN"], ["C", "B"], ["A", "BOOLEAN"], ["D", "B"], ["b", "BOOLEAN"], ["c", "INTEGER"]>>, "d")
add_attribute("INTEGER", "A", "A")
add_call_chain(<<a>>)
modulo
type_check
logical_negation
add_command("e", "D", <<["b", "BOOLEAN"]>>)
generate_java_code
bool_value (true)
logical_negation
int_value (26)
add_call_chain(<<a,d,BOOLEAN,A,b,C>>)
int_value (13)
add_call_chain(<<e>>)
numerical_negation
add_call_chain(<<A>>)
add_query("b", "B", <<["A", "D"], ["B", "INTEGER"], ["d", "BOOLEAN"]>>, "c")
add_query("C", "e", <<["A", "INTEGER"], ["A", "BOOLEAN"], ["B", "INTEGER"], ["D", "e"], ["d", "INTEGER"], ["a", "INTEGER"], ["a", "BOOLEAN"]>>, "d")
numerical_negation
add_query("C", "A", <<["C", "INTEGER"], ["C", "INTEGER"], ["a", "BOOLEAN"], ["e", "B"], ["C", "BOOLEAN"], ["a", "INTEGER"], ["a", "BOOLEAN"]>>, "e")
subtraction
type_check
add_query("B", "B", <<["C", "INTEGER"], ["c", "INTEGER"], ["e", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "a"], ["A", "INTEGER"]>>, "e")
int_value (41)
numerical_negation
add_command("c", "d", <<["a", "INTEGER"], ["B", "INTEGER"], ["a", "INTEGER"], ["e", "INTEGER"], ["c", "INTEGER"], ["c", "INTEGER"]>>)
add_call_chain(<<b,d,D,b,a,INTEGER,A>>)
conjunction
add_query("b", "A", <<["C", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "BOOLEAN"], ["e", "BOOLEAN"], ["c", "BOOLEAN"], ["C", "INTEGER"]>>, "A")
bool_value (false)
numerical_negation
logical_negation
type_check
bool_value (false)
add_command("BOOLEAN", "D", <<["A", "BOOLEAN"], ["C", "BOOLEAN"], ["c", "BOOLEAN"]>>)
add_attribute("BOOLEAN", "B", "BOOLEAN")
logical_negation
bool_value (true)
add_call_chain(<<e>>)
add_call_chain(<<INTEGER,D,BOOLEAN>>)
numerical_negation
multiplication
less_than
equals
disjunction
logical_negation
generate_java_code
add_command("B", "B", <<["B", "INTEGER"], ["B", "BOOLEAN"], ["A", "INTEGER"], ["a", "INTEGER"], ["A", "INTEGER"], ["b", "BOOLEAN"]>>)
add_call_chain(<<e,A,BOOLEAN,D,b,B>>)
bool_value (true)
add_call_chain(<<d,BOOLEAN,c,B,c>>)
add_query("INTEGER", "INTEGER", <<["C", "BOOLEAN"]>>, "b")
int_value (32)
add_attribute("e", "B", "INTEGER")
add_query("d", "d", <<["d", "INTEGER"], ["BOOLEAN", "INTEGER"], ["A", "e"], ["b", "B"], ["b", "INTEGER"]>>, "b")
add_call_chain(<<B,d,A,A,A,b,d,b,C>>)
add_query("A", "b", <<["d", "BOOLEAN"], ["b", "BOOLEAN"], ["INTEGER", "C"], ["B", "INTEGER"], ["D", "BOOLEAN"], ["a", "INTEGER"], ["A", "INTEGER"]>>, "d")
int_value (38)
add_command("C", "A", <<["d", "B"], ["BOOLEAN", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["C", "BOOLEAN"], ["d", "d"], ["B", "INTEGER"], ["B", "BOOLEAN"], ["D", "BOOLEAN"]>>)
int_value (4)
add_call_chain(<<INTEGER,A,e>>)
add_call_chain(<<B,b,D,d,e,b,c,INTEGER>>)
add_attribute("e", "e", "INTEGER")
int_value (6)
add_call_chain(<<D,e,a,B>>)
logical_negation
logical_negation
numerical_negation
add_attribute("c", "B", "B")
add_query("A", "b", <<["D", "e"], ["d", "INTEGER"], ["A", "INTEGER"], ["A", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "BOOLEAN"]>>, "d")
add_attribute("e", "e", "INTEGER")
greater_than
numerical_negation
logical_negation
conjunction
type_check
generate_java_code
add_call_chain(<<INTEGER,a,A,C,b>>)
int_value (47)
numerical_negation
add_command("e", "C", <<["d", "c"], ["A", "BOOLEAN"], ["a", "INTEGER"], ["A", "INTEGER"], ["A", "INTEGER"], ["b", "INTEGER"], ["c", "C"], ["e", "BOOLEAN"]>>)
add_call_chain(<<d,a,D,D,B,b,e>>)
add_call_chain(<<B,INTEGER,d>>)
add_attribute("d", "b", "INTEGER")
logical_negation
add_call_chain(<<d,d,D,C,C,c,D,e,B>>)
add_call_chain(<<b>>)
generate_java_code
int_value (17)
numerical_negation
equals
int_value (23)
generate_java_code
add_command("B", "d", <<["A", "BOOLEAN"], ["d", "b"], ["e", "INTEGER"], ["INTEGER", "BOOLEAN"], ["d", "INTEGER"], ["a", "INTEGER"]>>)
disjunction
add_attribute("a", "D", "c")
add_attribute("BOOLEAN", "a", "C")
generate_java_code
add_call_chain(<<c,B>>)
add_attribute("A", "d", "INTEGER")
add_call_chain(<<D,e,C,b,A>>)
add_call_chain(<<b>>)
add_attribute("B", "B", "a")
greater_than
numerical_negation
numerical_negation
add_attribute("A", "D", "BOOLEAN")
int_value (10)
int_value (39)
add_command("BOOLEAN", "e", <<["D", "BOOLEAN"], ["d", "e"]>>)
add_command("d", "e", <<["b", "BOOLEAN"], ["D", "A"], ["c", "INTEGER"], ["a", "INTEGER"], ["C", "INTEGER"], ["B", "INTEGER"], ["B", "INTEGER"], ["C", "INTEGER"]>>)
add_call_chain(<<C,A,C>>)
bool_value (true)
add_call_chain(<<e,c,e,e>>)
type_check
int_value (29)
add_attribute("a", "A", "BOOLEAN")
add_call_chain(<<D,A,d,e,a,B,A>>)
logical_negation
int_value (48)
logical_negation
equals
add_query("b", "BOOLEAN", <<["d", "BOOLEAN"], ["e", "INTEGER"], ["C", "INTEGER"], ["B", "BOOLEAN"], ["d", "BOOLEAN"], ["a", "C"], ["A", "B"]>>, "a")
conjunction
type_check
add_query("d", "a", <<["d", "BOOLEAN"], ["D", "d"], ["B", "d"], ["BOOLEAN", "INTEGER"], ["B", "b"], ["B", "BOOLEAN"], ["A", "INTEGER"]>>, "a")
bool_value (false)
int_value (36)
add_class(e)
subtraction
add_query("e", "D", <<["a", "INTEGER"], ["INTEGER", "B"], ["b", "d"], ["C", "e"], ["D", "A"], ["BOOLEAN", "D"], ["b", "e"], ["C", "BOOLEAN"]>>, "D")
type_check
add_class(c)
add_query("C", "D", <<["D", "D"], ["D", "INTEGER"], ["b", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["c", "C"], ["b", "BOOLEAN"]>>, "d")
add_command("d", "a", <<["b", "a"], ["d", "d"], ["C", "INTEGER"], ["B", "BOOLEAN"]>>)
add_call_chain(<<D>>)
add_call_chain(<<e,A,c,INTEGER,b,a,c>>)
bool_value (true)
add_query("c", "c", <<["D", "BOOLEAN"]>>, "A")
add_class(D)
add_call_chain(<<a,D,C,a,e,A,c,B>>)
add_class(d)
add_command("A", "INTEGER", <<["a", "INTEGER"], ["A", "INTEGER"], ["e", "C"], ["A", "INTEGER"], ["c", "e"], ["B", "d"], ["D", "BOOLEAN"], ["A", "c"], ["a", "C"]>>)
add_query("INTEGER", "c", <<["c", "INTEGER"], ["D", "D"], ["B", "INTEGER"], ["B", "INTEGER"], ["c", "b"], ["d", "d"]>>, "A")
add_attribute("b", "D", "a")
generate_java_code
add_query("e", "e", <<["e", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["INTEGER", "BOOLEAN"], ["B", "INTEGER"]>>, "D")
disjunction
add_attribute("D", "d", "INTEGER")
disjunction
add_call_chain(<<a,C,B,d,e>>)
add_command("A", "B", <<["B", "BOOLEAN"], ["A", "INTEGER"], ["c", "INTEGER"], ["C", "BOOLEAN"]>>)
add_call_chain(<<C,d,b,D,D,INTEGER,C,C>>)
type_check
int_value (48)
bool_value (true)
add_class(INTEGER)
add_command("INTEGER", "c", <<["D", "INTEGER"], ["d", "INTEGER"], ["c", "D"], ["C", "b"], ["e", "c"], ["A", "BOOLEAN"], ["D", "BOOLEAN"]>>)
multiplication
add_call_chain(<<c,a,INTEGER,b,B,INTEGER,D,C,A>>)
