add_query("c", "B", <<["a", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "D"], ["d", "B"], ["d", "BOOLEAN"], ["B", "INTEGER"], ["INTEGER", "D"], ["b", "INTEGER"], ["e", "INTEGER"]>>, "c")
add_call_chain(<<a,BOOLEAN>>)
modulo
numerical_negation
add_query("B", "B", <<["C", "BOOLEAN"]>>, "C")
type_check
add_query("e", "B", <<["B", "BOOLEAN"], ["d", "C"], ["D", "INTEGER"], ["A", "BOOLEAN"]>>, "c")
add_query("c", "c", <<["A", "b"], ["A", "INTEGER"], ["a", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["c", "BOOLEAN"], ["D", "INTEGER"], ["A", "INTEGER"], ["b", "BOOLEAN"]>>, "D")
subtraction
add_class(B)
int_value (22)
add_command("c", "a", <<["C", "INTEGER"], ["A", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["b", "INTEGER"], ["a", "BOOLEAN"], ["b", "INTEGER"], ["e", "BOOLEAN"], ["A", "A"], ["a", "INTEGER"]>>)
subtraction
int_value (17)
conjunction
disjunction
int_value (49)
add_call_chain(<<C>>)
add_call_chain(<<a,C,d,B,A,e,b,e>>)
bool_value (true)
add_attribute("BOOLEAN", "c", "INTEGER")
int_value (10)
disjunction
numerical_negation
numerical_negation
add_query("a", "d", <<["BOOLEAN", "BOOLEAN"], ["D", "BOOLEAN"]>>, "c")
add_attribute("B", "A", "D")
add_call_chain(<<a,A,D,C,e,c>>)
type_check
add_call_chain(<<BOOLEAN,D>>)
add_attribute("d", "C", "B")
add_call_chain(<<A,A,b,C,c,A,A,d,C>>)
logical_negation
add_attribute("C", "d", "BOOLEAN")
add_call_chain(<<b,b,C,A,a>>)
add_class(a)
type_check
add_attribute("C", "D", "A")
add_call_chain(<<a,c,e,INTEGER,B>>)
int_value (10)
add_call_chain(<<A,a,C,d,A,INTEGER,D>>)
greater_than
add_command("A", "b", <<["d", "B"], ["C", "b"], ["d", "BOOLEAN"], ["C", "BOOLEAN"]>>)
add_query("D", "B", <<["d", "BOOLEAN"], ["A", "INTEGER"], ["a", "BOOLEAN"], ["b", "BOOLEAN"], ["B", "d"]>>, "e")
type_check
type_check
type_check
add_query("b", "D", <<["A", "INTEGER"], ["b", "INTEGER"], ["e", "BOOLEAN"], ["c", "D"], ["a", "d"], ["d", "BOOLEAN"]>>, "C")
add_attribute("c", "e", "INTEGER")
add_command("INTEGER", "c", <<["D", "BOOLEAN"], ["B", "e"], ["B", "BOOLEAN"], ["A", "C"], ["c", "BOOLEAN"], ["b", "B"], ["D", "INTEGER"], ["A", "INTEGER"], ["d", "BOOLEAN"]>>)
add_attribute("B", "A", "c")
add_call_chain(<<INTEGER,C,C,B,A>>)
add_class(D)
add_call_chain(<<D>>)
add_attribute("C", "a", "INTEGER")
add_command("e", "b", <<["D", "BOOLEAN"], ["a", "BOOLEAN"], ["B", "INTEGER"]>>)
logical_negation
conjunction
multiplication
add_command("INTEGER", "e", <<["BOOLEAN", "c"], ["C", "INTEGER"], ["B", "INTEGER"], ["INTEGER", "BOOLEAN"], ["c", "INTEGER"], ["A", "BOOLEAN"], ["D", "INTEGER"]>>)
numerical_negation
add_command("BOOLEAN", "INTEGER", <<["C", "INTEGER"], ["b", "BOOLEAN"], ["c", "BOOLEAN"], ["c", "C"], ["c", "BOOLEAN"]>>)
generate_java_code
int_value (7)
generate_java_code
conjunction
logical_negation
int_value (29)
add_command("b", "C", <<["A", "BOOLEAN"], ["C", "BOOLEAN"], ["d", "BOOLEAN"]>>)
add_attribute("e", "a", "BOOLEAN")
add_class(a)
add_command("D", "D", <<["C", "BOOLEAN"], ["B", "BOOLEAN"], ["INTEGER", "C"], ["e", "BOOLEAN"], ["e", "INTEGER"], ["b", "d"]>>)
int_value (28)
type_check
conjunction
add_attribute("d", "D", "INTEGER")
disjunction
logical_negation
add_call_chain(<<D,BOOLEAN,D,A,C,c>>)
generate_java_code
add_command("D", "A", <<["c", "b"], ["C", "INTEGER"], ["A", "INTEGER"], ["A", "INTEGER"], ["INTEGER", "INTEGER"], ["BOOLEAN", "INTEGER"], ["INTEGER", "INTEGER"], ["A", "INTEGER"], ["a", "BOOLEAN"]>>)
add_command("b", "B", <<["d", "BOOLEAN"], ["c", "B"]>>)
add_attribute("INTEGER", "BOOLEAN", "BOOLEAN")
add_call_chain(<<a,e>>)
add_query("A", "A", <<["A", "BOOLEAN"], ["C", "INTEGER"], ["c", "INTEGER"], ["BOOLEAN", "INTEGER"], ["d", "B"], ["C", "b"], ["B", "BOOLEAN"], ["b", "BOOLEAN"], ["d", "B"]>>, "B")
int_value (31)
add_call_chain(<<a,a,d>>)
add_command("D", "d", <<["B", "INTEGER"], ["A", "c"], ["b", "a"], ["a", "INTEGER"], ["C", "INTEGER"], ["A", "INTEGER"]>>)
less_than
add_class(B)
add_attribute("d", "c", "BOOLEAN")
add_call_chain(<<B,C,e,a,INTEGER,b,B>>)
generate_java_code
add_call_chain(<<b,C,A>>)
add_query("e", "e", <<["BOOLEAN", "B"], ["BOOLEAN", "c"]>>, "b")
type_check
int_value (38)
add_attribute("c", "D", "BOOLEAN")
add_attribute("C", "b", "INTEGER")
add_query("a", "a", <<["B", "BOOLEAN"], ["b", "INTEGER"], ["b", "INTEGER"], ["INTEGER", "d"], ["C", "INTEGER"], ["a", "INTEGER"], ["B", "INTEGER"], ["INTEGER", "e"], ["b", "INTEGER"]>>, "A")
add_attribute("e", "a", "BOOLEAN")
logical_negation
add_attribute("D", "D", "INTEGER")
add_call_chain(<<c,BOOLEAN,e,c,B,d>>)
add_query("d", "d", <<["C", "BOOLEAN"], ["a", "INTEGER"], ["e", "e"]>>, "b")
add_query("C", "D", <<["D", "BOOLEAN"], ["d", "BOOLEAN"], ["c", "B"], ["C", "c"], ["d", "B"], ["C", "BOOLEAN"]>>, "a")
disjunction
add_call_chain(<<INTEGER,C,C>>)
logical_negation
type_check
add_query("e", "B", <<["c", "BOOLEAN"], ["c", "INTEGER"], ["A", "INTEGER"], ["D", "d"], ["BOOLEAN", "INTEGER"], ["BOOLEAN", "INTEGER"], ["a", "BOOLEAN"], ["D", "e"], ["e", "INTEGER"]>>, "A")
numerical_negation
int_value (42)
add_command("b", "B", <<["INTEGER", "INTEGER"], ["c", "BOOLEAN"], ["C", "INTEGER"], ["b", "BOOLEAN"], ["INTEGER", "INTEGER"], ["A", "INTEGER"], ["INTEGER", "INTEGER"], ["b", "INTEGER"], ["e", "INTEGER"]>>)
bool_value (true)
add_command("D", "d", <<["a", "BOOLEAN"], ["b", "BOOLEAN"], ["C", "a"], ["e", "INTEGER"], ["A", "INTEGER"], ["B", "d"]>>)
add_call_chain(<<D,D,a,B,b,D,C,B,INTEGER>>)
int_value (8)
logical_negation
add_call_chain(<<e,B,b,A,d>>)
add_attribute("d", "e", "BOOLEAN")
add_call_chain(<<e,a>>)
disjunction
logical_negation
add_attribute("D", "INTEGER", "e")
bool_value (true)
add_class(D)
add_command("C", "D", <<["B", "A"], ["B", "a"]>>)
numerical_negation
add_call_chain(<<d,b,C,a,C,C,BOOLEAN,C>>)
int_value (39)
add_command("A", "A", <<["B", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["a", "D"], ["c", "BOOLEAN"], ["a", "INTEGER"]>>)
add_call_chain(<<A>>)
conjunction
numerical_negation
add_command("BOOLEAN", "B", <<["c", "d"], ["D", "b"], ["c", "C"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["B", "e"], ["A", "BOOLEAN"]>>)
bool_value (false)
generate_java_code
less_than
add_call_chain(<<D,b,d,C,A,B,C,B>>)
quotient
bool_value (true)
add_command("D", "C", <<["A", "D"], ["c", "INTEGER"]>>)
disjunction
add_command("a", "e", <<["c", "B"], ["D", "e"], ["c", "INTEGER"], ["A", "INTEGER"], ["B", "B"], ["INTEGER", "BOOLEAN"], ["B", "INTEGER"]>>)
generate_java_code
numerical_negation
disjunction
type_check
bool_value (false)
int_value (18)
int_value (22)
add_call_chain(<<D,B,d,C,BOOLEAN,INTEGER,d,A,e>>)
add_command("a", "B", <<["c", "INTEGER"], ["c", "INTEGER"], ["c", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>)
add_command("B", "a", <<["a", "BOOLEAN"], ["A", "D"], ["A", "INTEGER"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["INTEGER", "a"]>>)
add_class(D)
add_call_chain(<<C,A,INTEGER,d,b,d>>)
add_command("e", "B", <<["C", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "BOOLEAN"], ["d", "BOOLEAN"], ["B", "INTEGER"], ["B", "INTEGER"], ["c", "INTEGER"]>>)
int_value (45)
add_attribute("a", "C", "B")
add_command("A", "C", <<["e", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"]>>)
bool_value (true)
equals
multiplication
conjunction
add_attribute("e", "D", "D")
add_query("INTEGER", "C", <<["C", "BOOLEAN"], ["B", "b"], ["A", "INTEGER"], ["c", "BOOLEAN"]>>, "c")
add_call_chain(<<B,A,A>>)
add_call_chain(<<BOOLEAN,d,D,D,D,D,INTEGER>>)
bool_value (false)
add_call_chain(<<C,BOOLEAN>>)
bool_value (false)
add_command("e", "C", <<["b", "BOOLEAN"]>>)
numerical_negation
add_class(c)
int_value (35)
add_call_chain(<<c,A,C,e,C,D,B,D>>)
int_value (25)
type_check
add_command("A", "a", <<["d", "INTEGER"], ["c", "BOOLEAN"]>>)
add_query("D", "B", <<["e", "e"], ["c", "C"], ["A", "e"], ["B", "A"]>>, "D")
generate_java_code
modulo
int_value (13)
add_call_chain(<<b,d,B>>)
add_attribute("a", "A", "A")
add_attribute("d", "D", "a")
logical_negation
quotient
add_query("A", "c", <<["c", "INTEGER"], ["C", "C"], ["C", "INTEGER"], ["a", "BOOLEAN"], ["A", "INTEGER"]>>, "B")
logical_negation
modulo
numerical_negation
int_value (12)
numerical_negation
disjunction
logical_negation
generate_java_code
numerical_negation
multiplication
numerical_negation
multiplication
bool_value (false)
logical_negation
add_call_chain(<<a,d>>)
type_check
add_attribute("B", "BOOLEAN", "BOOLEAN")
add_command("a", "B", <<["A", "INTEGER"], ["B", "C"], ["B", "d"], ["INTEGER", "d"], ["D", "BOOLEAN"], ["b", "INTEGER"], ["B", "BOOLEAN"]>>)
generate_java_code
add_command("e", "C", <<["d", "c"], ["c", "BOOLEAN"], ["c", "INTEGER"], ["b", "INTEGER"], ["C", "B"], ["e", "INTEGER"], ["c", "b"], ["A", "c"]>>)
int_value (38)
add_command("B", "B", <<["a", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["a", "C"], ["D", "BOOLEAN"], ["a", "INTEGER"], ["a", "A"], ["b", "INTEGER"]>>)
generate_java_code
add_command("d", "c", <<["d", "BOOLEAN"], ["a", "BOOLEAN"], ["B", "INTEGER"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["d", "BOOLEAN"], ["D", "BOOLEAN"], ["b", "a"], ["C", "INTEGER"]>>)
add_attribute("D", "a", "INTEGER")
int_value (14)
add_query("A", "d", <<["BOOLEAN", "A"], ["C", "C"], ["b", "BOOLEAN"], ["A", "A"], ["c", "BOOLEAN"], ["D", "INTEGER"], ["B", "INTEGER"], ["C", "BOOLEAN"], ["D", "D"]>>, "d")
add_command("INTEGER", "e", <<["b", "B"], ["BOOLEAN", "INTEGER"], ["a", "BOOLEAN"], ["e", "INTEGER"]>>)
int_value (6)
bool_value (false)
add_query("D", "A", <<["e", "BOOLEAN"], ["c", "BOOLEAN"]>>, "B")
generate_java_code
add_call_chain(<<C,d,b,D,a,A,B,e,B>>)
conjunction
add_query("B", "d", <<["c", "BOOLEAN"], ["C", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["B", "INTEGER"], ["c", "D"], ["INTEGER", "INTEGER"], ["c", "BOOLEAN"], ["D", "BOOLEAN"]>>, "a")
conjunction
add_query("e", "B", <<["c", "INTEGER"], ["INTEGER", "BOOLEAN"], ["c", "INTEGER"]>>, "c")
add_command("D", "BOOLEAN", <<["e", "d"], ["a", "INTEGER"]>>)
logical_negation
add_command("e", "B", <<["d", "INTEGER"], ["B", "INTEGER"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["D", "INTEGER"], ["C", "INTEGER"], ["A", "D"]>>)
logical_negation
add_attribute("c", "INTEGER", "INTEGER")
numerical_negation
add_call_chain(<<C>>)
add_attribute("d", "e", "INTEGER")
add_query("a", "B", <<["e", "D"], ["B", "INTEGER"], ["d", "BOOLEAN"], ["B", "e"], ["INTEGER", "BOOLEAN"], ["c", "BOOLEAN"], ["B", "C"], ["e", "INTEGER"]>>, "a")
add_class(b)
type_check
add_class(e)
add_command("d", "INTEGER", <<["BOOLEAN", "BOOLEAN"], ["d", "INTEGER"], ["D", "BOOLEAN"], ["e", "INTEGER"], ["C", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>)
add_query("c", "C", <<["b", "INTEGER"]>>, "a")
bool_value (true)
add_call_chain(<<B,c>>)
int_value (12)
add_query("A", "B", <<["a", "INTEGER"], ["A", "d"], ["a", "INTEGER"], ["d", "d"], ["C", "b"], ["d", "A"], ["INTEGER", "C"]>>, "BOOLEAN")
add_attribute("A", "B", "INTEGER")
bool_value (true)
generate_java_code
type_check
bool_value (true)
int_value (4)
add_command("d", "INTEGER", <<["B", "BOOLEAN"], ["b", "INTEGER"], ["B", "BOOLEAN"], ["C", "INTEGER"], ["INTEGER", "INTEGER"], ["C", "BOOLEAN"], ["b", "a"]>>)
numerical_negation
add_attribute("a", "D", "b")
add_command("b", "d", <<["e", "b"], ["a", "INTEGER"], ["b", "INTEGER"]>>)
add_attribute("D", "b", "INTEGER")
add_call_chain(<<INTEGER,e,D,d>>)
add_call_chain(<<a,A,c,B,e,b,B,INTEGER,a>>)
numerical_negation
add_attribute("d", "c", "INTEGER")
type_check
add_call_chain(<<C,A,b,d,d>>)
add_attribute("a", "BOOLEAN", "e")
modulo
add_query("b", "c", <<["INTEGER", "C"], ["a", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["A", "INTEGER"], ["c", "BOOLEAN"], ["a", "BOOLEAN"], ["C", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "INTEGER"]>>, "b")
bool_value (false)
int_value (2)
add_query("D", "B", <<["D", "INTEGER"]>>, "A")
add_query("INTEGER", "b", <<["C", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "B"], ["D", "BOOLEAN"]>>, "C")
add_call_chain(<<B,e,a,INTEGER,a,b,a,A,a>>)
less_than
numerical_negation
disjunction
add_query("C", "B", <<["C", "C"], ["b", "a"], ["INTEGER", "INTEGER"], ["BOOLEAN", "INTEGER"], ["B", "INTEGER"], ["C", "A"], ["b", "BOOLEAN"], ["c", "C"], ["D", "D"]>>, "d")
conjunction
add_command("e", "A", <<["e", "INTEGER"], ["INTEGER", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["d", "B"], ["B", "c"]>>)
bool_value (false)
bool_value (false)
add_command("a", "b", <<["B", "D"], ["b", "INTEGER"], ["B", "INTEGER"]>>)
add_call_chain(<<a,d,e,D,a,b,e,e,b>>)
add_query("d", "a", <<["A", "BOOLEAN"], ["d", "BOOLEAN"]>>, "B")
add_call_chain(<<e,A,B,d,c,a>>)
add_call_chain(<<c,D,c,INTEGER,a>>)
