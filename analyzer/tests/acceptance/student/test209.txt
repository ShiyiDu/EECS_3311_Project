type_check
greater_than
add_attribute("C", "C", "A")
add_attribute("B", "c", "INTEGER")
int_value (7)
conjunction
numerical_negation
add_command("a", "a", <<["B", "BOOLEAN"], ["b", "BOOLEAN"], ["A", "BOOLEAN"]>>)
logical_negation
add_call_chain(<<d,B,a,e,B,C,C,D>>)
add_command("D", "e", <<["A", "BOOLEAN"], ["b", "INTEGER"], ["INTEGER", "INTEGER"], ["d", "BOOLEAN"], ["d", "BOOLEAN"], ["A", "INTEGER"], ["e", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "b"]>>)
logical_negation
int_value (10)
add_attribute("D", "e", "c")
bool_value (false)
int_value (38)
int_value (22)
add_call_chain(<<e,d,B,INTEGER,B>>)
add_command("c", "b", <<["A", "BOOLEAN"], ["c", "c"], ["e", "INTEGER"], ["b", "INTEGER"], ["A", "BOOLEAN"]>>)
add_query("c", "D", <<["d", "BOOLEAN"], ["d", "a"], ["C", "BOOLEAN"]>>, "INTEGER")
int_value (36)
add_query("BOOLEAN", "c", <<["a", "BOOLEAN"], ["B", "BOOLEAN"]>>, "a")
add_call_chain(<<D,a,D>>)
add_command("BOOLEAN", "C", <<["b", "e"], ["INTEGER", "INTEGER"]>>)
modulo
add_call_chain(<<C,e,BOOLEAN,B,A,D>>)
add_command("D", "a", <<["d", "b"]>>)
int_value (16)
less_than
numerical_negation
add_attribute("INTEGER", "a", "BOOLEAN")
add_class(B)
add_call_chain(<<e,D,B,d>>)
add_class(A)
add_call_chain(<<C>>)
add_command("B", "e", <<["D", "INTEGER"], ["D", "INTEGER"], ["b", "INTEGER"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "d"], ["B", "D"], ["c", "A"], ["D", "e"]>>)
add_call_chain(<<B,d,e,C,D,A>>)
logical_negation
add_class(A)
generate_java_code
logical_negation
add_class(INTEGER)
add_attribute("B", "a", "b")
add_query("B", "c", <<["c", "BOOLEAN"]>>, "b")
bool_value (false)
greater_than
bool_value (true)
logical_negation
add_query("a", "C", <<["A", "c"], ["b", "D"], ["A", "INTEGER"], ["C", "c"], ["B", "INTEGER"], ["a", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "a"]>>, "d")
type_check
add_class(B)
modulo
add_command("INTEGER", "a", <<["A", "INTEGER"], ["C", "INTEGER"], ["e", "INTEGER"], ["e", "BOOLEAN"]>>)
equals
add_attribute("B", "c", "B")
int_value (34)
multiplication
add_query("D", "a", <<["e", "BOOLEAN"], ["e", "BOOLEAN"], ["b", "INTEGER"]>>, "D")
bool_value (true)
int_value (38)
add_call_chain(<<b,e,C,d>>)
type_check
bool_value (false)
add_call_chain(<<A,A>>)
add_attribute("c", "BOOLEAN", "BOOLEAN")
type_check
int_value (17)
add_class(D)
add_command("b", "B", <<["A", "INTEGER"], ["b", "BOOLEAN"], ["a", "d"], ["B", "BOOLEAN"], ["b", "a"], ["B", "INTEGER"], ["C", "BOOLEAN"]>>)
add_attribute("B", "A", "BOOLEAN")
quotient
generate_java_code
bool_value (false)
add_attribute("e", "C", "B")
add_class(INTEGER)
numerical_negation
add_command("B", "d", <<["d", "BOOLEAN"]>>)
type_check
equals
add_call_chain(<<c,c,A,a,BOOLEAN>>)
add_class(INTEGER)
int_value (47)
addition
add_query("INTEGER", "e", <<["B", "INTEGER"], ["D", "INTEGER"], ["B", "INTEGER"]>>, "d")
generate_java_code
numerical_negation
add_attribute("B", "B", "BOOLEAN")
logical_negation
subtraction
add_attribute("d", "C", "BOOLEAN")
add_call_chain(<<B,b>>)
add_attribute("A", "BOOLEAN", "BOOLEAN")
less_than
add_query("INTEGER", "c", <<["D", "BOOLEAN"], ["A", "BOOLEAN"], ["d", "A"], ["A", "BOOLEAN"], ["D", "C"], ["a", "INTEGER"]>>, "C")
add_class(d)
bool_value (false)
add_command("d", "B", <<["C", "BOOLEAN"]>>)
int_value (18)
bool_value (true)
add_call_chain(<<INTEGER,B,b>>)
add_call_chain(<<D,a,a,B>>)
bool_value (true)
add_call_chain(<<d,a,B,a,INTEGER>>)
add_call_chain(<<D,A,d,d,INTEGER,B,D>>)
add_class(a)
numerical_negation
add_query("c", "A", <<["d", "BOOLEAN"], ["c", "INTEGER"], ["A", "INTEGER"], ["A", "BOOLEAN"], ["A", "b"], ["D", "D"], ["c", "d"], ["A", "A"], ["a", "INTEGER"]>>, "b")
add_command("d", "C", <<["B", "a"], ["c", "B"]>>)
add_query("C", "A", <<["B", "BOOLEAN"], ["D", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["C", "e"], ["b", "b"], ["A", "BOOLEAN"]>>, "a")
add_call_chain(<<a,A,c,c,B,C>>)
int_value (25)
bool_value (false)
numerical_negation
conjunction
addition
add_call_chain(<<e,b,c,C,e,b>>)
add_call_chain(<<a,B,C>>)
greater_than
add_attribute("c", "A", "b")
add_call_chain(<<BOOLEAN,A,B,b,a,A,D,C>>)
int_value (25)
logical_negation
add_attribute("B", "BOOLEAN", "BOOLEAN")
addition
type_check
int_value (3)
add_call_chain(<<c,C,B,A,A,D>>)
bool_value (true)
generate_java_code
add_call_chain(<<B,A,B,d,b,a>>)
conjunction
add_command("d", "c", <<["d", "BOOLEAN"], ["D", "c"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["A", "c"], ["d", "BOOLEAN"], ["a", "BOOLEAN"], ["e", "BOOLEAN"]>>)
add_class(b)
int_value (26)
disjunction
logical_negation
int_value (20)
add_call_chain(<<e,d,C,A>>)
numerical_negation
add_class(A)
add_command("e", "c", <<["C", "BOOLEAN"], ["A", "BOOLEAN"], ["e", "INTEGER"], ["c", "A"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["a", "BOOLEAN"]>>)
add_query("INTEGER", "b", <<["B", "BOOLEAN"], ["b", "INTEGER"], ["b", "BOOLEAN"], ["e", "B"], ["d", "BOOLEAN"], ["D", "BOOLEAN"]>>, "e")
add_call_chain(<<d,b,c,INTEGER>>)
type_check
add_attribute("B", "d", "BOOLEAN")
logical_negation
equals
add_attribute("B", "e", "BOOLEAN")
add_call_chain(<<B,D,INTEGER,A,A,C>>)
add_command("a", "INTEGER", <<["INTEGER", "INTEGER"]>>)
add_command("D", "BOOLEAN", <<["A", "A"], ["b", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["C", "C"]>>)
logical_negation
add_attribute("a", "B", "BOOLEAN")
add_class(A)
int_value (14)
add_class(D)
add_query("B", "b", <<["c", "BOOLEAN"], ["INTEGER", "C"], ["d", "D"], ["a", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>, "D")
add_call_chain(<<e,BOOLEAN,C,D,B,b,C,D,B>>)
add_class(A)
bool_value (true)
add_command("c", "e", <<["b", "c"], ["D", "INTEGER"], ["c", "BOOLEAN"], ["a", "C"], ["d", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "INTEGER"], ["a", "a"], ["A", "INTEGER"]>>)
equals
add_attribute("INTEGER", "D", "BOOLEAN")
add_call_chain(<<B,A,A>>)
add_attribute("A", "b", "BOOLEAN")
bool_value (false)
add_attribute("c", "c", "INTEGER")
add_command("a", "B", <<["BOOLEAN", "A"], ["c", "BOOLEAN"], ["e", "d"]>>)
logical_negation
add_query("D", "e", <<["A", "INTEGER"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "b"], ["BOOLEAN", "BOOLEAN"]>>, "INTEGER")
greater_than
bool_value (false)
add_query("C", "D", <<["C", "INTEGER"]>>, "B")
add_class(INTEGER)
add_query("BOOLEAN", "B", <<["a", "INTEGER"], ["INTEGER", "INTEGER"], ["C", "INTEGER"], ["d", "INTEGER"], ["d", "INTEGER"], ["d", "BOOLEAN"], ["C", "INTEGER"]>>, "c")
type_check
add_attribute("D", "d", "INTEGER")
int_value (48)
add_command("D", "A", <<["e", "INTEGER"], ["INTEGER", "BOOLEAN"], ["C", "INTEGER"], ["a", "D"], ["a", "INTEGER"], ["b", "D"], ["A", "INTEGER"], ["A", "e"]>>)
modulo
disjunction
int_value (25)
add_command("d", "d", <<["C", "BOOLEAN"], ["c", "b"], ["A", "e"], ["D", "BOOLEAN"], ["d", "INTEGER"], ["b", "e"], ["a", "INTEGER"], ["d", "e"], ["A", "BOOLEAN"]>>)
logical_negation
add_attribute("INTEGER", "e", "e")
less_than
type_check
int_value (42)
add_attribute("B", "a", "BOOLEAN")
add_call_chain(<<A,e,a>>)
add_query("b", "C", <<["c", "BOOLEAN"], ["a", "e"], ["d", "A"], ["BOOLEAN", "e"], ["D", "INTEGER"], ["D", "a"], ["B", "INTEGER"], ["c", "BOOLEAN"]>>, "e")
add_command("e", "A", <<["a", "INTEGER"], ["a", "BOOLEAN"], ["D", "INTEGER"], ["e", "B"]>>)
logical_negation
bool_value (false)
add_call_chain(<<b,C>>)
bool_value (true)
add_class(BOOLEAN)
logical_negation
add_command("C", "e", <<["C", "C"], ["e", "b"], ["B", "INTEGER"]>>)
modulo
conjunction
add_command("d", "a", <<["C", "INTEGER"], ["e", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["B", "INTEGER"]>>)
add_command("A", "A", <<["d", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["A", "INTEGER"]>>)
add_query("INTEGER", "C", <<["C", "c"], ["D", "INTEGER"], ["b", "INTEGER"], ["e", "INTEGER"]>>, "C")
add_command("c", "C", <<["b", "BOOLEAN"], ["c", "INTEGER"], ["A", "INTEGER"], ["B", "INTEGER"], ["A", "e"], ["d", "c"], ["b", "D"], ["A", "BOOLEAN"]>>)
int_value (13)
add_command("d", "e", <<["A", "INTEGER"], ["D", "BOOLEAN"], ["d", "B"], ["b", "a"], ["BOOLEAN", "BOOLEAN"], ["e", "INTEGER"], ["B", "c"]>>)
add_call_chain(<<e,D,d>>)
add_call_chain(<<A,A,A,b,C,b,a,c>>)
add_command("c", "b", <<["A", "BOOLEAN"], ["D", "b"], ["c", "INTEGER"]>>)
numerical_negation
bool_value (true)
equals
add_attribute("D", "C", "BOOLEAN")
add_attribute("D", "d", "INTEGER")
int_value (41)
add_attribute("C", "INTEGER", "BOOLEAN")
subtraction
less_than
add_call_chain(<<C,a,d>>)
add_call_chain(<<D,INTEGER,C,d,b>>)
bool_value (true)
