add_call_chain(<<a,C,B,e,d,A>>)
add_call_chain(<<B,c,B>>)
add_call_chain(<<C,B,b,C>>)
bool_value (true)
add_class(C)
int_value (45)
logical_negation
generate_java_code
int_value (44)
numerical_negation
int_value (2)
bool_value (true)
modulo
numerical_negation
numerical_negation
bool_value (false)
numerical_negation
generate_java_code
add_attribute("a", "b", "INTEGER")
add_class(A)
add_call_chain(<<e>>)
add_call_chain(<<b,A,a,d,C,a,c>>)
add_query("B", "c", <<["B", "e"], ["A", "INTEGER"], ["D", "B"], ["BOOLEAN", "d"], ["e", "d"], ["B", "d"], ["B", "BOOLEAN"], ["D", "e"], ["A", "INTEGER"]>>, "INTEGER")
add_command("e", "B", <<["INTEGER", "INTEGER"], ["INTEGER", "B"], ["A", "BOOLEAN"], ["d", "d"], ["INTEGER", "INTEGER"]>>)
add_class(BOOLEAN)
int_value (12)
add_attribute("e", "a", "INTEGER")
add_command("D", "B", <<["A", "INTEGER"]>>)
int_value (4)
type_check
add_command("D", "D", <<["d", "BOOLEAN"], ["D", "D"], ["B", "BOOLEAN"], ["A", "BOOLEAN"], ["d", "C"], ["D", "BOOLEAN"], ["d", "INTEGER"], ["b", "d"]>>)
add_attribute("D", "b", "INTEGER")
add_class(d)
bool_value (false)
addition
add_class(D)
add_call_chain(<<c,a>>)
logical_negation
add_command("d", "b", <<["B", "INTEGER"], ["d", "BOOLEAN"], ["d", "e"], ["B", "INTEGER"], ["B", "INTEGER"], ["d", "INTEGER"]>>)
add_query("b", "B", <<["e", "C"], ["c", "d"], ["d", "INTEGER"], ["e", "INTEGER"]>>, "a")
disjunction
int_value (39)
add_call_chain(<<b>>)
int_value (39)
add_call_chain(<<d,BOOLEAN>>)
int_value (28)
add_attribute("INTEGER", "A", "D")
generate_java_code
add_query("A", "D", <<["c", "INTEGER"], ["e", "D"], ["e", "e"], ["C", "INTEGER"], ["a", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["C", "INTEGER"], ["b", "B"]>>, "B")
add_call_chain(<<e,B,c,e,c>>)
add_call_chain(<<d,D,e,INTEGER,B,a,B>>)
type_check
disjunction
numerical_negation
generate_java_code
add_attribute("B", "C", "BOOLEAN")
bool_value (false)
int_value (46)
logical_negation
add_call_chain(<<D,c,c,a,A,D,c,C>>)
bool_value (false)
generate_java_code
int_value (24)
bool_value (false)
logical_negation
less_than
bool_value (true)
int_value (41)
type_check
add_command("B", "a", <<["d", "INTEGER"], ["A", "BOOLEAN"], ["a", "INTEGER"]>>)
add_command("D", "d", <<["B", "C"], ["D", "BOOLEAN"], ["e", "BOOLEAN"], ["b", "BOOLEAN"], ["C", "INTEGER"], ["b", "C"], ["a", "d"], ["d", "INTEGER"], ["c", "d"]>>)
add_attribute("c", "e", "BOOLEAN")
generate_java_code
type_check
multiplication
numerical_negation
add_class(B)
add_command("A", "D", <<["A", "a"], ["A", "b"], ["INTEGER", "D"], ["BOOLEAN", "BOOLEAN"], ["b", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "BOOLEAN"], ["B", "BOOLEAN"]>>)
add_attribute("a", "B", "INTEGER")
generate_java_code
bool_value (false)
bool_value (false)
add_call_chain(<<d,INTEGER,b,C,C>>)
int_value (14)
logical_negation
less_than
add_call_chain(<<C,A,D,A,e,C>>)
numerical_negation
type_check
add_attribute("b", "A", "C")
logical_negation
add_attribute("B", "d", "BOOLEAN")
logical_negation
add_call_chain(<<A,C,e,a>>)
add_call_chain(<<A,B,BOOLEAN,BOOLEAN,INTEGER,d,C>>)
numerical_negation
logical_negation
add_command("a", "A", <<["INTEGER", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["C", "BOOLEAN"], ["B", "BOOLEAN"]>>)
add_class(INTEGER)
add_command("B", "c", <<["BOOLEAN", "BOOLEAN"], ["D", "INTEGER"], ["INTEGER", "INTEGER"], ["D", "C"]>>)
bool_value (true)
add_command("d", "D", <<["D", "BOOLEAN"], ["C", "c"]>>)
add_call_chain(<<B,BOOLEAN,a,D,INTEGER>>)
add_call_chain(<<c,c,A,a,d,B,C>>)
add_call_chain(<<e,e,C>>)
add_query("A", "A", <<["b", "INTEGER"], ["BOOLEAN", "INTEGER"], ["b", "BOOLEAN"], ["a", "c"], ["a", "BOOLEAN"], ["e", "B"], ["C", "BOOLEAN"]>>, "A")
add_command("C", "C", <<["C", "INTEGER"], ["D", "a"], ["A", "INTEGER"], ["B", "e"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["D", "a"], ["b", "INTEGER"]>>)
add_call_chain(<<d,A,B>>)
add_call_chain(<<C,b,BOOLEAN,e>>)
numerical_negation
add_attribute("C", "c", "D")
bool_value (false)
logical_negation
add_command("INTEGER", "a", <<["d", "B"], ["A", "D"], ["d", "D"], ["e", "A"], ["BOOLEAN", "INTEGER"], ["e", "A"], ["d", "C"]>>)
int_value (27)
numerical_negation
int_value (42)
conjunction
numerical_negation
add_attribute("d", "e", "BOOLEAN")
add_command("B", "b", <<["B", "e"], ["D", "INTEGER"], ["B", "e"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["D", "INTEGER"]>>)
add_query("INTEGER", "C", <<["b", "D"], ["D", "INTEGER"], ["e", "INTEGER"], ["BOOLEAN", "INTEGER"]>>, "A")
add_query("C", "b", <<["a", "INTEGER"], ["b", "A"], ["A", "BOOLEAN"], ["e", "e"], ["c", "e"], ["a", "B"], ["c", "INTEGER"], ["b", "d"]>>, "e")
add_class(C)
add_call_chain(<<b,D,b,c,B,D>>)
add_call_chain(<<D,INTEGER,D,d>>)
int_value (30)
add_call_chain(<<INTEGER>>)
bool_value (false)
numerical_negation
numerical_negation
logical_negation
add_call_chain(<<A,d,c,A>>)
numerical_negation
int_value (36)
int_value (40)
numerical_negation
add_call_chain(<<D,d,a,A,c,d,e,a>>)
add_query("C", "A", <<["a", "INTEGER"], ["C", "D"], ["d", "INTEGER"], ["b", "INTEGER"], ["D", "c"], ["B", "d"], ["BOOLEAN", "a"], ["e", "BOOLEAN"]>>, "INTEGER")
conjunction
int_value (44)
add_attribute("A", "c", "e")
less_than
add_call_chain(<<b,d,D,a,b,A,b,e,A>>)
add_call_chain(<<B>>)
add_query("D", "C", <<["a", "BOOLEAN"], ["B", "INTEGER"]>>, "A")
less_than
add_command("a", "e", <<["c", "d"]>>)
add_attribute("a", "a", "INTEGER")
add_command("B", "C", <<["b", "INTEGER"], ["A", "INTEGER"]>>)
add_call_chain(<<b,a,e,e,A,d>>)
numerical_negation
add_command("C", "A", <<["c", "INTEGER"]>>)
add_query("BOOLEAN", "D", <<["INTEGER", "BOOLEAN"], ["C", "a"], ["d", "D"], ["C", "INTEGER"], ["c", "BOOLEAN"]>>, "c")
add_query("D", "D", <<["C", "BOOLEAN"], ["B", "BOOLEAN"], ["e", "BOOLEAN"]>>, "C")
numerical_negation
add_call_chain(<<a,b,C,d,C,INTEGER,d>>)
add_attribute("d", "C", "BOOLEAN")
logical_negation
bool_value (true)
int_value (45)
bool_value (false)
add_class(INTEGER)
logical_negation
add_attribute("b", "c", "INTEGER")
add_call_chain(<<C,B,C,c,e,c>>)
int_value (33)
add_attribute("A", "B", "INTEGER")
int_value (34)
bool_value (false)
add_call_chain(<<B,BOOLEAN,D,c,B,d>>)
greater_than
numerical_negation
add_attribute("D", "A", "INTEGER")
less_than
disjunction
add_call_chain(<<d,B,D,c,d,C,C,INTEGER>>)
