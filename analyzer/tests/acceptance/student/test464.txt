add_call_chain(<<c>>)
numerical_negation
numerical_negation
type_check
less_than
bool_value (false)
add_query("C", "BOOLEAN", <<["e", "INTEGER"], ["C", "INTEGER"]>>, "D")
int_value (11)
add_call_chain(<<C,B,b,C,C,A,e,B,D>>)
add_class(C)
numerical_negation
logical_negation
logical_negation
add_query("A", "e", <<["d", "BOOLEAN"], ["b", "BOOLEAN"], ["BOOLEAN", "C"], ["D", "BOOLEAN"], ["INTEGER", "C"], ["b", "C"]>>, "D")
generate_java_code
int_value (28)
add_command("a", "INTEGER", <<["A", "A"], ["D", "INTEGER"], ["a", "A"], ["B", "BOOLEAN"], ["e", "C"]>>)
add_query("C", "e", <<["d", "C"], ["INTEGER", "D"], ["D", "BOOLEAN"]>>, "d")
add_query("e", "INTEGER", <<["D", "BOOLEAN"], ["A", "BOOLEAN"], ["c", "c"], ["A", "B"], ["C", "BOOLEAN"]>>, "c")
add_call_chain(<<B,B,e,B,D,e,B,a>>)
int_value (48)
type_check
int_value (40)
logical_negation
add_query("B", "D", <<["C", "BOOLEAN"], ["b", "INTEGER"], ["b", "BOOLEAN"], ["c", "INTEGER"]>>, "C")
numerical_negation
bool_value (true)
int_value (7)
bool_value (true)
modulo
bool_value (true)
add_call_chain(<<C,e,B,C,B,B,b>>)
add_call_chain(<<D,d,B,b,d,C,e,a,a>>)
add_attribute("B", "C", "BOOLEAN")
logical_negation
subtraction
add_attribute("INTEGER", "B", "INTEGER")
add_command("BOOLEAN", "A", <<["D", "INTEGER"], ["b", "INTEGER"], ["D", "INTEGER"], ["C", "A"]>>)
numerical_negation
add_query("d", "B", <<["INTEGER", "INTEGER"]>>, "BOOLEAN")
numerical_negation
add_attribute("c", "B", "INTEGER")
addition
add_command("e", "INTEGER", <<["INTEGER", "INTEGER"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["BOOLEAN", "C"], ["a", "INTEGER"], ["d", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["D", "c"]>>)
logical_negation
add_call_chain(<<b,C,b,d,D,d,BOOLEAN,d>>)
int_value (25)
numerical_negation
add_call_chain(<<B,b,B,B,C,a,e>>)
add_attribute("c", "D", "BOOLEAN")
add_call_chain(<<A,c,c,d,D,a,a,INTEGER,e>>)
int_value (26)
add_command("e", "b", <<["B", "BOOLEAN"], ["a", "c"], ["INTEGER", "D"], ["A", "BOOLEAN"], ["b", "BOOLEAN"]>>)
add_call_chain(<<d,B>>)
add_call_chain(<<C,d,b,D,d,B>>)
add_call_chain(<<e,e,a,b,D,a,e,c>>)
numerical_negation
add_call_chain(<<C,D,C,C>>)
add_call_chain(<<d,B,A,e,C,D,INTEGER,b>>)
numerical_negation
logical_negation
int_value (12)
add_query("a", "C", <<["A", "A"], ["b", "BOOLEAN"], ["e", "BOOLEAN"], ["B", "INTEGER"], ["d", "D"], ["c", "BOOLEAN"], ["e", "C"], ["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>, "c")
int_value (41)
numerical_negation
logical_negation
addition
add_call_chain(<<b,B,B,D,A>>)
add_call_chain(<<C,A,B,A,e,B,b,b,c>>)
greater_than
bool_value (false)
add_attribute("c", "C", "INTEGER")
add_call_chain(<<B,b,C,D,d,B,C>>)
add_call_chain(<<b>>)
add_class(A)
add_command("C", "C", <<["C", "d"], ["d", "BOOLEAN"], ["e", "INTEGER"]>>)
greater_than
generate_java_code
add_command("a", "b", <<["e", "INTEGER"], ["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "INTEGER"], ["D", "BOOLEAN"], ["INTEGER", "b"], ["a", "INTEGER"], ["INTEGER", "BOOLEAN"]>>)
add_call_chain(<<A,b,b,d,c,INTEGER,BOOLEAN,D,C>>)
bool_value (true)
add_query("c", "B", <<["C", "D"], ["d", "D"], ["A", "INTEGER"], ["c", "c"], ["INTEGER", "BOOLEAN"], ["c", "D"], ["a", "INTEGER"], ["B", "INTEGER"], ["D", "INTEGER"]>>, "INTEGER")
equals
type_check
int_value (22)
disjunction
add_call_chain(<<D>>)
add_call_chain(<<B,A,A,d,e,a>>)
add_attribute("C", "a", "BOOLEAN")
add_class(a)
add_call_chain(<<a,D,B>>)
add_attribute("C", "e", "INTEGER")
add_query("A", "c", <<["e", "BOOLEAN"], ["B", "D"], ["INTEGER", "A"], ["INTEGER", "BOOLEAN"], ["C", "INTEGER"], ["D", "INTEGER"], ["D", "BOOLEAN"], ["D", "A"]>>, "BOOLEAN")
less_than
type_check
add_query("B", "B", <<["INTEGER", "B"], ["d", "e"], ["d", "c"], ["C", "A"], ["d", "INTEGER"], ["INTEGER", "A"], ["a", "INTEGER"]>>, "a")
subtraction
type_check
multiplication
int_value (46)
add_attribute("a", "BOOLEAN", "e")
int_value (9)
logical_negation
bool_value (false)
int_value (20)
quotient
int_value (8)
logical_negation
add_class(c)
less_than
int_value (9)
add_query("d", "BOOLEAN", <<["INTEGER", "e"], ["C", "A"], ["INTEGER", "BOOLEAN"], ["C", "INTEGER"], ["D", "INTEGER"], ["INTEGER", "A"], ["D", "INTEGER"], ["A", "BOOLEAN"]>>, "b")
logical_negation
add_command("A", "C", <<["a", "INTEGER"], ["D", "INTEGER"], ["e", "C"], ["B", "c"], ["B", "BOOLEAN"]>>)
add_class(c)
add_query("d", "B", <<["c", "INTEGER"], ["C", "D"], ["b", "INTEGER"], ["C", "INTEGER"], ["b", "d"]>>, "b")
add_class(a)
add_call_chain(<<d,INTEGER,c,D,B,D,e>>)
equals
add_call_chain(<<b,d,a,C,D,INTEGER,b,d>>)
int_value (45)
greater_than
disjunction
add_query("c", "c", <<["C", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["c", "BOOLEAN"], ["D", "B"], ["INTEGER", "BOOLEAN"], ["D", "INTEGER"], ["a", "BOOLEAN"], ["d", "BOOLEAN"]>>, "BOOLEAN")
type_check
add_attribute("C", "d", "INTEGER")
add_query("D", "C", <<["B", "BOOLEAN"], ["b", "INTEGER"], ["D", "A"], ["d", "C"], ["d", "BOOLEAN"]>>, "C")
generate_java_code
add_call_chain(<<a,b,C,D,D>>)
add_attribute("e", "C", "INTEGER")
add_call_chain(<<BOOLEAN>>)
numerical_negation
add_query("e", "B", <<["INTEGER", "INTEGER"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "BOOLEAN"]>>, "A")
logical_negation
generate_java_code
add_call_chain(<<e,B,B,d>>)
logical_negation
logical_negation
numerical_negation
bool_value (false)
int_value (25)
generate_java_code
add_query("C", "d", <<["a", "INTEGER"], ["d", "INTEGER"], ["C", "c"], ["D", "INTEGER"]>>, "B")
bool_value (false)
add_command("INTEGER", "B", <<["e", "BOOLEAN"], ["b", "BOOLEAN"]>>)
add_command("D", "b", <<["B", "C"], ["BOOLEAN", "INTEGER"], ["d", "A"], ["c", "INTEGER"], ["B", "BOOLEAN"], ["a", "BOOLEAN"]>>)
type_check
add_class(b)
add_call_chain(<<e,B,INTEGER,C,c,INTEGER,B>>)
add_call_chain(<<D,c,a,D,BOOLEAN,BOOLEAN,c,B,e>>)
add_query("B", "A", <<["D", "e"]>>, "C")
add_command("D", "b", <<["B", "B"], ["C", "A"], ["e", "BOOLEAN"], ["A", "C"], ["e", "BOOLEAN"], ["d", "INTEGER"]>>)
add_query("b", "d", <<["INTEGER", "BOOLEAN"], ["A", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["c", "BOOLEAN"]>>, "A")
add_attribute("B", "d", "INTEGER")
add_command("B", "d", <<["e", "b"], ["C", "A"], ["A", "c"], ["INTEGER", "a"], ["A", "e"], ["b", "INTEGER"], ["C", "BOOLEAN"], ["c", "A"]>>)
add_call_chain(<<C,C,b,b>>)
type_check
add_query("C", "C", <<["e", "D"], ["B", "b"], ["c", "INTEGER"], ["B", "BOOLEAN"], ["b", "BOOLEAN"]>>, "a")
bool_value (true)
add_command("D", "b", <<["d", "BOOLEAN"], ["B", "INTEGER"], ["A", "INTEGER"], ["a", "BOOLEAN"], ["e", "INTEGER"], ["b", "BOOLEAN"], ["A", "INTEGER"], ["A", "INTEGER"], ["e", "D"]>>)
add_call_chain(<<a,a,c,a>>)
int_value (13)
add_command("A", "c", <<["D", "a"], ["d", "BOOLEAN"], ["A", "INTEGER"]>>)
add_command("b", "b", <<["a", "INTEGER"], ["e", "BOOLEAN"], ["e", "BOOLEAN"]>>)
bool_value (false)
add_query("A", "B", <<["C", "BOOLEAN"], ["D", "BOOLEAN"], ["c", "d"], ["A", "e"], ["c", "BOOLEAN"], ["e", "D"], ["d", "INTEGER"]>>, "d")
int_value (43)
add_class(b)
add_attribute("a", "D", "e")
logical_negation
logical_negation
logical_negation
add_class(b)
add_class(D)
add_attribute("c", "A", "INTEGER")
bool_value (true)
add_call_chain(<<C>>)
add_command("A", "e", <<["b", "BOOLEAN"], ["d", "b"], ["c", "INTEGER"], ["b", "INTEGER"]>>)
int_value (41)
add_attribute("B", "B", "INTEGER")
modulo
generate_java_code
add_command("c", "BOOLEAN", <<["c", "INTEGER"], ["c", "d"], ["D", "INTEGER"], ["d", "INTEGER"], ["e", "A"], ["B", "BOOLEAN"]>>)
add_call_chain(<<d,D,b>>)
add_command("C", "INTEGER", <<["C", "INTEGER"], ["d", "C"], ["c", "c"], ["A", "B"], ["a", "C"]>>)
int_value (21)
less_than
less_than
bool_value (true)
add_query("C", "e", <<["a", "INTEGER"], ["b", "BOOLEAN"], ["d", "A"], ["BOOLEAN", "d"], ["D", "INTEGER"], ["A", "BOOLEAN"], ["C", "B"], ["e", "b"], ["A", "INTEGER"]>>, "c")
equals
add_call_chain(<<BOOLEAN,c>>)
add_command("BOOLEAN", "a", <<["c", "INTEGER"], ["e", "BOOLEAN"], ["b", "e"], ["A", "INTEGER"], ["b", "INTEGER"], ["e", "INTEGER"], ["b", "c"], ["B", "INTEGER"], ["INTEGER", "BOOLEAN"]>>)
add_call_chain(<<e,INTEGER,D,e,C,B>>)
generate_java_code
bool_value (true)
bool_value (false)
bool_value (false)
add_command("A", "INTEGER", <<["INTEGER", "INTEGER"]>>)
bool_value (false)
generate_java_code
logical_negation
add_command("C", "d", <<["INTEGER", "c"]>>)
equals
type_check
conjunction
add_attribute("a", "a", "D")
numerical_negation
add_class(a)
numerical_negation
quotient
int_value (29)
add_call_chain(<<a,d,C>>)
add_command("D", "A", <<["BOOLEAN", "BOOLEAN"], ["e", "BOOLEAN"]>>)
greater_than
int_value (14)
type_check
bool_value (true)
subtraction
add_query("b", "A", <<["d", "INTEGER"], ["D", "b"], ["D", "e"], ["b", "D"]>>, "A")
add_attribute("C", "c", "b")
add_command("BOOLEAN", "d", <<["D", "INTEGER"], ["B", "BOOLEAN"], ["e", "INTEGER"], ["a", "e"]>>)
add_query("c", "BOOLEAN", <<["BOOLEAN", "B"], ["a", "INTEGER"]>>, "a")
conjunction
numerical_negation
logical_negation
add_query("e", "BOOLEAN", <<["B", "INTEGER"], ["d", "INTEGER"], ["A", "e"], ["b", "INTEGER"], ["b", "INTEGER"]>>, "d")
logical_negation
int_value (29)
add_query("A", "e", <<["A", "B"], ["B", "D"], ["INTEGER", "INTEGER"], ["D", "BOOLEAN"], ["b", "d"], ["A", "C"], ["d", "BOOLEAN"]>>, "D")
add_attribute("c", "B", "BOOLEAN")
add_command("e", "BOOLEAN", <<["e", "BOOLEAN"], ["D", "A"], ["C", "INTEGER"], ["B", "INTEGER"], ["b", "BOOLEAN"], ["e", "INTEGER"], ["C", "C"]>>)
add_class(c)
add_query("BOOLEAN", "A", <<["INTEGER", "b"], ["D", "BOOLEAN"], ["B", "INTEGER"]>>, "e")
add_class(INTEGER)
type_check
int_value (24)
add_call_chain(<<b,d,e,B>>)
type_check
add_attribute("a", "d", "BOOLEAN")
bool_value (false)
add_query("c", "b", <<["C", "INTEGER"], ["b", "C"], ["c", "BOOLEAN"], ["INTEGER", "C"], ["d", "BOOLEAN"]>>, "d")
int_value (4)
add_command("D", "e", <<["a", "e"], ["d", "INTEGER"], ["c", "BOOLEAN"], ["D", "INTEGER"], ["b", "BOOLEAN"]>>)
add_attribute("INTEGER", "D", "INTEGER")
add_call_chain(<<e,C,d,C,B,A>>)
generate_java_code
bool_value (false)
int_value (3)
less_than
add_call_chain(<<B>>)
logical_negation
equals
bool_value (true)
add_query("INTEGER", "B", <<["A", "INTEGER"], ["D", "BOOLEAN"], ["a", "C"], ["A", "INTEGER"], ["B", "c"]>>, "C")
add_query("d", "D", <<["d", "BOOLEAN"], ["C", "BOOLEAN"], ["D", "BOOLEAN"], ["e", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["A", "INTEGER"], ["A", "BOOLEAN"], ["C", "INTEGER"], ["C", "BOOLEAN"]>>, "c")
int_value (38)
add_command("C", "B", <<["D", "INTEGER"], ["d", "BOOLEAN"], ["c", "BOOLEAN"], ["D", "C"], ["d", "INTEGER"]>>)
type_check
add_call_chain(<<A,D,D,d,B,A,B>>)
generate_java_code
type_check
quotient
