add_call_chain(<<e,B,INTEGER,A>>)
less_than
add_call_chain(<<d,a,B,C,B,A,C,D,B>>)
disjunction
type_check
numerical_negation
add_call_chain(<<b,b>>)
add_attribute("D", "A", "INTEGER")
add_call_chain(<<INTEGER,c,A,A,D,c,a>>)
add_query("d", "c", <<["D", "BOOLEAN"], ["BOOLEAN", "C"], ["c", "D"], ["d", "BOOLEAN"], ["a", "INTEGER"]>>, "a")
generate_java_code
add_command("c", "C", <<["B", "e"]>>)
add_attribute("D", "C", "BOOLEAN")
add_call_chain(<<B,C,e,A,e,D>>)
add_call_chain(<<c,A,b,a,B,c,A,D>>)
add_attribute("A", "A", "INTEGER")
quotient
add_attribute("C", "D", "BOOLEAN")
quotient
add_call_chain(<<c,C,INTEGER,d,e,c>>)
logical_negation
greater_than
modulo
bool_value (false)
conjunction
add_command("C", "c", <<["a", "BOOLEAN"], ["A", "INTEGER"], ["C", "INTEGER"], ["d", "INTEGER"], ["c", "B"]>>)
add_call_chain(<<B,e,d,e,c,a,b,e>>)
add_call_chain(<<INTEGER,INTEGER>>)
add_query("D", "b", <<["D", "B"], ["A", "c"], ["c", "INTEGER"], ["B", "INTEGER"], ["c", "C"], ["b", "C"], ["D", "BOOLEAN"]>>, "C")
quotient
bool_value (true)
add_class(b)
add_attribute("c", "A", "C")
add_command("INTEGER", "a", <<["d", "INTEGER"], ["C", "e"], ["a", "INTEGER"]>>)
type_check
numerical_negation
generate_java_code
add_call_chain(<<b,d,BOOLEAN,b,e,B,A,A,e>>)
add_command("A", "A", <<["A", "D"], ["INTEGER", "BOOLEAN"], ["C", "c"], ["A", "D"], ["e", "b"], ["C", "BOOLEAN"], ["A", "BOOLEAN"], ["A", "B"]>>)
add_class(B)
add_call_chain(<<d,C>>)
add_call_chain(<<d,B,A,A,A,a,a>>)
add_attribute("C", "e", "BOOLEAN")
add_attribute("D", "b", "INTEGER")
add_query("D", "a", <<["BOOLEAN", "BOOLEAN"], ["e", "BOOLEAN"], ["b", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "INTEGER"]>>, "d")
add_command("A", "e", <<["b", "INTEGER"], ["d", "INTEGER"], ["B", "INTEGER"], ["D", "BOOLEAN"]>>)
int_value (12)
add_attribute("B", "INTEGER", "BOOLEAN")
bool_value (true)
logical_negation
add_class(c)
multiplication
addition
type_check
numerical_negation
add_call_chain(<<b,B>>)
int_value (37)
add_call_chain(<<c,C>>)
add_attribute("BOOLEAN", "B", "INTEGER")
add_query("INTEGER", "C", <<["c", "BOOLEAN"], ["d", "INTEGER"], ["e", "BOOLEAN"], ["a", "BOOLEAN"]>>, "a")
add_query("INTEGER", "D", <<["a", "D"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "INTEGER"], ["c", "d"], ["B", "a"], ["e", "BOOLEAN"], ["d", "INTEGER"], ["A", "INTEGER"]>>, "e")
generate_java_code
add_query("c", "e", <<["C", "BOOLEAN"]>>, "a")
int_value (28)
add_call_chain(<<b,D>>)
modulo
add_command("B", "C", <<["d", "INTEGER"], ["c", "d"], ["C", "INTEGER"], ["INTEGER", "BOOLEAN"], ["B", "B"], ["C", "b"]>>)
add_query("A", "BOOLEAN", <<["e", "INTEGER"], ["b", "INTEGER"], ["d", "D"], ["C", "INTEGER"], ["C", "c"], ["a", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "INTEGER"]>>, "C")
add_attribute("C", "B", "BOOLEAN")
bool_value (false)
addition
add_query("BOOLEAN", "C", <<["D", "d"], ["A", "C"], ["A", "INTEGER"], ["c", "INTEGER"]>>, "B")
logical_negation
add_call_chain(<<B,B,b>>)
multiplication
add_attribute("b", "D", "BOOLEAN")
add_query("INTEGER", "D", <<["d", "BOOLEAN"]>>, "BOOLEAN")
add_class(B)
add_attribute("b", "D", "INTEGER")
add_query("e", "D", <<["B", "BOOLEAN"], ["BOOLEAN", "C"], ["A", "b"]>>, "e")
int_value (32)
numerical_negation
add_query("C", "e", <<["c", "INTEGER"], ["a", "B"], ["INTEGER", "INTEGER"], ["e", "INTEGER"], ["c", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "BOOLEAN"], ["BOOLEAN", "d"], ["c", "e"]>>, "b")
add_command("B", "c", <<["B", "INTEGER"], ["B", "INTEGER"], ["A", "c"], ["D", "BOOLEAN"], ["b", "BOOLEAN"]>>)
int_value (43)
logical_negation
add_query("b", "c", <<["B", "INTEGER"], ["d", "BOOLEAN"], ["A", "BOOLEAN"], ["INTEGER", "A"], ["c", "BOOLEAN"], ["B", "INTEGER"], ["A", "e"], ["b", "BOOLEAN"]>>, "INTEGER")
add_query("C", "INTEGER", <<["B", "D"], ["A", "BOOLEAN"], ["A", "BOOLEAN"], ["A", "BOOLEAN"]>>, "a")
add_call_chain(<<e,BOOLEAN,C>>)
numerical_negation
add_attribute("D", "a", "BOOLEAN")
add_attribute("c", "B", "INTEGER")
greater_than
logical_negation
logical_negation
less_than
add_call_chain(<<c,B,D>>)
int_value (26)
bool_value (false)
add_call_chain(<<a>>)
add_command("b", "B", <<["A", "BOOLEAN"], ["c", "INTEGER"], ["c", "a"]>>)
add_attribute("b", "C", "BOOLEAN")
int_value (15)
add_query("INTEGER", "e", <<["A", "BOOLEAN"], ["a", "INTEGER"]>>, "C")
add_query("D", "a", <<["A", "INTEGER"], ["c", "BOOLEAN"], ["c", "B"], ["c", "C"], ["INTEGER", "BOOLEAN"]>>, "e")
add_call_chain(<<A,a,A,b>>)
add_command("B", "a", <<["c", "BOOLEAN"], ["C", "BOOLEAN"], ["b", "BOOLEAN"], ["A", "D"], ["a", "c"], ["c", "BOOLEAN"], ["b", "INTEGER"], ["C", "BOOLEAN"], ["BOOLEAN", "A"]>>)
add_command("e", "BOOLEAN", <<["d", "INTEGER"], ["b", "d"], ["C", "INTEGER"], ["c", "BOOLEAN"], ["e", "c"], ["d", "C"], ["D", "D"], ["INTEGER", "B"], ["A", "BOOLEAN"]>>)
generate_java_code
greater_than
add_query("a", "A", <<["A", "INTEGER"], ["b", "INTEGER"], ["d", "INTEGER"], ["b", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["C", "INTEGER"]>>, "B")
add_call_chain(<<D,c,b,B,b,d,B>>)
bool_value (true)
conjunction
add_command("C", "b", <<["B", "BOOLEAN"], ["c", "INTEGER"], ["b", "C"], ["B", "BOOLEAN"], ["INTEGER", "INTEGER"], ["C", "INTEGER"], ["INTEGER", "D"], ["e", "BOOLEAN"]>>)
equals
disjunction
numerical_negation
generate_java_code
add_attribute("D", "A", "INTEGER")
int_value (19)
add_query("c", "A", <<["C", "e"], ["BOOLEAN", "a"]>>, "D")
logical_negation
add_call_chain(<<D,a,D,e,e>>)
add_query("d", "c", <<["D", "BOOLEAN"], ["INTEGER", "INTEGER"], ["d", "B"], ["INTEGER", "INTEGER"], ["b", "BOOLEAN"], ["d", "b"], ["a", "INTEGER"]>>, "BOOLEAN")
add_command("C", "B", <<["B", "BOOLEAN"], ["B", "INTEGER"], ["c", "INTEGER"], ["D", "BOOLEAN"], ["c", "INTEGER"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["d", "INTEGER"]>>)
add_attribute("A", "e", "B")
add_attribute("b", "A", "INTEGER")
add_call_chain(<<D>>)
type_check
add_command("a", "d", <<["c", "INTEGER"], ["e", "BOOLEAN"], ["B", "A"], ["D", "BOOLEAN"], ["a", "A"], ["B", "b"], ["c", "BOOLEAN"], ["c", "C"], ["B", "BOOLEAN"]>>)
add_query("e", "e", <<["b", "INTEGER"]>>, "A")
disjunction
bool_value (true)
add_call_chain(<<INTEGER,c,a,B,d,b>>)
add_call_chain(<<BOOLEAN,C>>)
generate_java_code
add_call_chain(<<C,d,B,INTEGER,INTEGER,A,C>>)
multiplication
conjunction
modulo
add_call_chain(<<D,a,INTEGER>>)
generate_java_code
add_call_chain(<<C,A,c,a,D,c>>)
add_class(D)
bool_value (false)
add_call_chain(<<B,d,b,C>>)
greater_than
add_command("b", "e", <<["D", "INTEGER"]>>)
add_class(B)
logical_negation
int_value (44)
add_command("C", "e", <<["a", "BOOLEAN"], ["b", "BOOLEAN"], ["d", "BOOLEAN"], ["a", "D"], ["D", "INTEGER"], ["INTEGER", "INTEGER"], ["c", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>)
add_attribute("a", "D", "INTEGER")
logical_negation
add_call_chain(<<D>>)
type_check
int_value (6)
bool_value (false)
add_attribute("INTEGER", "A", "A")
add_class(d)
type_check
numerical_negation
add_command("BOOLEAN", "D", <<["D", "e"], ["A", "INTEGER"], ["d", "B"]>>)
numerical_negation
add_command("C", "D", <<["A", "B"], ["a", "INTEGER"], ["b", "BOOLEAN"], ["B", "INTEGER"]>>)
equals
add_attribute("D", "e", "BOOLEAN")
add_attribute("A", "B", "BOOLEAN")
add_call_chain(<<C,D,a,BOOLEAN,INTEGER,d,D,b>>)
add_class(a)
conjunction
add_call_chain(<<e,d,b,A,D,A>>)
add_query("C", "D", <<["B", "BOOLEAN"], ["D", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["d", "BOOLEAN"], ["b", "INTEGER"], ["B", "BOOLEAN"], ["a", "INTEGER"], ["c", "INTEGER"], ["c", "BOOLEAN"]>>, "C")
logical_negation
numerical_negation
bool_value (false)
add_call_chain(<<b,e,d>>)
logical_negation
add_call_chain(<<C,a,b,c,a,a,c,D,a>>)
conjunction
add_command("c", "B", <<["A", "B"], ["A", "BOOLEAN"], ["BOOLEAN", "A"], ["A", "BOOLEAN"], ["D", "INTEGER"]>>)
numerical_negation
add_call_chain(<<B,B>>)
add_attribute("A", "d", "B")
multiplication
add_query("b", "B", <<["C", "BOOLEAN"], ["c", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "BOOLEAN"], ["C", "INTEGER"], ["D", "BOOLEAN"], ["D", "B"], ["d", "C"]>>, "d")
add_call_chain(<<d,e,c,B>>)
logical_negation
numerical_negation
bool_value (true)
numerical_negation
bool_value (false)
add_call_chain(<<d,B,e,e,B,C,C,c,BOOLEAN>>)
numerical_negation
add_command("A", "c", <<["B", "a"], ["e", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "BOOLEAN"], ["B", "INTEGER"], ["A", "INTEGER"], ["D", "INTEGER"]>>)
add_call_chain(<<e,B,c,B,BOOLEAN,B>>)
add_call_chain(<<d>>)
add_command("d", "A", <<["b", "INTEGER"], ["b", "INTEGER"], ["d", "BOOLEAN"], ["C", "B"], ["C", "INTEGER"], ["C", "BOOLEAN"], ["d", "INTEGER"]>>)
add_command("A", "A", <<["e", "BOOLEAN"]>>)
add_query("B", "C", <<["D", "d"], ["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"]>>, "d")
generate_java_code
generate_java_code
numerical_negation
int_value (6)
add_call_chain(<<c,A,D,B,b>>)
disjunction
generate_java_code
add_command("B", "e", <<["A", "BOOLEAN"], ["a", "INTEGER"], ["a", "INTEGER"], ["a", "e"], ["e", "BOOLEAN"], ["b", "BOOLEAN"]>>)
bool_value (true)
add_attribute("A", "e", "INTEGER")
numerical_negation
add_call_chain(<<BOOLEAN>>)
add_class(b)
add_call_chain(<<C,c,BOOLEAN>>)
add_call_chain(<<a,B,C,d>>)
bool_value (true)
bool_value (false)
logical_negation
add_query("D", "b", <<["a", "BOOLEAN"], ["A", "INTEGER"], ["c", "BOOLEAN"], ["d", "INTEGER"], ["d", "A"], ["e", "INTEGER"]>>, "C")
add_command("A", "B", <<["D", "d"], ["B", "BOOLEAN"], ["B", "INTEGER"]>>)
add_class(B)
add_call_chain(<<a,e,b,INTEGER,C,e,C,c,C>>)
add_query("c", "e", <<["b", "B"], ["A", "BOOLEAN"], ["A", "INTEGER"], ["B", "d"], ["INTEGER", "INTEGER"], ["D", "BOOLEAN"], ["D", "A"], ["c", "a"]>>, "C")
add_query("B", "a", <<["c", "BOOLEAN"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["d", "INTEGER"]>>, "d")
add_attribute("a", "b", "INTEGER")
addition
disjunction
add_class(b)
add_query("D", "c", <<["D", "BOOLEAN"]>>, "D")
equals
add_attribute("A", "D", "e")
add_attribute("d", "b", "INTEGER")
bool_value (false)
add_query("C", "B", <<["b", "INTEGER"], ["a", "BOOLEAN"], ["b", "INTEGER"], ["B", "BOOLEAN"], ["C", "INTEGER"], ["e", "D"], ["a", "A"], ["b", "D"]>>, "e")
add_call_chain(<<INTEGER,D,a,C,b,A,a,B>>)
add_call_chain(<<A,C,D,a,D,C,d,a,B>>)
add_command("e", "C", <<["b", "BOOLEAN"]>>)
add_call_chain(<<D>>)
add_query("A", "A", <<["b", "C"], ["b", "BOOLEAN"], ["a", "INTEGER"], ["A", "INTEGER"], ["D", "BOOLEAN"], ["a", "A"], ["A", "a"]>>, "A")
int_value (26)
disjunction
generate_java_code
logical_negation
logical_negation
