add_attribute("c", "e", "BOOLEAN")
generate_java_code
numerical_negation
add_command("d", "d", <<["b", "d"], ["C", "INTEGER"], ["D", "INTEGER"], ["d", "BOOLEAN"], ["BOOLEAN", "b"], ["A", "d"], ["A", "e"]>>)
logical_negation
add_call_chain(<<c,e,B,C,BOOLEAN,B,B,a,a>>)
add_command("B", "B", <<["e", "INTEGER"], ["A", "BOOLEAN"], ["D", "d"]>>)
add_class(c)
add_call_chain(<<b,c,a>>)
type_check
addition
add_query("b", "C", <<["e", "BOOLEAN"], ["c", "C"], ["B", "BOOLEAN"], ["b", "d"], ["a", "INTEGER"], ["A", "INTEGER"], ["d", "INTEGER"], ["C", "INTEGER"], ["C", "b"]>>, "B")
add_call_chain(<<D,A,C,C,C>>)
bool_value (false)
int_value (37)
greater_than
add_call_chain(<<c,d,a,D,D,INTEGER,C>>)
add_class(d)
add_call_chain(<<a,INTEGER>>)
greater_than
subtraction
type_check
add_attribute("a", "B", "BOOLEAN")
less_than
bool_value (false)
add_class(d)
bool_value (true)
add_query("A", "A", <<["e", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["d", "BOOLEAN"], ["b", "d"], ["a", "BOOLEAN"], ["e", "INTEGER"], ["e", "BOOLEAN"]>>, "a")
bool_value (false)
add_call_chain(<<e,d,A,B,C,d,BOOLEAN>>)
multiplication
modulo
add_class(D)
add_command("a", "D", <<["B", "BOOLEAN"], ["a", "B"], ["c", "INTEGER"], ["e", "INTEGER"], ["c", "INTEGER"]>>)
generate_java_code
add_call_chain(<<A,d,D,BOOLEAN,D,C>>)
type_check
int_value (39)
add_call_chain(<<c>>)
add_attribute("INTEGER", "c", "BOOLEAN")
add_query("e", "a", <<["A", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "B"], ["C", "INTEGER"], ["a", "INTEGER"]>>, "b")
type_check
bool_value (false)
quotient
add_class(BOOLEAN)
bool_value (true)
add_attribute("b", "A", "INTEGER")
add_call_chain(<<e,c,B,c,e,a,c>>)
add_command("D", "B", <<["INTEGER", "BOOLEAN"], ["C", "e"], ["C", "e"], ["a", "e"], ["B", "BOOLEAN"], ["e", "INTEGER"], ["BOOLEAN", "INTEGER"]>>)
add_class(BOOLEAN)
add_command("INTEGER", "c", <<["c", "BOOLEAN"], ["D", "INTEGER"], ["B", "A"]>>)
add_call_chain(<<D,D,C,D>>)
numerical_negation
type_check
add_query("c", "A", <<["d", "INTEGER"], ["D", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["INTEGER", "INTEGER"], ["INTEGER", "BOOLEAN"], ["d", "BOOLEAN"], ["a", "INTEGER"]>>, "e")
conjunction
subtraction
generate_java_code
add_attribute("b", "B", "BOOLEAN")
type_check
multiplication
add_class(a)
conjunction
bool_value (false)
add_class(b)
logical_negation
add_call_chain(<<a,C,B,C,C,A,BOOLEAN,A>>)
int_value (8)
add_attribute("e", "B", "INTEGER")
int_value (41)
add_attribute("c", "BOOLEAN", "INTEGER")
int_value (13)
add_command("A", "C", <<["A", "INTEGER"], ["A", "BOOLEAN"], ["a", "BOOLEAN"], ["C", "a"], ["e", "INTEGER"], ["D", "BOOLEAN"], ["e", "BOOLEAN"]>>)
add_query("a", "INTEGER", <<["B", "B"], ["INTEGER", "BOOLEAN"], ["e", "BOOLEAN"], ["e", "a"], ["A", "BOOLEAN"], ["INTEGER", "INTEGER"], ["A", "INTEGER"]>>, "A")
add_call_chain(<<e,A,C,A,INTEGER,D,B,B,B>>)
add_query("d", "d", <<["e", "A"], ["b", "INTEGER"], ["d", "INTEGER"], ["d", "INTEGER"], ["c", "BOOLEAN"]>>, "b")
less_than
generate_java_code
add_command("BOOLEAN", "B", <<["e", "BOOLEAN"], ["C", "B"], ["B", "a"], ["b", "BOOLEAN"], ["a", "D"], ["B", "INTEGER"], ["C", "D"], ["C", "BOOLEAN"], ["A", "BOOLEAN"]>>)
add_class(C)
add_class(BOOLEAN)
type_check
numerical_negation
add_class(A)
add_attribute("b", "d", "a")
add_attribute("e", "INTEGER", "INTEGER")
type_check
equals
conjunction
bool_value (false)
add_query("A", "C", <<["e", "BOOLEAN"], ["c", "INTEGER"], ["c", "C"], ["B", "INTEGER"]>>, "B")
numerical_negation
add_query("D", "e", <<["d", "INTEGER"], ["c", "INTEGER"]>>, "d")
add_command("d", "b", <<["D", "BOOLEAN"], ["B", "BOOLEAN"], ["b", "INTEGER"], ["e", "D"], ["B", "BOOLEAN"], ["d", "INTEGER"], ["b", "b"], ["A", "D"]>>)
add_command("b", "c", <<["a", "INTEGER"], ["BOOLEAN", "C"]>>)
add_call_chain(<<B,a,c,A,a>>)
add_call_chain(<<A,c,D,d,D,b>>)
int_value (38)
add_attribute("b", "BOOLEAN", "BOOLEAN")
type_check
type_check
add_query("D", "b", <<["C", "BOOLEAN"], ["d", "BOOLEAN"], ["d", "C"], ["c", "B"], ["BOOLEAN", "INTEGER"], ["B", "C"], ["a", "d"], ["e", "BOOLEAN"], ["C", "c"]>>, "A")
generate_java_code
int_value (37)
bool_value (true)
less_than
generate_java_code
add_query("C", "c", <<["C", "INTEGER"], ["INTEGER", "BOOLEAN"], ["A", "BOOLEAN"], ["C", "INTEGER"], ["c", "BOOLEAN"]>>, "b")
add_attribute("c", "C", "BOOLEAN")
add_attribute("C", "INTEGER", "C")
type_check
greater_than
add_query("e", "D", <<["A", "BOOLEAN"], ["b", "INTEGER"], ["A", "BOOLEAN"], ["e", "INTEGER"], ["e", "BOOLEAN"], ["d", "INTEGER"], ["a", "c"], ["B", "INTEGER"]>>, "a")
logical_negation
add_call_chain(<<d,A,d,e,B,b,C>>)
subtraction
type_check
add_call_chain(<<C,a,INTEGER,c>>)
int_value (39)
generate_java_code
type_check
add_call_chain(<<A,e>>)
logical_negation
add_command("D", "d", <<["e", "d"], ["B", "INTEGER"], ["A", "INTEGER"], ["d", "BOOLEAN"], ["INTEGER", "D"], ["BOOLEAN", "BOOLEAN"], ["INTEGER", "INTEGER"], ["d", "BOOLEAN"], ["c", "INTEGER"]>>)
bool_value (true)
int_value (38)
logical_negation
greater_than
add_attribute("a", "C", "b")
add_query("INTEGER", "d", <<["B", "b"], ["e", "BOOLEAN"], ["A", "INTEGER"]>>, "BOOLEAN")
bool_value (true)
conjunction
multiplication
bool_value (false)
bool_value (true)
less_than
int_value (48)
add_call_chain(<<d,C,a,e,d,e,b>>)
bool_value (true)
disjunction
bool_value (true)
logical_negation
add_command("C", "d", <<["A", "e"], ["a", "INTEGER"], ["C", "d"], ["C", "INTEGER"]>>)
add_class(b)
logical_negation
add_query("C", "B", <<["b", "e"], ["A", "BOOLEAN"], ["B", "BOOLEAN"], ["C", "INTEGER"], ["B", "INTEGER"]>>, "B")
add_call_chain(<<e,BOOLEAN,C,D,e,a,BOOLEAN,B,INTEGER>>)
conjunction
numerical_negation
add_command("c", "D", <<["B", "BOOLEAN"], ["d", "C"], ["e", "INTEGER"], ["c", "INTEGER"]>>)
add_call_chain(<<c>>)
add_query("e", "b", <<["C", "INTEGER"]>>, "A")
add_query("B", "C", <<["B", "INTEGER"], ["c", "e"], ["B", "d"], ["B", "B"], ["e", "INTEGER"], ["C", "BOOLEAN"], ["A", "INTEGER"]>>, "d")
bool_value (true)
int_value (32)
multiplication
add_command("c", "A", <<["e", "INTEGER"], ["d", "BOOLEAN"], ["A", "BOOLEAN"]>>)
add_call_chain(<<b,A,BOOLEAN,c,B,d>>)
int_value (42)
logical_negation
bool_value (false)
conjunction
int_value (12)
add_call_chain(<<BOOLEAN>>)
type_check
numerical_negation
numerical_negation
quotient
logical_negation
add_call_chain(<<b>>)
type_check
add_query("D", "A", <<["e", "d"], ["c", "INTEGER"], ["D", "BOOLEAN"], ["d", "BOOLEAN"], ["a", "INTEGER"], ["c", "A"], ["c", "D"], ["b", "BOOLEAN"], ["d", "BOOLEAN"]>>, "C")
add_attribute("e", "D", "b")
add_command("BOOLEAN", "B", <<["e", "INTEGER"], ["A", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "INTEGER"], ["c", "BOOLEAN"]>>)
add_query("d", "A", <<["BOOLEAN", "INTEGER"], ["D", "BOOLEAN"], ["B", "BOOLEAN"]>>, "C")
bool_value (false)
int_value (35)
bool_value (true)
add_class(B)
int_value (14)
add_attribute("c", "D", "INTEGER")
int_value (18)
int_value (25)
logical_negation
add_call_chain(<<B,C,c,e,C,B,d,b>>)
add_query("b", "b", <<["a", "e"], ["B", "BOOLEAN"], ["D", "BOOLEAN"], ["b", "D"], ["B", "BOOLEAN"], ["d", "b"]>>, "a")
add_command("d", "b", <<["d", "INTEGER"], ["A", "c"], ["c", "INTEGER"], ["b", "BOOLEAN"], ["A", "INTEGER"], ["B", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "INTEGER"]>>)
add_command("a", "C", <<["C", "BOOLEAN"], ["C", "BOOLEAN"]>>)
add_query("b", "B", <<["e", "INTEGER"], ["C", "INTEGER"], ["INTEGER", "INTEGER"], ["B", "INTEGER"], ["B", "A"], ["b", "BOOLEAN"], ["b", "BOOLEAN"]>>, "C")
logical_negation
add_class(B)
add_call_chain(<<C,a,b,BOOLEAN,b,D,C>>)
add_command("d", "a", <<["B", "INTEGER"], ["B", "INTEGER"], ["A", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "INTEGER"], ["D", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>)
less_than
numerical_negation
add_call_chain(<<C,c,d,C,e,c>>)
add_query("C", "C", <<["INTEGER", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>, "e")
numerical_negation
add_call_chain(<<c,D,B,D,e,INTEGER,b,D,a>>)
add_class(C)
add_attribute("a", "b", "INTEGER")
add_call_chain(<<e,d,a,D,D,C,e,A,d>>)
add_query("d", "c", <<["c", "e"], ["BOOLEAN", "INTEGER"], ["D", "A"], ["B", "INTEGER"], ["b", "BOOLEAN"], ["a", "BOOLEAN"], ["a", "INTEGER"]>>, "A")
type_check
logical_negation
add_attribute("a", "c", "BOOLEAN")
add_call_chain(<<D,B,D,c,e,d>>)
equals
generate_java_code
bool_value (false)
subtraction
add_attribute("C", "B", "A")
numerical_negation
logical_negation
add_query("a", "c", <<["D", "BOOLEAN"], ["c", "D"], ["INTEGER", "INTEGER"], ["C", "INTEGER"]>>, "e")
bool_value (false)
int_value (40)
generate_java_code
add_call_chain(<<a,B,d,d,BOOLEAN,e,d>>)
add_attribute("e", "INTEGER", "B")
add_class(A)
add_call_chain(<<BOOLEAN,BOOLEAN,BOOLEAN,a,e,c,a>>)
add_call_chain(<<C,INTEGER,b,b,A,BOOLEAN,A,D>>)
add_call_chain(<<c,A,D,d,c,b>>)
add_attribute("e", "B", "a")
add_command("b", "d", <<["a", "a"], ["a", "BOOLEAN"]>>)
add_attribute("D", "C", "A")
addition
numerical_negation
generate_java_code
add_command("C", "C", <<["D", "BOOLEAN"]>>)
add_call_chain(<<e,C,a,INTEGER>>)
add_query("C", "INTEGER", <<["A", "C"], ["B", "INTEGER"]>>, "e")
add_command("b", "C", <<["a", "BOOLEAN"], ["d", "INTEGER"], ["d", "BOOLEAN"], ["C", "INTEGER"], ["C", "B"], ["d", "BOOLEAN"], ["B", "C"]>>)
add_attribute("e", "a", "D")
add_call_chain(<<c,B,A,d,C,D,c,a>>)
add_call_chain(<<B,e,B,b,b,a,e>>)
add_class(b)
modulo
add_attribute("e", "a", "BOOLEAN")
disjunction
add_command("BOOLEAN", "A", <<["BOOLEAN", "b"], ["D", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["C", "A"], ["a", "b"], ["C", "INTEGER"], ["b", "BOOLEAN"]>>)
add_query("D", "c", <<["INTEGER", "INTEGER"], ["BOOLEAN", "b"], ["B", "B"], ["B", "D"], ["e", "BOOLEAN"], ["B", "BOOLEAN"]>>, "A")
add_attribute("B", "C", "d")
numerical_negation
int_value (26)
int_value (36)
add_attribute("C", "C", "BOOLEAN")
add_call_chain(<<d,a,A,B>>)
add_attribute("e", "D", "e")
add_attribute("B", "B", "BOOLEAN")
type_check
int_value (41)
add_class(C)
bool_value (true)
generate_java_code
add_call_chain(<<e>>)
bool_value (false)
add_call_chain(<<D,b,e,B,C,A,A>>)
add_call_chain(<<c>>)
numerical_negation
add_attribute("C", "e", "e")
numerical_negation
bool_value (true)
numerical_negation
add_query("d", "C", <<["C", "b"], ["INTEGER", "INTEGER"], ["INTEGER", "INTEGER"], ["A", "INTEGER"]>>, "A")
add_query("A", "INTEGER", <<["INTEGER", "BOOLEAN"], ["b", "INTEGER"], ["e", "BOOLEAN"], ["C", "INTEGER"]>>, "INTEGER")
generate_java_code
generate_java_code
less_than
numerical_negation
