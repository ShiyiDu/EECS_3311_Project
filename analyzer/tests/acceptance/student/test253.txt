numerical_negation
type_check
conjunction
add_call_chain(<<B,a,A,D,B,D,b,D,D>>)
generate_java_code
add_attribute("c", "b", "BOOLEAN")
add_class(a)
add_command("C", "C", <<["BOOLEAN", "INTEGER"]>>)
add_query("B", "a", <<["D", "BOOLEAN"], ["A", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["b", "BOOLEAN"], ["a", "D"], ["A", "BOOLEAN"], ["c", "D"], ["d", "d"]>>, "b")
generate_java_code
add_command("a", "A", <<["D", "a"], ["C", "BOOLEAN"], ["C", "INTEGER"], ["B", "BOOLEAN"], ["BOOLEAN", "C"]>>)
add_query("B", "b", <<["d", "INTEGER"], ["D", "e"], ["e", "BOOLEAN"]>>, "B")
int_value (7)
add_attribute("a", "b", "INTEGER")
addition
numerical_negation
add_call_chain(<<A,BOOLEAN,a>>)
add_call_chain(<<b,d,c,BOOLEAN,e>>)
int_value (27)
add_query("e", "a", <<["A", "BOOLEAN"], ["D", "C"], ["D", "BOOLEAN"]>>, "A")
multiplication
add_call_chain(<<b,c>>)
logical_negation
add_call_chain(<<D,c,C,b,B>>)
int_value (13)
type_check
numerical_negation
bool_value (true)
numerical_negation
type_check
add_call_chain(<<c,D,D,A>>)
add_query("B", "d", <<["C", "b"]>>, "e")
add_class(INTEGER)
logical_negation
numerical_negation
logical_negation
logical_negation
bool_value (true)
int_value (37)
conjunction
add_query("INTEGER", "e", <<["D", "BOOLEAN"], ["A", "C"], ["e", "INTEGER"], ["e", "BOOLEAN"], ["A", "INTEGER"]>>, "C")
add_query("C", "D", <<["C", "BOOLEAN"], ["C", "INTEGER"], ["c", "c"], ["A", "INTEGER"], ["d", "D"]>>, "b")
add_call_chain(<<d,e,BOOLEAN,INTEGER,b,B,b,INTEGER,c>>)
generate_java_code
type_check
type_check
add_attribute("e", "c", "B")
add_query("INTEGER", "d", <<["A", "INTEGER"], ["A", "INTEGER"]>>, "INTEGER")
add_call_chain(<<e,e,D,e>>)
bool_value (true)
add_call_chain(<<INTEGER,D>>)
addition
numerical_negation
add_query("INTEGER", "B", <<["B", "INTEGER"], ["d", "b"], ["B", "INTEGER"], ["a", "e"], ["c", "INTEGER"], ["INTEGER", "INTEGER"], ["c", "D"]>>, "c")
conjunction
add_call_chain(<<D,d,c,INTEGER,A,A>>)
add_attribute("c", "d", "INTEGER")
add_class(A)
numerical_negation
add_call_chain(<<INTEGER,B,e,D,C,c,e,a>>)
add_command("B", "A", <<["e", "C"], ["D", "INTEGER"], ["c", "b"], ["d", "INTEGER"], ["B", "BOOLEAN"], ["d", "C"], ["B", "BOOLEAN"]>>)
multiplication
add_call_chain(<<e,c,e,e,A,INTEGER,c>>)
add_query("BOOLEAN", "b", <<["B", "BOOLEAN"], ["d", "BOOLEAN"]>>, "D")
add_class(c)
add_command("e", "INTEGER", <<["b", "INTEGER"], ["b", "a"], ["e", "INTEGER"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["B", "e"], ["c", "BOOLEAN"], ["D", "BOOLEAN"], ["c", "INTEGER"]>>)
add_call_chain(<<c,BOOLEAN,a,d,b>>)
generate_java_code
subtraction
greater_than
add_attribute("C", "d", "A")
bool_value (true)
add_class(d)
add_command("B", "e", <<["a", "INTEGER"], ["A", "BOOLEAN"], ["e", "INTEGER"], ["D", "INTEGER"], ["c", "D"], ["a", "INTEGER"]>>)
add_class(C)
numerical_negation
disjunction
add_class(A)
logical_negation
add_attribute("B", "D", "BOOLEAN")
numerical_negation
bool_value (true)
add_call_chain(<<d,BOOLEAN,A,c,b>>)
add_attribute("d", "A", "INTEGER")
bool_value (false)
add_command("b", "C", <<["D", "INTEGER"], ["d", "INTEGER"], ["A", "C"], ["BOOLEAN", "D"], ["C", "b"]>>)
type_check
add_attribute("D", "C", "INTEGER")
add_query("D", "b", <<["B", "B"]>>, "INTEGER")
bool_value (true)
add_call_chain(<<D,d,BOOLEAN,B,A,c,BOOLEAN>>)
conjunction
numerical_negation
multiplication
add_query("C", "B", <<["a", "BOOLEAN"], ["BOOLEAN", "b"], ["A", "BOOLEAN"], ["e", "BOOLEAN"], ["B", "INTEGER"], ["INTEGER", "BOOLEAN"]>>, "e")
logical_negation
add_call_chain(<<B>>)
add_call_chain(<<a,B,B,C>>)
add_call_chain(<<a,d,a,e,a,C,e,B>>)
add_command("e", "BOOLEAN", <<["e", "INTEGER"], ["b", "b"], ["D", "INTEGER"], ["d", "c"], ["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "INTEGER"]>>)
int_value (5)
add_attribute("c", "b", "BOOLEAN")
bool_value (true)
add_call_chain(<<A,e,e>>)
add_command("a", "d", <<["B", "INTEGER"], ["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"]>>)
type_check
addition
int_value (30)
logical_negation
logical_negation
add_query("e", "A", <<["a", "C"], ["INTEGER", "a"], ["C", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>, "d")
add_command("A", "B", <<["d", "BOOLEAN"], ["A", "BOOLEAN"], ["B", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["c", "INTEGER"]>>)
greater_than
add_class(A)
bool_value (false)
add_attribute("INTEGER", "C", "INTEGER")
generate_java_code
add_query("d", "C", <<["D", "c"]>>, "D")
equals
add_command("a", "C", <<["C", "e"]>>)
numerical_negation
add_call_chain(<<A,A,C,b,c,c,B,A>>)
add_query("c", "e", <<["D", "BOOLEAN"], ["B", "INTEGER"], ["A", "INTEGER"], ["D", "BOOLEAN"], ["a", "BOOLEAN"], ["b", "BOOLEAN"], ["A", "INTEGER"], ["B", "D"], ["A", "INTEGER"]>>, "B")
add_query("d", "d", <<["b", "INTEGER"], ["A", "BOOLEAN"], ["D", "BOOLEAN"], ["C", "a"], ["a", "C"]>>, "c")
bool_value (false)
int_value (20)
add_query("INTEGER", "a", <<["B", "INTEGER"]>>, "B")
add_query("A", "C", <<["D", "b"], ["e", "BOOLEAN"], ["INTEGER", "INTEGER"]>>, "d")
add_attribute("D", "d", "e")
add_command("e", "A", <<["INTEGER", "BOOLEAN"], ["D", "BOOLEAN"], ["d", "BOOLEAN"], ["e", "INTEGER"], ["INTEGER", "c"]>>)
add_command("D", "B", <<["c", "D"], ["B", "BOOLEAN"], ["INTEGER", "c"], ["A", "INTEGER"], ["C", "INTEGER"], ["e", "INTEGER"], ["e", "INTEGER"], ["d", "INTEGER"], ["b", "BOOLEAN"]>>)
generate_java_code
int_value (40)
int_value (43)
add_attribute("BOOLEAN", "BOOLEAN", "INTEGER")
bool_value (true)
add_call_chain(<<D,d,A,C,A,e,d>>)
add_call_chain(<<B,b,C,C,BOOLEAN>>)
bool_value (false)
add_command("c", "A", <<["D", "BOOLEAN"], ["D", "BOOLEAN"], ["e", "BOOLEAN"], ["e", "BOOLEAN"], ["d", "C"], ["A", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "BOOLEAN"]>>)
disjunction
int_value (12)
numerical_negation
int_value (10)
equals
addition
logical_negation
int_value (37)
add_command("d", "C", <<["d", "BOOLEAN"], ["e", "INTEGER"], ["C", "INTEGER"], ["d", "BOOLEAN"], ["C", "INTEGER"], ["d", "BOOLEAN"], ["e", "INTEGER"]>>)
add_query("b", "e", <<["a", "INTEGER"], ["b", "BOOLEAN"]>>, "BOOLEAN")
add_attribute("c", "c", "INTEGER")
type_check
add_query("d", "B", <<["d", "c"], ["B", "B"], ["b", "D"], ["INTEGER", "INTEGER"]>>, "D")
bool_value (true)
bool_value (false)
bool_value (true)
add_class(c)
add_call_chain(<<D,d,a,B,INTEGER,e>>)
add_query("BOOLEAN", "A", <<["e", "D"], ["B", "d"], ["a", "INTEGER"], ["C", "C"], ["D", "INTEGER"], ["c", "c"], ["A", "INTEGER"]>>, "INTEGER")
add_attribute("d", "C", "BOOLEAN")
bool_value (false)
add_attribute("a", "c", "B")
int_value (14)
add_call_chain(<<C,B,A>>)
subtraction
addition
add_attribute("B", "c", "BOOLEAN")
bool_value (false)
add_call_chain(<<b,a,D,A>>)
int_value (49)
logical_negation
bool_value (true)
numerical_negation
quotient
add_command("INTEGER", "D", <<["d", "c"], ["b", "BOOLEAN"], ["D", "BOOLEAN"]>>)
add_call_chain(<<B,C>>)
generate_java_code
add_query("A", "INTEGER", <<["b", "a"], ["INTEGER", "INTEGER"], ["c", "BOOLEAN"], ["B", "e"]>>, "e")
add_query("B", "d", <<["e", "INTEGER"], ["B", "BOOLEAN"], ["a", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["d", "INTEGER"], ["e", "b"]>>, "C")
logical_negation
add_call_chain(<<INTEGER,C,e,A>>)
bool_value (false)
int_value (9)
logical_negation
logical_negation
bool_value (true)
type_check
add_command("C", "d", <<["c", "INTEGER"]>>)
int_value (32)
add_command("b", "d", <<["e", "INTEGER"], ["d", "b"], ["BOOLEAN", "a"], ["D", "INTEGER"]>>)
logical_negation
add_command("A", "a", <<["D", "INTEGER"], ["BOOLEAN", "INTEGER"], ["A", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["e", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "BOOLEAN"], ["B", "INTEGER"]>>)
add_call_chain(<<BOOLEAN,c,D,d,b,D,C,BOOLEAN,e>>)
add_query("a", "a", <<["D", "BOOLEAN"], ["d", "b"], ["D", "BOOLEAN"], ["a", "BOOLEAN"], ["b", "INTEGER"]>>, "d")
int_value (23)
numerical_negation
int_value (48)
numerical_negation
bool_value (true)
numerical_negation
bool_value (false)
logical_negation
int_value (34)
int_value (11)
int_value (45)
type_check
numerical_negation
bool_value (false)
logical_negation
generate_java_code
type_check
add_call_chain(<<C,INTEGER>>)
add_query("B", "d", <<["A", "BOOLEAN"], ["b", "INTEGER"], ["e", "d"], ["D", "INTEGER"], ["e", "e"]>>, "a")
add_query("C", "D", <<["A", "INTEGER"], ["INTEGER", "INTEGER"], ["D", "BOOLEAN"], ["b", "BOOLEAN"], ["e", "INTEGER"], ["d", "d"]>>, "BOOLEAN")
logical_negation
type_check
conjunction
add_call_chain(<<d,INTEGER,a,a>>)
