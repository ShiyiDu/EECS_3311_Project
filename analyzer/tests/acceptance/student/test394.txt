int_value (40)
logical_negation
add_command("A", "a", <<["A", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["b", "INTEGER"], ["e", "D"], ["C", "INTEGER"], ["BOOLEAN", "INTEGER"], ["c", "BOOLEAN"]>>)
equals
equals
add_call_chain(<<d,a,D,e>>)
conjunction
int_value (1)
add_call_chain(<<c,A,a,C,d,A,e,B>>)
type_check
bool_value (false)
numerical_negation
add_class(e)
add_attribute("d", "d", "BOOLEAN")
int_value (10)
add_attribute("INTEGER", "c", "INTEGER")
add_call_chain(<<C,e,D,a,BOOLEAN,c,D,D,a>>)
numerical_negation
add_call_chain(<<B,B>>)
subtraction
add_attribute("b", "B", "BOOLEAN")
bool_value (false)
add_call_chain(<<a,C,b,BOOLEAN,B>>)
int_value (7)
disjunction
less_than
logical_negation
add_class(e)
int_value (9)
add_attribute("a", "a", "INTEGER")
logical_negation
add_command("b", "A", <<["c", "e"], ["a", "A"], ["INTEGER", "INTEGER"], ["A", "INTEGER"], ["e", "INTEGER"], ["D", "INTEGER"]>>)
add_command("A", "B", <<["a", "BOOLEAN"], ["a", "BOOLEAN"], ["B", "INTEGER"], ["B", "A"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "INTEGER"]>>)
conjunction
generate_java_code
add_command("b", "d", <<["c", "INTEGER"], ["e", "BOOLEAN"], ["A", "BOOLEAN"], ["d", "C"], ["d", "INTEGER"], ["e", "BOOLEAN"], ["e", "INTEGER"], ["c", "INTEGER"], ["a", "INTEGER"]>>)
add_query("d", "B", <<["BOOLEAN", "a"], ["e", "C"], ["b", "BOOLEAN"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["b", "BOOLEAN"], ["C", "A"], ["d", "BOOLEAN"]>>, "INTEGER")
disjunction
generate_java_code
add_class(a)
generate_java_code
less_than
add_call_chain(<<e,C>>)
logical_negation
bool_value (false)
conjunction
add_attribute("b", "b", "BOOLEAN")
bool_value (false)
add_call_chain(<<d,C,B,B,B,INTEGER>>)
logical_negation
int_value (34)
addition
add_call_chain(<<a,C,a,A>>)
conjunction
add_command("d", "c", <<["A", "INTEGER"], ["d", "BOOLEAN"], ["INTEGER", "INTEGER"], ["b", "BOOLEAN"]>>)
add_call_chain(<<INTEGER,INTEGER,c>>)
conjunction
int_value (3)
add_call_chain(<<c,A,e,INTEGER,d,B,b>>)
disjunction
add_query("C", "INTEGER", <<["a", "e"], ["D", "C"], ["a", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["C", "BOOLEAN"]>>, "c")
add_attribute("c", "INTEGER", "INTEGER")
disjunction
add_command("B", "D", <<["D", "INTEGER"], ["C", "INTEGER"], ["b", "C"], ["c", "BOOLEAN"]>>)
add_attribute("B", "c", "INTEGER")
add_query("b", "c", <<["d", "B"]>>, "b")
multiplication
generate_java_code
generate_java_code
generate_java_code
bool_value (true)
add_call_chain(<<B,C,D,INTEGER,d,b,b,c>>)
type_check
add_attribute("b", "C", "d")
add_call_chain(<<C,BOOLEAN,c,d,C>>)
numerical_negation
add_attribute("B", "B", "INTEGER")
add_command("c", "c", <<["A", "d"], ["a", "B"], ["e", "D"], ["b", "INTEGER"], ["B", "BOOLEAN"], ["e", "INTEGER"], ["d", "BOOLEAN"]>>)
numerical_negation
int_value (24)
int_value (21)
bool_value (true)
int_value (44)
add_command("b", "a", <<["c", "BOOLEAN"], ["B", "a"], ["a", "D"], ["d", "A"], ["B", "c"], ["D", "BOOLEAN"]>>)
conjunction
add_command("INTEGER", "D", <<["a", "D"], ["D", "C"], ["A", "d"]>>)
numerical_negation
disjunction
add_command("BOOLEAN", "B", <<["d", "INTEGER"], ["A", "INTEGER"]>>)
int_value (14)
add_class(B)
add_attribute("A", "c", "BOOLEAN")
add_attribute("a", "d", "INTEGER")
int_value (32)
int_value (5)
generate_java_code
add_call_chain(<<e>>)
equals
add_attribute("A", "A", "BOOLEAN")
numerical_negation
add_call_chain(<<c,d,a,B,C,d>>)
add_query("a", "INTEGER", <<["d", "a"], ["B", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["b", "C"], ["B", "INTEGER"], ["BOOLEAN", "D"], ["a", "BOOLEAN"]>>, "a")
numerical_negation
equals
add_call_chain(<<C,D,a,INTEGER,a,A,d,a,INTEGER>>)
int_value (5)
add_attribute("e", "B", "D")
numerical_negation
int_value (39)
add_query("INTEGER", "A", <<["d", "BOOLEAN"], ["e", "B"], ["BOOLEAN", "INTEGER"], ["B", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "INTEGER"], ["B", "BOOLEAN"], ["d", "d"], ["BOOLEAN", "INTEGER"]>>, "c")
add_attribute("a", "C", "INTEGER")
type_check
add_class(C)
add_class(C)
bool_value (true)
add_query("c", "c", <<["d", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["d", "BOOLEAN"]>>, "B")
int_value (16)
add_class(B)
int_value (38)
int_value (28)
logical_negation
numerical_negation
logical_negation
add_attribute("c", "B", "d")
add_call_chain(<<b,B,C>>)
add_command("b", "C", <<["b", "BOOLEAN"]>>)
generate_java_code
greater_than
add_query("C", "C", <<["a", "INTEGER"], ["A", "a"]>>, "d")
add_command("D", "c", <<["D", "INTEGER"], ["C", "INTEGER"], ["A", "INTEGER"]>>)
bool_value (false)
add_call_chain(<<B,d>>)
generate_java_code
add_attribute("INTEGER", "a", "BOOLEAN")
add_attribute("INTEGER", "D", "a")
add_call_chain(<<e,A>>)
add_command("b", "b", <<["a", "BOOLEAN"]>>)
bool_value (false)
add_call_chain(<<a,B,B,B,B,A>>)
bool_value (true)
generate_java_code
add_command("A", "b", <<["a", "e"], ["B", "INTEGER"]>>)
type_check
add_attribute("C", "e", "INTEGER")
disjunction
add_command("B", "A", <<["C", "B"], ["C", "B"]>>)
int_value (26)
add_call_chain(<<INTEGER>>)
type_check
generate_java_code
add_class(B)
modulo
conjunction
less_than
add_call_chain(<<D,c,b,D,c,d,b,D,A>>)
generate_java_code
add_class(a)
add_attribute("D", "BOOLEAN", "e")
int_value (18)
add_command("B", "b", <<["a", "INTEGER"], ["D", "B"], ["A", "INTEGER"], ["INTEGER", "C"], ["B", "D"], ["A", "a"]>>)
add_call_chain(<<d,e,a,e,BOOLEAN>>)
add_command("d", "d", <<["e", "c"], ["A", "INTEGER"], ["D", "a"], ["d", "c"], ["INTEGER", "INTEGER"], ["D", "INTEGER"], ["INTEGER", "b"]>>)
add_query("C", "D", <<["c", "INTEGER"], ["d", "A"], ["B", "INTEGER"], ["d", "INTEGER"], ["d", "INTEGER"], ["b", "a"], ["A", "BOOLEAN"], ["A", "INTEGER"]>>, "a")
generate_java_code
add_class(c)
add_call_chain(<<B,a,A,C,B,BOOLEAN,d>>)
add_query("c", "b", <<["c", "c"]>>, "c")
quotient
add_call_chain(<<D,b>>)
conjunction
conjunction
type_check
add_command("A", "d", <<["d", "BOOLEAN"], ["A", "c"], ["A", "INTEGER"], ["D", "INTEGER"], ["B", "BOOLEAN"], ["D", "e"], ["a", "BOOLEAN"], ["e", "INTEGER"]>>)
add_call_chain(<<e,e,a,c,a,b,c,BOOLEAN>>)
add_attribute("B", "A", "a")
add_call_chain(<<a,d,INTEGER,c,a,b,d,a,A>>)
logical_negation
add_query("c", "a", <<["b", "BOOLEAN"]>>, "e")
quotient
add_class(C)
add_call_chain(<<B,B,BOOLEAN,BOOLEAN,D,d,D,D,C>>)
add_call_chain(<<C>>)
add_call_chain(<<A,b>>)
logical_negation
add_class(b)
add_attribute("c", "e", "BOOLEAN")
type_check
greater_than
logical_negation
add_call_chain(<<a,BOOLEAN,a,d,C,e,A,D>>)
add_query("e", "D", <<["d", "C"], ["b", "BOOLEAN"]>>, "e")
add_query("D", "a", <<["BOOLEAN", "BOOLEAN"], ["C", "BOOLEAN"], ["B", "D"], ["a", "INTEGER"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["C", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["c", "INTEGER"]>>, "B")
add_command("C", "D", <<["b", "a"], ["D", "D"], ["a", "B"], ["C", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["b", "e"], ["D", "BOOLEAN"], ["a", "C"]>>)
add_call_chain(<<C,b,D>>)
int_value (43)
greater_than
add_query("B", "e", <<["A", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["b", "INTEGER"]>>, "a")
add_call_chain(<<b,A,B,a,C,e,C,D,A>>)
numerical_negation
add_command("b", "B", <<["e", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"], ["d", "INTEGER"], ["A", "C"], ["C", "INTEGER"]>>)
add_call_chain(<<D,d>>)
bool_value (true)
int_value (32)
add_query("A", "C", <<["e", "BOOLEAN"], ["b", "INTEGER"], ["C", "INTEGER"], ["d", "BOOLEAN"], ["C", "BOOLEAN"]>>, "a")
generate_java_code
add_attribute("C", "b", "a")
type_check
bool_value (false)
multiplication
