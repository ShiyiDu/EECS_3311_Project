type_check
add_query("e", "d", <<["e", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "c"], ["D", "d"], ["a", "BOOLEAN"], ["B", "INTEGER"], ["A", "INTEGER"]>>, "c")
generate_java_code
add_attribute("a", "B", "BOOLEAN")
add_class(a)
add_query("B", "b", <<["d", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "e"], ["B", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "BOOLEAN"]>>, "a")
add_call_chain(<<D,c,C,c,b,b,b>>)
add_command("D", "B", <<["C", "d"], ["D", "b"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["A", "INTEGER"], ["D", "B"], ["e", "INTEGER"]>>)
logical_negation
add_class(d)
generate_java_code
add_attribute("INTEGER", "BOOLEAN", "c")
add_class(e)
logical_negation
generate_java_code
add_command("B", "d", <<["B", "INTEGER"], ["A", "a"], ["e", "INTEGER"], ["C", "d"], ["c", "D"]>>)
bool_value (false)
add_attribute("C", "A", "INTEGER")
add_class(b)
add_call_chain(<<d,C,e,D,B,d,A>>)
numerical_negation
add_call_chain(<<C,b,b,d,D,B>>)
generate_java_code
equals
add_attribute("B", "B", "INTEGER")
add_call_chain(<<c,d,INTEGER,D>>)
add_class(b)
logical_negation
bool_value (true)
generate_java_code
add_call_chain(<<e,INTEGER>>)
modulo
logical_negation
add_call_chain(<<e,D,a,C,d,D,B,BOOLEAN,c>>)
add_class(C)
add_class(b)
int_value (27)
int_value (37)
numerical_negation
type_check
int_value (18)
conjunction
add_attribute("C", "A", "d")
add_class(e)
quotient
generate_java_code
type_check
int_value (39)
add_attribute("A", "INTEGER", "INTEGER")
add_call_chain(<<B,B,b,e,e,b,A>>)
add_query("e", "b", <<["C", "INTEGER"]>>, "A")
int_value (28)
type_check
add_class(D)
less_than
type_check
multiplication
int_value (48)
generate_java_code
int_value (9)
add_call_chain(<<e,C,d,C,C,C,b,INTEGER>>)
logical_negation
add_class(B)
add_query("a", "BOOLEAN", <<["B", "d"], ["b", "BOOLEAN"]>>, "B")
type_check
add_class(b)
bool_value (true)
less_than
type_check
add_command("D", "INTEGER", <<["A", "INTEGER"], ["D", "BOOLEAN"], ["A", "BOOLEAN"]>>)
logical_negation
add_query("D", "b", <<["d", "BOOLEAN"], ["A", "INTEGER"], ["C", "D"], ["e", "INTEGER"], ["INTEGER", "INTEGER"], ["B", "INTEGER"], ["A", "B"]>>, "d")
add_call_chain(<<b,e,D,B,C,B,d,D>>)
bool_value (true)
logical_negation
modulo
numerical_negation
add_attribute("e", "BOOLEAN", "BOOLEAN")
int_value (9)
add_call_chain(<<A,B,b,d,A,B>>)
bool_value (false)
generate_java_code
add_call_chain(<<c,b,B,d>>)
quotient
add_attribute("INTEGER", "d", "BOOLEAN")
add_attribute("B", "d", "BOOLEAN")
add_command("a", "b", <<["a", "BOOLEAN"], ["e", "INTEGER"], ["D", "INTEGER"], ["C", "BOOLEAN"], ["d", "A"], ["e", "INTEGER"], ["C", "BOOLEAN"]>>)
bool_value (false)
conjunction
bool_value (false)
add_command("D", "C", <<["C", "e"], ["B", "BOOLEAN"], ["e", "INTEGER"], ["C", "B"], ["d", "BOOLEAN"], ["A", "BOOLEAN"], ["c", "INTEGER"]>>)
add_query("d", "e", <<["d", "BOOLEAN"], ["d", "INTEGER"], ["D", "D"], ["A", "BOOLEAN"], ["c", "a"], ["b", "INTEGER"], ["c", "INTEGER"], ["A", "BOOLEAN"]>>, "A")
numerical_negation
numerical_negation
add_attribute("c", "d", "A")
add_call_chain(<<D,A,BOOLEAN>>)
add_call_chain(<<d,a,A,d>>)
add_command("INTEGER", "a", <<["A", "D"], ["d", "BOOLEAN"], ["C", "BOOLEAN"], ["b", "a"], ["b", "INTEGER"]>>)
type_check
bool_value (true)
add_query("C", "a", <<["a", "e"], ["D", "D"], ["INTEGER", "BOOLEAN"], ["A", "INTEGER"]>>, "D")
equals
add_call_chain(<<INTEGER,D>>)
disjunction
int_value (47)
conjunction
add_call_chain(<<A,D,e,INTEGER,a>>)
modulo
logical_negation
greater_than
int_value (9)
add_call_chain(<<B,D,e,INTEGER>>)
bool_value (false)
quotient
modulo
generate_java_code
bool_value (true)
add_attribute("D", "D", "BOOLEAN")
numerical_negation
add_class(A)
add_query("B", "C", <<["b", "A"], ["e", "A"], ["e", "INTEGER"], ["B", "BOOLEAN"]>>, "B")
type_check
add_call_chain(<<e>>)
bool_value (true)
type_check
add_attribute("a", "BOOLEAN", "INTEGER")
add_call_chain(<<e>>)
logical_negation
logical_negation
numerical_negation
disjunction
int_value (49)
generate_java_code
int_value (11)
bool_value (false)
add_call_chain(<<d,e,d,B,INTEGER,D,B,D>>)
logical_negation
add_attribute("B", "c", "INTEGER")
bool_value (false)
generate_java_code
int_value (26)
equals
logical_negation
generate_java_code
add_query("d", "b", <<["D", "C"], ["c", "INTEGER"], ["D", "BOOLEAN"], ["d", "INTEGER"], ["D", "INTEGER"], ["c", "BOOLEAN"]>>, "B")
add_attribute("D", "d", "INTEGER")
subtraction
bool_value (false)
numerical_negation
bool_value (false)
numerical_negation
add_attribute("D", "A", "a")
add_command("a", "b", <<["INTEGER", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "INTEGER"], ["INTEGER", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>)
numerical_negation
numerical_negation
generate_java_code
conjunction
add_command("e", "B", <<["e", "INTEGER"], ["C", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["a", "INTEGER"], ["D", "e"], ["d", "BOOLEAN"], ["D", "a"], ["C", "INTEGER"], ["b", "BOOLEAN"]>>)
add_query("b", "C", <<["INTEGER", "a"]>>, "d")
add_query("A", "C", <<["C", "INTEGER"], ["A", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "e"], ["D", "BOOLEAN"], ["B", "C"], ["a", "BOOLEAN"], ["C", "INTEGER"]>>, "B")
less_than
add_class(e)
int_value (30)
add_call_chain(<<D,b,C,A,d,b>>)
logical_negation
add_call_chain(<<C,d,B,D,C,D,A,C,D>>)
numerical_negation
int_value (45)
add_call_chain(<<c,C,e,e,C,d,a>>)
numerical_negation
add_call_chain(<<b,b,C,A,INTEGER,b,INTEGER>>)
add_command("B", "D", <<["C", "INTEGER"], ["b", "INTEGER"], ["d", "BOOLEAN"], ["e", "b"], ["e", "INTEGER"]>>)
add_call_chain(<<A>>)
quotient
add_command("C", "b", <<["b", "D"], ["d", "BOOLEAN"], ["b", "A"], ["D", "C"], ["INTEGER", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "A"]>>)
add_call_chain(<<B,d,INTEGER,D,c,D,c>>)
bool_value (false)
greater_than
add_attribute("A", "c", "INTEGER")
add_call_chain(<<A,C>>)
type_check
type_check
int_value (47)
add_call_chain(<<b,e>>)
int_value (12)
add_command("C", "C", <<["b", "INTEGER"], ["B", "D"]>>)
logical_negation
add_call_chain(<<INTEGER,c,B,e,c,C,d,b,d>>)
add_query("INTEGER", "C", <<["A", "BOOLEAN"], ["A", "B"], ["c", "INTEGER"], ["a", "D"], ["a", "INTEGER"], ["B", "BOOLEAN"], ["D", "INTEGER"], ["B", "INTEGER"], ["C", "BOOLEAN"]>>, "D")
numerical_negation
add_command("a", "c", <<["a", "BOOLEAN"], ["c", "INTEGER"]>>)
type_check
conjunction
type_check
add_query("d", "a", <<["A", "BOOLEAN"], ["D", "e"], ["B", "BOOLEAN"], ["e", "c"], ["A", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "b"], ["b", "b"], ["B", "INTEGER"]>>, "A")
logical_negation
