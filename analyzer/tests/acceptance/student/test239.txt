add_call_chain(<<d>>)
quotient
int_value (11)
add_call_chain(<<b,d,a,B,b,A,b,A,BOOLEAN>>)
add_query("C", "b", <<["c", "INTEGER"], ["D", "BOOLEAN"], ["c", "C"]>>, "a")
add_attribute("c", "BOOLEAN", "e")
bool_value (true)
generate_java_code
add_call_chain(<<b,C,INTEGER>>)
greater_than
logical_negation
add_command("A", "d", <<["C", "BOOLEAN"], ["INTEGER", "A"], ["d", "BOOLEAN"], ["A", "B"], ["C", "INTEGER"], ["A", "INTEGER"], ["D", "BOOLEAN"]>>)
add_command("INTEGER", "A", <<["c", "C"], ["d", "A"], ["d", "B"], ["C", "c"], ["A", "B"], ["e", "BOOLEAN"], ["a", "INTEGER"], ["BOOLEAN", "INTEGER"]>>)
numerical_negation
add_command("c", "C", <<["D", "INTEGER"], ["A", "e"], ["INTEGER", "BOOLEAN"], ["A", "B"], ["INTEGER", "INTEGER"]>>)
numerical_negation
type_check
add_attribute("b", "B", "INTEGER")
add_call_chain(<<a,a>>)
int_value (14)
add_query("c", "b", <<["B", "INTEGER"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["C", "D"], ["INTEGER", "BOOLEAN"], ["c", "a"], ["D", "BOOLEAN"]>>, "D")
add_attribute("D", "d", "INTEGER")
add_call_chain(<<A,D,BOOLEAN,b,a,d,INTEGER,e>>)
int_value (38)
add_class(D)
add_call_chain(<<B,B,INTEGER,d>>)
add_attribute("c", "C", "e")
add_attribute("a", "D", "BOOLEAN")
generate_java_code
add_command("c", "e", <<["e", "d"], ["INTEGER", "B"], ["BOOLEAN", "BOOLEAN"], ["d", "INTEGER"], ["e", "B"], ["B", "BOOLEAN"], ["B", "c"]>>)
add_query("A", "d", <<["A", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["e", "INTEGER"]>>, "e")
add_query("D", "B", <<["A", "C"]>>, "B")
int_value (35)
logical_negation
add_attribute("b", "C", "BOOLEAN")
add_attribute("A", "e", "C")
add_attribute("c", "A", "BOOLEAN")
int_value (48)
logical_negation
add_call_chain(<<D,c,b,e,INTEGER,e,C,D>>)
add_command("e", "BOOLEAN", <<["b", "e"], ["A", "BOOLEAN"], ["C", "BOOLEAN"]>>)
logical_negation
add_attribute("b", "e", "BOOLEAN")
int_value (2)
generate_java_code
generate_java_code
add_query("INTEGER", "c", <<["B", "INTEGER"], ["B", "BOOLEAN"], ["D", "INTEGER"], ["A", "INTEGER"], ["b", "INTEGER"], ["b", "c"], ["e", "BOOLEAN"], ["a", "INTEGER"]>>, "d")
int_value (16)
add_call_chain(<<d,A,b,C,INTEGER,BOOLEAN,INTEGER,INTEGER>>)
equals
add_call_chain(<<e,e,e>>)
add_query("a", "B", <<["C", "INTEGER"], ["d", "INTEGER"], ["D", "BOOLEAN"], ["c", "INTEGER"], ["B", "INTEGER"], ["c", "INTEGER"], ["B", "INTEGER"], ["C", "INTEGER"]>>, "d")
conjunction
add_call_chain(<<b,C>>)
add_command("C", "INTEGER", <<["c", "INTEGER"], ["INTEGER", "A"]>>)
conjunction
bool_value (true)
addition
add_call_chain(<<A,D,C,a,d,e,e,D,B>>)
int_value (3)
greater_than
bool_value (true)
add_command("BOOLEAN", "B", <<["D", "INTEGER"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["B", "INTEGER"]>>)
numerical_negation
add_query("INTEGER", "B", <<["D", "BOOLEAN"], ["INTEGER", "INTEGER"], ["e", "b"], ["D", "INTEGER"], ["c", "a"], ["D", "INTEGER"]>>, "C")
int_value (23)
subtraction
add_command("e", "INTEGER", <<["D", "BOOLEAN"], ["b", "INTEGER"], ["A", "BOOLEAN"], ["e", "INTEGER"], ["A", "INTEGER"], ["a", "A"], ["c", "a"], ["a", "INTEGER"], ["B", "INTEGER"]>>)
greater_than
numerical_negation
subtraction
bool_value (true)
add_command("c", "B", <<["b", "BOOLEAN"], ["B", "e"], ["INTEGER", "INTEGER"], ["BOOLEAN", "INTEGER"], ["D", "BOOLEAN"], ["D", "d"]>>)
int_value (3)
add_call_chain(<<b,D,A,d,A>>)
add_query("e", "C", <<["a", "INTEGER"], ["d", "INTEGER"], ["D", "c"]>>, "b")
add_class(BOOLEAN)
add_call_chain(<<A>>)
add_command("D", "C", <<["c", "b"], ["B", "c"]>>)
type_check
numerical_negation
add_call_chain(<<A,a,INTEGER,e,e>>)
add_call_chain(<<C,e,d,b,B,d,b>>)
add_call_chain(<<B,B,e,A>>)
logical_negation
bool_value (true)
type_check
add_command("a", "B", <<["A", "INTEGER"], ["BOOLEAN", "INTEGER"], ["A", "BOOLEAN"], ["e", "INTEGER"], ["e", "INTEGER"], ["D", "BOOLEAN"], ["d", "BOOLEAN"]>>)
add_query("B", "a", <<["b", "BOOLEAN"], ["a", "INTEGER"], ["B", "BOOLEAN"], ["INTEGER", "INTEGER"], ["A", "BOOLEAN"], ["D", "BOOLEAN"], ["a", "INTEGER"]>>, "D")
add_command("e", "A", <<["INTEGER", "BOOLEAN"], ["A", "INTEGER"], ["c", "INTEGER"], ["C", "A"], ["a", "b"], ["A", "INTEGER"], ["A", "B"], ["c", "BOOLEAN"]>>)
add_query("INTEGER", "c", <<["a", "BOOLEAN"], ["e", "INTEGER"], ["B", "BOOLEAN"], ["c", "BOOLEAN"]>>, "e")
add_attribute("B", "c", "INTEGER")
disjunction
add_query("B", "c", <<["B", "INTEGER"], ["D", "B"], ["b", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "D"], ["C", "D"], ["c", "INTEGER"], ["INTEGER", "BOOLEAN"], ["c", "BOOLEAN"]>>, "A")
generate_java_code
conjunction
add_query("D", "A", <<["e", "BOOLEAN"], ["D", "e"], ["e", "BOOLEAN"], ["e", "BOOLEAN"], ["b", "BOOLEAN"]>>, "e")
bool_value (true)
add_call_chain(<<BOOLEAN,a,D,e,c>>)
int_value (27)
multiplication
type_check
add_attribute("d", "BOOLEAN", "INTEGER")
logical_negation
conjunction
add_call_chain(<<BOOLEAN,A,b,D,D,B,C,A,c>>)
add_call_chain(<<a>>)
add_query("a", "a", <<["e", "INTEGER"], ["D", "A"], ["b", "INTEGER"], ["e", "C"], ["A", "INTEGER"], ["D", "c"], ["A", "BOOLEAN"]>>, "c")
add_attribute("C", "a", "INTEGER")
greater_than
add_attribute("A", "B", "BOOLEAN")
add_class(e)
add_call_chain(<<b,B,D,e>>)
add_query("c", "D", <<["D", "a"], ["D", "d"], ["a", "INTEGER"], ["e", "BOOLEAN"], ["b", "BOOLEAN"]>>, "b")
bool_value (false)
numerical_negation
logical_negation
add_call_chain(<<a,c,d,A,a,INTEGER>>)
int_value (25)
add_attribute("D", "A", "BOOLEAN")
add_call_chain(<<C,b,e,INTEGER>>)
add_query("e", "BOOLEAN", <<["C", "BOOLEAN"], ["C", "BOOLEAN"], ["d", "INTEGER"], ["INTEGER", "BOOLEAN"], ["B", "INTEGER"], ["BOOLEAN", "INTEGER"], ["b", "BOOLEAN"]>>, "B")
bool_value (true)
logical_negation
add_call_chain(<<D,B,D,INTEGER,d,c,a>>)
add_query("a", "D", <<["d", "D"], ["d", "b"]>>, "BOOLEAN")
conjunction
int_value (1)
generate_java_code
add_command("A", "d", <<["e", "INTEGER"], ["c", "BOOLEAN"], ["c", "D"], ["A", "BOOLEAN"]>>)
multiplication
bool_value (false)
add_call_chain(<<c>>)
add_command("B", "INTEGER", <<["B", "d"], ["A", "INTEGER"], ["b", "BOOLEAN"], ["D", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "d"], ["D", "INTEGER"], ["d", "b"], ["a", "BOOLEAN"]>>)
int_value (42)
int_value (8)
add_attribute("D", "C", "INTEGER")
equals
type_check
add_call_chain(<<c,d,BOOLEAN,A,c,e,a>>)
less_than
modulo
bool_value (false)
logical_negation
greater_than
add_attribute("BOOLEAN", "c", "d")
add_command("e", "C", <<["d", "INTEGER"], ["A", "BOOLEAN"], ["C", "b"], ["e", "INTEGER"], ["BOOLEAN", "INTEGER"], ["c", "INTEGER"], ["B", "INTEGER"]>>)
bool_value (false)
add_call_chain(<<d,B,d,c,C,INTEGER,B,a,D>>)
equals
multiplication
add_call_chain(<<C,a,BOOLEAN,e,e,A,c,A,c>>)
add_query("D", "a", <<["c", "B"], ["d", "C"], ["C", "B"], ["C", "BOOLEAN"]>>, "b")
add_call_chain(<<D,A,B,c,e>>)
add_call_chain(<<a,INTEGER,a>>)
add_call_chain(<<D,B>>)
logical_negation
logical_negation
generate_java_code
equals
int_value (45)
type_check
add_call_chain(<<C>>)
add_command("C", "D", <<["d", "e"], ["e", "D"], ["c", "e"], ["B", "b"], ["c", "BOOLEAN"], ["c", "e"], ["B", "BOOLEAN"], ["B", "b"], ["c", "INTEGER"]>>)
add_call_chain(<<c,A,INTEGER,D,c>>)
type_check
add_call_chain(<<D>>)
logical_negation
add_query("BOOLEAN", "e", <<["A", "INTEGER"], ["e", "BOOLEAN"]>>, "b")
equals
logical_negation
generate_java_code
less_than
add_call_chain(<<A,C,e,b>>)
logical_negation
bool_value (true)
add_command("D", "d", <<["B", "INTEGER"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["e", "a"], ["c", "INTEGER"]>>)
add_call_chain(<<BOOLEAN,C,BOOLEAN>>)
add_call_chain(<<a,A,c,A,c,BOOLEAN,A>>)
bool_value (false)
add_query("A", "B", <<["d", "BOOLEAN"], ["a", "INTEGER"]>>, "d")
bool_value (false)
add_attribute("B", "e", "B")
multiplication
add_class(b)
add_call_chain(<<b,d,BOOLEAN,D,a>>)
logical_negation
bool_value (true)
add_command("d", "a", <<["C", "INTEGER"], ["b", "INTEGER"], ["D", "INTEGER"], ["B", "INTEGER"], ["D", "INTEGER"], ["C", "INTEGER"]>>)
add_class(B)
add_command("D", "A", <<["e", "C"]>>)
add_call_chain(<<D,D,A>>)
logical_negation
numerical_negation
logical_negation
add_class(BOOLEAN)
disjunction
add_class(B)
bool_value (true)
add_call_chain(<<A,e,A,D,INTEGER>>)
add_call_chain(<<d,d,A,e,d,d,INTEGER>>)
int_value (21)
add_attribute("c", "a", "INTEGER")
bool_value (false)
add_attribute("e", "c", "BOOLEAN")
generate_java_code
add_call_chain(<<e,d,a,C,a,D,d>>)
