subtraction
type_check
add_call_chain(<<b,D,D>>)
add_command("A", "e", <<["d", "BOOLEAN"]>>)
generate_java_code
add_command("b", "B", <<["D", "BOOLEAN"], ["d", "BOOLEAN"], ["c", "b"]>>)
add_call_chain(<<c,B,B,b,INTEGER,d>>)
logical_negation
conjunction
bool_value (false)
add_call_chain(<<D,a,b,B,A>>)
add_query("B", "BOOLEAN", <<["C", "B"]>>, "d")
logical_negation
add_call_chain(<<a,D,e,BOOLEAN,d>>)
add_call_chain(<<BOOLEAN>>)
logical_negation
add_attribute("A", "C", "BOOLEAN")
addition
add_query("B", "d", <<["B", "BOOLEAN"], ["A", "INTEGER"]>>, "d")
generate_java_code
bool_value (false)
add_command("d", "b", <<["D", "b"], ["d", "INTEGER"], ["b", "BOOLEAN"]>>)
logical_negation
int_value (1)
less_than
add_call_chain(<<D,d,b,b,D,c>>)
add_query("A", "A", <<["D", "D"], ["C", "INTEGER"], ["A", "BOOLEAN"], ["D", "b"], ["D", "INTEGER"], ["d", "C"], ["INTEGER", "BOOLEAN"], ["C", "BOOLEAN"]>>, "B")
conjunction
bool_value (false)
add_query("d", "C", <<["a", "B"], ["a", "INTEGER"]>>, "C")
add_query("B", "b", <<["c", "BOOLEAN"], ["a", "INTEGER"], ["d", "b"], ["e", "BOOLEAN"]>>, "A")
disjunction
add_command("e", "a", <<["A", "INTEGER"]>>)
add_attribute("B", "b", "INTEGER")
add_command("b", "INTEGER", <<["BOOLEAN", "BOOLEAN"], ["e", "C"], ["d", "BOOLEAN"], ["B", "BOOLEAN"]>>)
add_call_chain(<<C>>)
add_query("C", "C", <<["B", "INTEGER"], ["B", "INTEGER"], ["C", "b"], ["BOOLEAN", "BOOLEAN"], ["b", "a"]>>, "d")
add_call_chain(<<d,D,A,D,BOOLEAN,A,c,b,C>>)
add_command("B", "c", <<["A", "BOOLEAN"], ["B", "INTEGER"]>>)
add_call_chain(<<D,e,BOOLEAN,C,e>>)
add_command("d", "INTEGER", <<["b", "INTEGER"], ["C", "INTEGER"], ["b", "A"]>>)
add_attribute("e", "INTEGER", "c")
numerical_negation
generate_java_code
add_call_chain(<<A,A,b,c>>)
modulo
conjunction
add_call_chain(<<B,e,D,b>>)
numerical_negation
bool_value (false)
add_attribute("c", "c", "INTEGER")
generate_java_code
add_attribute("BOOLEAN", "C", "c")
add_query("a", "A", <<["A", "BOOLEAN"], ["a", "BOOLEAN"]>>, "B")
add_call_chain(<<D,d,D,C,A,A,BOOLEAN,e>>)
disjunction
addition
add_command("e", "B", <<["D", "BOOLEAN"], ["C", "a"], ["C", "INTEGER"], ["D", "INTEGER"], ["e", "e"]>>)
add_attribute("B", "A", "BOOLEAN")
type_check
add_class(e)
add_attribute("INTEGER", "D", "INTEGER")
add_command("B", "BOOLEAN", <<["A", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["c", "e"], ["A", "BOOLEAN"]>>)
add_attribute("c", "B", "C")
int_value (26)
add_query("c", "D", <<["B", "INTEGER"], ["B", "D"], ["e", "INTEGER"], ["A", "b"]>>, "A")
add_query("B", "b", <<["c", "INTEGER"], ["C", "INTEGER"], ["B", "a"], ["A", "INTEGER"], ["A", "D"], ["e", "d"], ["c", "INTEGER"], ["C", "INTEGER"]>>, "a")
add_query("e", "D", <<["B", "a"], ["a", "BOOLEAN"], ["a", "BOOLEAN"], ["C", "d"], ["B", "D"], ["B", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>, "e")
add_call_chain(<<B,C,e,D,b,D,b>>)
add_call_chain(<<A,INTEGER,a,D>>)
int_value (2)
add_attribute("b", "INTEGER", "D")
add_query("e", "A", <<["BOOLEAN", "INTEGER"], ["d", "INTEGER"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["a", "INTEGER"], ["D", "BOOLEAN"], ["c", "INTEGER"], ["d", "e"]>>, "d")
add_command("C", "b", <<["A", "c"], ["a", "A"], ["B", "a"], ["e", "INTEGER"], ["b", "a"]>>)
type_check
add_call_chain(<<b,A>>)
add_call_chain(<<b,b,A,e,D,B,D,d>>)
int_value (10)
generate_java_code
conjunction
numerical_negation
add_attribute("C", "C", "BOOLEAN")
logical_negation
modulo
add_class(b)
less_than
addition
generate_java_code
add_call_chain(<<BOOLEAN,d,D,D,C>>)
add_query("a", "d", <<["a", "e"], ["d", "BOOLEAN"], ["c", "BOOLEAN"], ["C", "d"], ["B", "BOOLEAN"], ["b", "INTEGER"], ["D", "BOOLEAN"], ["b", "BOOLEAN"], ["A", "C"]>>, "c")
bool_value (false)
add_command("e", "C", <<["e", "BOOLEAN"], ["a", "INTEGER"], ["a", "C"], ["B", "BOOLEAN"]>>)
disjunction
type_check
int_value (28)
disjunction
less_than
int_value (35)
add_query("INTEGER", "B", <<["d", "INTEGER"], ["d", "A"], ["D", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["A", "INTEGER"], ["e", "d"], ["A", "A"]>>, "C")
int_value (11)
bool_value (true)
add_attribute("A", "d", "BOOLEAN")
add_call_chain(<<D,INTEGER,A,C,B,e,A,C,b>>)
add_command("B", "C", <<["BOOLEAN", "INTEGER"], ["D", "BOOLEAN"], ["D", "INTEGER"], ["INTEGER", "INTEGER"], ["b", "INTEGER"], ["BOOLEAN", "INTEGER"], ["a", "BOOLEAN"]>>)
bool_value (true)
generate_java_code
add_query("e", "A", <<["D", "INTEGER"], ["a", "BOOLEAN"], ["d", "INTEGER"], ["INTEGER", "INTEGER"], ["C", "BOOLEAN"], ["C", "e"]>>, "a")
conjunction
add_class(B)
generate_java_code
logical_negation
disjunction
equals
numerical_negation
add_query("A", "c", <<["d", "C"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["c", "C"], ["e", "INTEGER"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["INTEGER", "A"], ["b", "BOOLEAN"]>>, "d")
add_command("D", "INTEGER", <<["C", "INTEGER"], ["A", "BOOLEAN"], ["d", "INTEGER"], ["BOOLEAN", "C"], ["D", "BOOLEAN"]>>)
bool_value (true)
less_than
generate_java_code
add_class(C)
int_value (1)
int_value (7)
add_command("d", "B", <<["B", "b"], ["e", "BOOLEAN"], ["A", "BOOLEAN"]>>)
int_value (40)
add_attribute("A", "C", "BOOLEAN")
add_call_chain(<<C,BOOLEAN,e,c,b,d,B>>)
add_call_chain(<<C,A,a,BOOLEAN,c>>)
add_call_chain(<<B,D,D,e,c,B,C>>)
add_query("C", "B", <<["B", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["c", "BOOLEAN"]>>, "c")
add_class(A)
add_command("B", "b", <<["c", "BOOLEAN"], ["d", "INTEGER"], ["C", "BOOLEAN"], ["INTEGER", "B"], ["d", "INTEGER"], ["D", "BOOLEAN"]>>)
add_command("b", "C", <<["B", "BOOLEAN"], ["a", "a"], ["INTEGER", "BOOLEAN"], ["d", "INTEGER"], ["b", "A"], ["INTEGER", "INTEGER"]>>)
add_command("B", "a", <<["C", "INTEGER"], ["B", "INTEGER"]>>)
add_call_chain(<<B,a,c>>)
disjunction
add_attribute("A", "C", "c")
add_query("BOOLEAN", "INTEGER", <<["d", "BOOLEAN"], ["A", "BOOLEAN"], ["C", "D"], ["e", "INTEGER"]>>, "B")
add_class(C)
bool_value (true)
bool_value (true)
add_command("C", "B", <<["D", "BOOLEAN"], ["B", "INTEGER"], ["d", "BOOLEAN"], ["a", "BOOLEAN"], ["C", "BOOLEAN"], ["C", "BOOLEAN"]>>)
type_check
equals
add_call_chain(<<A,e,c>>)
add_class(c)
disjunction
add_class(D)
add_command("D", "e", <<["B", "e"], ["e", "b"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "c"], ["D", "INTEGER"]>>)
int_value (31)
add_command("B", "d", <<["c", "INTEGER"], ["b", "INTEGER"], ["B", "BOOLEAN"], ["e", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["a", "D"]>>)
logical_negation
add_call_chain(<<A,a,a,C,b,a,D>>)
add_call_chain(<<c>>)
add_call_chain(<<e,e>>)
equals
add_attribute("INTEGER", "D", "BOOLEAN")
add_query("c", "INTEGER", <<["A", "INTEGER"], ["e", "INTEGER"], ["e", "INTEGER"], ["e", "INTEGER"], ["d", "d"]>>, "b")
numerical_negation
add_call_chain(<<INTEGER>>)
add_query("B", "C", <<["e", "A"], ["D", "C"], ["a", "INTEGER"], ["a", "B"]>>, "c")
add_command("a", "A", <<["A", "D"], ["C", "BOOLEAN"], ["c", "INTEGER"], ["A", "BOOLEAN"], ["a", "INTEGER"], ["e", "INTEGER"]>>)
add_call_chain(<<a,d>>)
numerical_negation
generate_java_code
int_value (44)
add_call_chain(<<e,C,d,c,A,C>>)
greater_than
less_than
bool_value (false)
bool_value (false)
greater_than
add_call_chain(<<e,A,BOOLEAN,d,a,A,C,A,e>>)
conjunction
bool_value (true)
type_check
logical_negation
add_call_chain(<<B,c,D,D,A,e>>)
add_command("d", "b", <<["b", "INTEGER"]>>)
add_call_chain(<<c,C,a,C,d,A,A>>)
int_value (9)
add_command("C", "D", <<["a", "INTEGER"]>>)
disjunction
int_value (6)
add_command("e", "b", <<["BOOLEAN", "BOOLEAN"]>>)
modulo
add_attribute("INTEGER", "D", "INTEGER")
add_attribute("e", "B", "d")
numerical_negation
disjunction
add_call_chain(<<B>>)
bool_value (false)
generate_java_code
multiplication
type_check
bool_value (false)
add_query("D", "C", <<["c", "BOOLEAN"], ["B", "BOOLEAN"], ["C", "INTEGER"], ["a", "BOOLEAN"], ["a", "INTEGER"]>>, "a")
add_query("b", "a", <<["c", "C"], ["D", "BOOLEAN"], ["d", "BOOLEAN"], ["B", "B"], ["D", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["D", "INTEGER"], ["e", "INTEGER"], ["D", "INTEGER"]>>, "e")
add_query("A", "BOOLEAN", <<["c", "INTEGER"], ["c", "C"], ["b", "d"], ["D", "A"], ["b", "INTEGER"]>>, "C")
add_call_chain(<<d,e,c>>)
add_call_chain(<<BOOLEAN,c,D>>)
add_query("a", "d", <<["c", "BOOLEAN"], ["A", "D"], ["A", "BOOLEAN"], ["A", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "BOOLEAN"], ["b", "BOOLEAN"], ["A", "D"], ["c", "BOOLEAN"]>>, "d")
add_class(D)
add_call_chain(<<a,d,a>>)
add_command("a", "D", <<["c", "D"], ["b", "d"]>>)
multiplication
add_query("b", "d", <<["C", "INTEGER"], ["A", "INTEGER"], ["b", "BOOLEAN"], ["INTEGER", "d"], ["d", "b"], ["c", "INTEGER"], ["e", "C"], ["d", "d"], ["c", "BOOLEAN"]>>, "INTEGER")
add_call_chain(<<A,BOOLEAN,b,D>>)
logical_negation
bool_value (true)
add_query("b", "d", <<["B", "INTEGER"], ["c", "INTEGER"], ["INTEGER", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>, "b")
bool_value (true)
add_call_chain(<<D,C,b,c,D,D,A>>)
generate_java_code
subtraction
numerical_negation
add_command("B", "e", <<["a", "B"], ["A", "e"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "A"], ["b", "C"], ["c", "INTEGER"], ["BOOLEAN", "INTEGER"]>>)
numerical_negation
add_attribute("d", "a", "BOOLEAN")
bool_value (false)
int_value (49)
add_call_chain(<<B,e,B,a,BOOLEAN,B,A,e,A>>)
type_check
greater_than
add_call_chain(<<b,A,d,A>>)
greater_than
logical_negation
greater_than
addition
add_attribute("A", "c", "a")
type_check
add_call_chain(<<A,B,B,b,b,C>>)
add_call_chain(<<e,c,INTEGER,INTEGER>>)
add_command("a", "D", <<["e", "BOOLEAN"], ["e", "c"], ["INTEGER", "c"], ["c", "BOOLEAN"], ["d", "C"], ["A", "BOOLEAN"], ["e", "INTEGER"]>>)
add_call_chain(<<A,e,b,C,C,b>>)
add_attribute("BOOLEAN", "c", "INTEGER")
int_value (10)
add_command("d", "D", <<["e", "BOOLEAN"], ["D", "BOOLEAN"], ["b", "BOOLEAN"]>>)
bool_value (false)
add_attribute("BOOLEAN", "e", "BOOLEAN")
add_attribute("d", "b", "BOOLEAN")
int_value (42)
add_command("e", "a", <<["b", "D"], ["C", "BOOLEAN"], ["a", "B"], ["B", "A"], ["C", "INTEGER"]>>)
add_query("c", "d", <<["BOOLEAN", "BOOLEAN"], ["d", "BOOLEAN"], ["d", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["BOOLEAN", "INTEGER"]>>, "D")
add_command("a", "BOOLEAN", <<["BOOLEAN", "INTEGER"], ["A", "BOOLEAN"], ["d", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["b", "BOOLEAN"], ["B", "BOOLEAN"], ["C", "BOOLEAN"]>>)
bool_value (true)
less_than
add_attribute("D", "A", "INTEGER")
conjunction
add_call_chain(<<D,D,B,d,e,a>>)
add_command("D", "D", <<["D", "INTEGER"], ["e", "C"], ["D", "INTEGER"]>>)
add_query("C", "b", <<["b", "INTEGER"], ["e", "INTEGER"], ["A", "INTEGER"], ["A", "d"], ["D", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "BOOLEAN"]>>, "d")
add_command("a", "b", <<["D", "A"], ["A", "INTEGER"], ["d", "BOOLEAN"], ["INTEGER", "D"]>>)
int_value (25)
add_call_chain(<<c,INTEGER,B>>)
add_attribute("A", "A", "INTEGER")
disjunction
numerical_negation
add_call_chain(<<C,b,A,b,B,d,BOOLEAN,C,B>>)
add_attribute("e", "D", "B")
conjunction
add_command("C", "a", <<["d", "INTEGER"], ["c", "INTEGER"], ["c", "INTEGER"], ["A", "b"], ["d", "D"]>>)
add_call_chain(<<e,C,B,D>>)
int_value (31)
add_attribute("C", "d", "D")
generate_java_code
numerical_negation
add_query("a", "d", <<["INTEGER", "BOOLEAN"]>>, "C")
add_call_chain(<<D,A>>)
