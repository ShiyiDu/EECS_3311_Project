greater_than
disjunction
type_check
add_attribute("BOOLEAN", "D", "b")
add_call_chain(<<D,D,a,A,d,A,A,c>>)
generate_java_code
add_attribute("c", "INTEGER", "BOOLEAN")
add_query("INTEGER", "a", <<["C", "BOOLEAN"], ["A", "C"], ["D", "INTEGER"], ["C", "BOOLEAN"], ["a", "INTEGER"], ["A", "INTEGER"], ["e", "INTEGER"], ["b", "INTEGER"], ["e", "BOOLEAN"]>>, "A")
add_call_chain(<<d,d,c,C,C,d,BOOLEAN,a,INTEGER>>)
bool_value (false)
quotient
add_call_chain(<<e,B,B,A,B,a,a>>)
generate_java_code
add_call_chain(<<b,e,a,D,INTEGER,c,d,d,e>>)
greater_than
conjunction
multiplication
add_query("C", "c", <<["A", "INTEGER"], ["A", "INTEGER"], ["A", "INTEGER"], ["C", "BOOLEAN"], ["BOOLEAN", "c"]>>, "b")
add_call_chain(<<C>>)
add_query("D", "A", <<["c", "BOOLEAN"], ["a", "INTEGER"], ["D", "INTEGER"]>>, "C")
numerical_negation
bool_value (true)
bool_value (false)
int_value (35)
add_attribute("b", "B", "INTEGER")
add_class(B)
add_command("D", "BOOLEAN", <<["BOOLEAN", "D"], ["b", "d"], ["e", "BOOLEAN"], ["C", "INTEGER"], ["D", "BOOLEAN"]>>)
bool_value (false)
add_call_chain(<<A,e,b,A,a,D>>)
generate_java_code
add_class(INTEGER)
type_check
add_attribute("D", "D", "BOOLEAN")
add_class(C)
add_class(D)
logical_negation
bool_value (true)
add_call_chain(<<D,a,A,C,e,B,d>>)
bool_value (true)
int_value (32)
add_command("e", "a", <<["e", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["b", "BOOLEAN"], ["D", "INTEGER"], ["C", "INTEGER"], ["D", "D"]>>)
generate_java_code
numerical_negation
logical_negation
disjunction
type_check
add_call_chain(<<D,b,B>>)
add_query("c", "D", <<["d", "INTEGER"], ["INTEGER", "INTEGER"], ["d", "BOOLEAN"], ["b", "B"], ["a", "A"], ["C", "d"], ["c", "INTEGER"], ["a", "a"], ["b", "a"]>>, "d")
add_command("e", "a", <<["INTEGER", "e"], ["a", "INTEGER"], ["C", "INTEGER"], ["a", "INTEGER"]>>)
bool_value (true)
add_call_chain(<<B,D,e,C>>)
bool_value (true)
add_attribute("B", "e", "BOOLEAN")
quotient
add_command("BOOLEAN", "D", <<["d", "BOOLEAN"], ["e", "BOOLEAN"], ["B", "INTEGER"], ["INTEGER", "d"], ["e", "BOOLEAN"], ["b", "A"], ["c", "BOOLEAN"], ["e", "INTEGER"]>>)
int_value (5)
add_call_chain(<<a,A,D,B,a,A,B>>)
logical_negation
add_query("d", "A", <<["b", "INTEGER"], ["e", "INTEGER"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["a", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["a", "D"], ["D", "INTEGER"]>>, "D")
add_call_chain(<<C,B,B,a,C,b>>)
bool_value (false)
add_query("c", "A", <<["B", "a"], ["d", "BOOLEAN"], ["c", "BOOLEAN"], ["INTEGER", "INTEGER"], ["A", "c"], ["a", "INTEGER"], ["b", "b"], ["B", "e"], ["BOOLEAN", "INTEGER"]>>, "B")
add_query("b", "B", <<["c", "INTEGER"], ["C", "c"], ["e", "INTEGER"], ["B", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["B", "INTEGER"]>>, "B")
numerical_negation
bool_value (true)
add_attribute("B", "b", "INTEGER")
logical_negation
conjunction
add_call_chain(<<A>>)
quotient
int_value (38)
int_value (41)
add_call_chain(<<e,C,A,a>>)
add_call_chain(<<d,c,a>>)
conjunction
generate_java_code
less_than
add_call_chain(<<BOOLEAN,C,b,BOOLEAN,b,b,a,BOOLEAN>>)
add_call_chain(<<C,C,d,D,C,D,e,BOOLEAN>>)
add_query("INTEGER", "d", <<["INTEGER", "D"], ["c", "BOOLEAN"], ["e", "a"], ["b", "BOOLEAN"], ["c", "INTEGER"], ["B", "D"]>>, "e")
bool_value (true)
add_call_chain(<<e,B>>)
add_class(D)
quotient
less_than
add_call_chain(<<d,D,C,c,b,b,b,b>>)
add_call_chain(<<a,e,a,e,C,e,c>>)
add_call_chain(<<B,d>>)
type_check
add_query("D", "A", <<["e", "D"], ["d", "INTEGER"], ["c", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>, "A")
add_class(a)
add_class(b)
logical_negation
bool_value (true)
less_than
add_command("a", "e", <<["C", "INTEGER"], ["e", "D"], ["B", "B"], ["C", "INTEGER"], ["B", "INTEGER"], ["B", "BOOLEAN"], ["A", "INTEGER"]>>)
add_class(c)
add_call_chain(<<D,C,D>>)
add_query("INTEGER", "e", <<["b", "INTEGER"], ["D", "INTEGER"]>>, "BOOLEAN")
add_command("c", "d", <<["d", "b"], ["B", "INTEGER"]>>)
logical_negation
add_command("e", "B", <<["BOOLEAN", "B"], ["D", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>)
add_query("D", "C", <<["C", "C"], ["BOOLEAN", "BOOLEAN"], ["b", "INTEGER"], ["c", "d"], ["e", "D"], ["e", "INTEGER"]>>, "d")
multiplication
add_query("a", "D", <<["B", "B"], ["B", "BOOLEAN"], ["c", "INTEGER"], ["D", "A"], ["B", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "BOOLEAN"], ["d", "BOOLEAN"]>>, "B")
add_call_chain(<<D,BOOLEAN>>)
add_query("a", "d", <<["C", "INTEGER"], ["e", "INTEGER"]>>, "a")
bool_value (false)
add_query("b", "e", <<["d", "e"], ["e", "INTEGER"], ["b", "INTEGER"], ["C", "INTEGER"], ["B", "C"], ["B", "e"], ["a", "B"]>>, "C")
add_call_chain(<<BOOLEAN,a,D,BOOLEAN,c>>)
int_value (24)
bool_value (true)
int_value (37)
add_command("d", "C", <<["b", "b"], ["c", "BOOLEAN"], ["d", "BOOLEAN"], ["b", "INTEGER"], ["D", "INTEGER"], ["b", "BOOLEAN"], ["c", "INTEGER"], ["d", "INTEGER"]>>)
conjunction
equals
logical_negation
add_attribute("D", "D", "INTEGER")
add_call_chain(<<B,b,b,C,A>>)
logical_negation
modulo
add_call_chain(<<a,b,d,C>>)
add_call_chain(<<B>>)
add_attribute("INTEGER", "d", "BOOLEAN")
add_call_chain(<<a,a>>)
bool_value (true)
add_call_chain(<<A,a,a,INTEGER,A,d>>)
bool_value (false)
add_call_chain(<<A,a,B,A>>)
add_command("B", "d", <<["C", "A"]>>)
add_call_chain(<<e,b,e,b,B,e,INTEGER>>)
add_query("a", "e", <<["B", "INTEGER"], ["A", "e"], ["B", "INTEGER"]>>, "C")
numerical_negation
conjunction
generate_java_code
add_query("A", "b", <<["a", "INTEGER"], ["B", "c"], ["C", "INTEGER"], ["B", "INTEGER"], ["C", "BOOLEAN"], ["A", "BOOLEAN"]>>, "INTEGER")
add_call_chain(<<c,D>>)
add_query("b", "b", <<["INTEGER", "e"], ["D", "BOOLEAN"], ["b", "INTEGER"], ["BOOLEAN", "c"]>>, "b")
numerical_negation
numerical_negation
add_query("c", "C", <<["D", "INTEGER"]>>, "D")
add_call_chain(<<D>>)
add_call_chain(<<D,C>>)
numerical_negation
add_query("D", "d", <<["A", "BOOLEAN"], ["A", "D"], ["D", "BOOLEAN"], ["A", "C"], ["A", "A"], ["BOOLEAN", "BOOLEAN"], ["c", "BOOLEAN"], ["c", "BOOLEAN"]>>, "c")
add_query("B", "b", <<["D", "INTEGER"], ["B", "BOOLEAN"]>>, "C")
bool_value (true)
generate_java_code
logical_negation
add_query("B", "BOOLEAN", <<["C", "d"], ["e", "b"], ["A", "C"], ["e", "D"], ["b", "BOOLEAN"]>>, "B")
add_call_chain(<<C,B,e,d,C,B,BOOLEAN,a,b>>)
int_value (14)
numerical_negation
add_call_chain(<<e,D,D,INTEGER,B,C,e>>)
add_command("c", "B", <<["c", "BOOLEAN"], ["A", "BOOLEAN"], ["B", "D"]>>)
add_attribute("A", "e", "BOOLEAN")
add_command("B", "e", <<["C", "e"], ["B", "INTEGER"], ["INTEGER", "BOOLEAN"], ["d", "INTEGER"], ["d", "BOOLEAN"], ["D", "D"], ["C", "INTEGER"], ["c", "INTEGER"], ["a", "INTEGER"]>>)
numerical_negation
logical_negation
bool_value (true)
add_query("B", "B", <<["BOOLEAN", "e"], ["d", "INTEGER"], ["C", "INTEGER"], ["d", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["C", "BOOLEAN"], ["b", "INTEGER"]>>, "a")
add_command("a", "a", <<["A", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "BOOLEAN"]>>)
bool_value (true)
type_check
add_class(A)
add_attribute("A", "BOOLEAN", "b")
disjunction
add_attribute("INTEGER", "c", "BOOLEAN")
logical_negation
add_class(a)
int_value (20)
add_call_chain(<<a>>)
add_call_chain(<<D,b,D>>)
bool_value (true)
logical_negation
add_query("INTEGER", "b", <<["D", "BOOLEAN"], ["INTEGER", "INTEGER"], ["D", "BOOLEAN"], ["b", "BOOLEAN"]>>, "C")
add_call_chain(<<d,a,d,D,B>>)
logical_negation
add_query("BOOLEAN", "C", <<["D", "BOOLEAN"], ["B", "d"]>>, "B")
less_than
type_check
add_query("D", "B", <<["C", "BOOLEAN"], ["e", "A"], ["d", "INTEGER"], ["a", "BOOLEAN"]>>, "e")
generate_java_code
int_value (8)
conjunction
add_command("D", "B", <<["d", "C"], ["d", "INTEGER"], ["c", "b"], ["B", "BOOLEAN"], ["d", "C"], ["A", "INTEGER"], ["b", "INTEGER"]>>)
type_check
logical_negation
bool_value (true)
int_value (19)
numerical_negation
logical_negation
add_call_chain(<<a,A,c,c,D>>)
add_call_chain(<<c,c,c,A,A>>)
generate_java_code
add_attribute("b", "b", "INTEGER")
add_call_chain(<<D,C,INTEGER,e,C,C,B,A>>)
int_value (10)
multiplication
bool_value (true)
addition
add_call_chain(<<c,INTEGER,d>>)
int_value (44)
numerical_negation
logical_negation
int_value (25)
bool_value (false)
add_call_chain(<<D,BOOLEAN,D,e,C,a,a,D,b>>)
logical_negation
add_call_chain(<<B,d,C,D,C>>)
add_call_chain(<<d,B>>)
numerical_negation
add_attribute("D", "C", "INTEGER")
