add_class(INTEGER)
add_query("c", "B", <<["c", "b"], ["D", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["D", "C"], ["D", "INTEGER"], ["C", "BOOLEAN"]>>, "b")
logical_negation
add_command("D", "d", <<["D", "BOOLEAN"]>>)
add_command("e", "D", <<["C", "c"], ["e", "a"], ["d", "INTEGER"], ["INTEGER", "INTEGER"], ["D", "INTEGER"], ["c", "INTEGER"], ["a", "BOOLEAN"], ["c", "C"], ["C", "BOOLEAN"]>>)
generate_java_code
logical_negation
add_attribute("b", "BOOLEAN", "c")
add_call_chain(<<e,a,C,B>>)
bool_value (false)
int_value (28)
type_check
bool_value (true)
add_attribute("e", "d", "INTEGER")
add_query("C", "BOOLEAN", <<["A", "c"], ["e", "INTEGER"]>>, "e")
numerical_negation
numerical_negation
generate_java_code
logical_negation
generate_java_code
add_command("b", "e", <<["A", "BOOLEAN"], ["A", "INTEGER"], ["A", "C"], ["d", "INTEGER"], ["e", "d"]>>)
numerical_negation
add_attribute("b", "b", "INTEGER")
int_value (32)
generate_java_code
bool_value (true)
bool_value (false)
add_query("e", "e", <<["B", "C"], ["B", "INTEGER"], ["a", "INTEGER"], ["a", "INTEGER"], ["d", "INTEGER"], ["b", "BOOLEAN"], ["d", "BOOLEAN"]>>, "e")
type_check
add_query("A", "e", <<["BOOLEAN", "BOOLEAN"]>>, "a")
add_call_chain(<<b,A,e,b,INTEGER,B>>)
numerical_negation
add_query("A", "a", <<["D", "BOOLEAN"], ["d", "INTEGER"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["B", "A"], ["B", "BOOLEAN"], ["D", "INTEGER"], ["c", "e"], ["e", "BOOLEAN"]>>, "A")
add_query("b", "A", <<["B", "b"], ["a", "BOOLEAN"], ["b", "a"], ["d", "BOOLEAN"]>>, "d")
numerical_negation
add_class(C)
equals
add_call_chain(<<A,B,c,a,b,b,b,B>>)
numerical_negation
greater_than
add_call_chain(<<A,c,D,D,B,A,D,B>>)
disjunction
add_command("c", "C", <<["C", "BOOLEAN"]>>)
add_command("D", "C", <<["c", "INTEGER"], ["a", "D"], ["d", "A"], ["e", "c"], ["b", "BOOLEAN"]>>)
add_attribute("B", "b", "BOOLEAN")
int_value (4)
add_query("c", "d", <<["c", "c"], ["a", "BOOLEAN"], ["C", "d"], ["e", "BOOLEAN"], ["c", "INTEGER"]>>, "e")
int_value (39)
add_call_chain(<<A,C,A,BOOLEAN,C>>)
generate_java_code
less_than
generate_java_code
less_than
logical_negation
int_value (27)
generate_java_code
add_call_chain(<<C,e>>)
add_call_chain(<<D,D,C,B,c,INTEGER>>)
add_class(c)
bool_value (true)
add_attribute("e", "d", "c")
add_attribute("B", "A", "BOOLEAN")
subtraction
add_command("a", "C", <<["a", "BOOLEAN"]>>)
generate_java_code
add_attribute("INTEGER", "e", "C")
add_query("C", "BOOLEAN", <<["B", "a"], ["e", "BOOLEAN"], ["C", "INTEGER"], ["A", "BOOLEAN"], ["d", "INTEGER"]>>, "A")
numerical_negation
add_attribute("d", "C", "INTEGER")
numerical_negation
int_value (4)
greater_than
logical_negation
int_value (4)
bool_value (true)
modulo
add_call_chain(<<B,C,e>>)
add_attribute("d", "b", "INTEGER")
numerical_negation
disjunction
logical_negation
add_call_chain(<<c,A,C,c,b,C,C,A,INTEGER>>)
equals
bool_value (true)
add_command("B", "b", <<["A", "INTEGER"], ["A", "INTEGER"], ["b", "B"], ["d", "c"], ["C", "INTEGER"], ["a", "c"], ["b", "e"], ["B", "INTEGER"]>>)
bool_value (true)
add_call_chain(<<e>>)
add_command("D", "e", <<["D", "BOOLEAN"], ["c", "BOOLEAN"], ["c", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "INTEGER"], ["a", "INTEGER"], ["b", "BOOLEAN"]>>)
add_attribute("e", "d", "e")
add_attribute("e", "e", "a")
add_command("d", "C", <<["b", "C"]>>)
add_query("C", "e", <<["B", "INTEGER"], ["B", "INTEGER"]>>, "C")
add_attribute("b", "A", "BOOLEAN")
add_call_chain(<<B,B,B,B,B>>)
logical_negation
add_command("d", "A", <<["A", "BOOLEAN"], ["d", "c"], ["B", "BOOLEAN"]>>)
subtraction
type_check
add_attribute("C", "C", "INTEGER")
generate_java_code
add_command("c", "d", <<["D", "c"]>>)
bool_value (true)
add_call_chain(<<D,BOOLEAN,e,b,e>>)
int_value (3)
add_command("B", "e", <<["d", "BOOLEAN"]>>)
bool_value (false)
add_class(B)
add_attribute("D", "C", "B")
bool_value (true)
add_query("c", "B", <<["a", "A"]>>, "b")
add_attribute("BOOLEAN", "BOOLEAN", "INTEGER")
greater_than
add_call_chain(<<b>>)
modulo
logical_negation
add_attribute("B", "INTEGER", "INTEGER")
int_value (19)
numerical_negation
bool_value (false)
generate_java_code
add_call_chain(<<b,d>>)
add_class(C)
type_check
type_check
greater_than
add_call_chain(<<D,a,A,a>>)
add_command("C", "INTEGER", <<["INTEGER", "b"]>>)
type_check
logical_negation
int_value (44)
add_query("e", "b", <<["D", "d"], ["C", "b"], ["d", "A"], ["a", "INTEGER"], ["D", "A"], ["b", "d"]>>, "INTEGER")
add_command("B", "INTEGER", <<["A", "BOOLEAN"], ["A", "A"], ["A", "BOOLEAN"], ["c", "BOOLEAN"], ["d", "BOOLEAN"], ["A", "BOOLEAN"], ["A", "INTEGER"], ["INTEGER", "BOOLEAN"], ["B", "d"]>>)
logical_negation
numerical_negation
conjunction
conjunction
add_call_chain(<<a,a,b,B>>)
add_attribute("B", "b", "INTEGER")
add_query("B", "a", <<["INTEGER", "BOOLEAN"], ["C", "BOOLEAN"], ["D", "C"], ["b", "a"], ["d", "e"], ["e", "C"], ["b", "INTEGER"], ["C", "b"]>>, "e")
add_call_chain(<<c>>)
bool_value (false)
add_call_chain(<<c>>)
add_class(B)
add_attribute("e", "C", "B")
add_call_chain(<<d,D,B,B,C,e,INTEGER,d,B>>)
add_call_chain(<<A>>)
bool_value (true)
add_command("e", "B", <<["D", "a"], ["B", "INTEGER"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "a"]>>)
add_call_chain(<<b,D,BOOLEAN,C,BOOLEAN,c,C,a>>)
numerical_negation
int_value (1)
disjunction
conjunction
add_query("INTEGER", "b", <<["d", "INTEGER"], ["b", "INTEGER"], ["A", "C"], ["B", "INTEGER"], ["a", "a"], ["A", "BOOLEAN"], ["a", "INTEGER"], ["a", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>, "B")
int_value (20)
logical_negation
conjunction
add_command("d", "d", <<["a", "A"], ["c", "INTEGER"]>>)
add_call_chain(<<B>>)
numerical_negation
add_call_chain(<<e,d,d,D>>)
add_call_chain(<<D,B,B,b,BOOLEAN,e,b,D,b>>)
add_class(D)
add_query("INTEGER", "C", <<["B", "INTEGER"], ["A", "e"], ["C", "BOOLEAN"], ["b", "BOOLEAN"]>>, "d")
bool_value (true)
add_query("C", "c", <<["B", "BOOLEAN"], ["a", "BOOLEAN"]>>, "B")
numerical_negation
add_call_chain(<<D,BOOLEAN,B,D,D>>)
add_command("D", "b", <<["c", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "b"], ["B", "INTEGER"], ["e", "BOOLEAN"], ["D", "INTEGER"]>>)
logical_negation
add_query("INTEGER", "B", <<["a", "A"], ["a", "D"], ["B", "d"], ["D", "BOOLEAN"], ["c", "INTEGER"], ["C", "BOOLEAN"]>>, "e")
subtraction
add_query("b", "b", <<["A", "INTEGER"], ["B", "BOOLEAN"]>>, "c")
add_query("C", "A", <<["e", "INTEGER"], ["a", "BOOLEAN"], ["a", "C"], ["e", "A"], ["BOOLEAN", "BOOLEAN"], ["B", "BOOLEAN"], ["e", "D"]>>, "a")
int_value (15)
add_command("B", "BOOLEAN", <<["e", "B"], ["a", "c"], ["A", "B"], ["c", "INTEGER"]>>)
add_query("A", "A", <<["C", "INTEGER"], ["B", "INTEGER"], ["b", "INTEGER"], ["D", "INTEGER"]>>, "INTEGER")
add_class(BOOLEAN)
numerical_negation
greater_than
addition
add_command("BOOLEAN", "D", <<["B", "INTEGER"], ["A", "INTEGER"], ["D", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "INTEGER"], ["D", "e"], ["d", "BOOLEAN"], ["A", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>)
add_query("D", "INTEGER", <<["INTEGER", "A"], ["C", "BOOLEAN"], ["c", "BOOLEAN"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["A", "INTEGER"]>>, "INTEGER")
type_check
int_value (23)
add_query("BOOLEAN", "BOOLEAN", <<["c", "D"], ["B", "BOOLEAN"], ["A", "BOOLEAN"], ["B", "a"], ["a", "e"], ["a", "e"], ["a", "INTEGER"], ["a", "d"]>>, "INTEGER")
add_class(B)
type_check
add_command("B", "c", <<["C", "BOOLEAN"], ["c", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["A", "INTEGER"], ["b", "INTEGER"], ["B", "BOOLEAN"], ["e", "BOOLEAN"], ["d", "INTEGER"]>>)
bool_value (true)
add_command("d", "c", <<["a", "BOOLEAN"], ["B", "INTEGER"], ["e", "D"], ["A", "BOOLEAN"], ["B", "B"], ["c", "BOOLEAN"], ["D", "e"], ["e", "BOOLEAN"], ["b", "INTEGER"]>>)
add_class(b)
add_attribute("d", "D", "BOOLEAN")
logical_negation
modulo
disjunction
add_call_chain(<<a,A,A,C>>)
add_command("e", "D", <<["b", "b"]>>)
logical_negation
add_query("d", "e", <<["A", "BOOLEAN"], ["A", "INTEGER"], ["B", "INTEGER"], ["A", "c"], ["C", "BOOLEAN"], ["d", "INTEGER"], ["c", "c"], ["d", "INTEGER"], ["c", "INTEGER"]>>, "e")
add_class(a)
int_value (10)
add_query("B", "BOOLEAN", <<["B", "INTEGER"], ["C", "INTEGER"], ["e", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["A", "a"]>>, "C")
int_value (41)
add_call_chain(<<INTEGER,a>>)
bool_value (true)
add_query("A", "INTEGER", <<["D", "BOOLEAN"]>>, "a")
add_call_chain(<<b,d,A,d>>)
bool_value (false)
conjunction
