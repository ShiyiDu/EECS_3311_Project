addition
add_query("a", "A", <<["C", "INTEGER"], ["e", "INTEGER"], ["a", "A"], ["a", "BOOLEAN"]>>, "D")
conjunction
int_value (18)
bool_value (false)
int_value (30)
numerical_negation
add_call_chain(<<d,c,B,A,BOOLEAN,A>>)
add_query("A", "e", <<["a", "INTEGER"], ["e", "C"], ["d", "BOOLEAN"], ["b", "INTEGER"]>>, "e")
type_check
add_query("e", "c", <<["d", "INTEGER"], ["c", "INTEGER"]>>, "B")
add_attribute("A", "C", "C")
equals
add_command("A", "a", <<["a", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "C"], ["C", "a"], ["A", "INTEGER"], ["A", "C"], ["c", "a"], ["C", "INTEGER"]>>)
multiplication
add_command("D", "A", <<["BOOLEAN", "c"], ["B", "D"], ["d", "INTEGER"], ["e", "INTEGER"]>>)
add_attribute("D", "e", "INTEGER")
disjunction
add_query("D", "B", <<["B", "BOOLEAN"], ["INTEGER", "d"], ["A", "BOOLEAN"], ["a", "BOOLEAN"], ["A", "INTEGER"], ["D", "INTEGER"], ["D", "INTEGER"]>>, "a")
add_command("b", "D", <<["D", "BOOLEAN"], ["A", "INTEGER"]>>)
add_class(d)
bool_value (true)
add_attribute("D", "A", "BOOLEAN")
add_query("C", "b", <<["c", "INTEGER"]>>, "c")
logical_negation
add_query("C", "a", <<["e", "BOOLEAN"], ["D", "d"], ["A", "BOOLEAN"], ["D", "BOOLEAN"]>>, "b")
add_command("A", "b", <<["d", "BOOLEAN"], ["B", "BOOLEAN"], ["BOOLEAN", "A"], ["D", "BOOLEAN"], ["c", "INTEGER"], ["e", "INTEGER"], ["A", "BOOLEAN"], ["C", "INTEGER"], ["BOOLEAN", "C"]>>)
modulo
less_than
add_call_chain(<<D>>)
disjunction
add_call_chain(<<a>>)
add_command("INTEGER", "b", <<["D", "BOOLEAN"], ["D", "INTEGER"], ["D", "BOOLEAN"], ["B", "INTEGER"], ["C", "INTEGER"], ["b", "INTEGER"], ["d", "INTEGER"], ["b", "INTEGER"], ["B", "BOOLEAN"]>>)
modulo
add_command("B", "BOOLEAN", <<["C", "BOOLEAN"], ["e", "BOOLEAN"], ["e", "BOOLEAN"], ["A", "INTEGER"]>>)
add_class(BOOLEAN)
conjunction
add_query("INTEGER", "a", <<["D", "BOOLEAN"], ["a", "BOOLEAN"], ["a", "d"]>>, "e")
int_value (20)
generate_java_code
int_value (34)
add_attribute("D", "C", "BOOLEAN")
add_call_chain(<<C,c>>)
add_command("A", "b", <<["b", "INTEGER"]>>)
add_attribute("BOOLEAN", "C", "INTEGER")
add_class(D)
add_command("B", "A", <<["A", "INTEGER"], ["A", "INTEGER"], ["c", "INTEGER"], ["A", "BOOLEAN"], ["b", "INTEGER"], ["e", "BOOLEAN"], ["INTEGER", "INTEGER"], ["B", "BOOLEAN"], ["B", "BOOLEAN"]>>)
int_value (32)
bool_value (true)
add_query("BOOLEAN", "d", <<["e", "INTEGER"], ["C", "INTEGER"], ["c", "a"], ["B", "BOOLEAN"], ["a", "c"], ["B", "BOOLEAN"], ["a", "BOOLEAN"], ["d", "A"]>>, "d")
bool_value (false)
conjunction
add_command("A", "INTEGER", <<["D", "INTEGER"], ["D", "INTEGER"]>>)
add_query("a", "a", <<["a", "BOOLEAN"], ["D", "BOOLEAN"], ["e", "INTEGER"], ["a", "INTEGER"], ["B", "INTEGER"], ["a", "INTEGER"]>>, "e")
add_call_chain(<<c>>)
add_command("c", "D", <<["B", "e"]>>)
type_check
disjunction
add_query("A", "A", <<["D", "BOOLEAN"], ["a", "INTEGER"], ["a", "A"], ["C", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["b", "BOOLEAN"]>>, "B")
add_call_chain(<<b,A,B,e,C,D,c,D>>)
add_query("c", "b", <<["B", "INTEGER"], ["B", "INTEGER"], ["d", "BOOLEAN"], ["e", "INTEGER"], ["d", "A"], ["b", "INTEGER"], ["d", "BOOLEAN"], ["A", "e"], ["a", "BOOLEAN"]>>, "a")
add_class(b)
add_class(d)
add_attribute("c", "BOOLEAN", "d")
add_attribute("BOOLEAN", "A", "B")
conjunction
type_check
int_value (32)
add_attribute("B", "BOOLEAN", "BOOLEAN")
add_command("d", "B", <<["C", "d"], ["A", "BOOLEAN"], ["c", "BOOLEAN"], ["e", "e"], ["e", "INTEGER"]>>)
bool_value (true)
bool_value (false)
numerical_negation
quotient
generate_java_code
add_call_chain(<<C,d,b,D>>)
add_call_chain(<<INTEGER,b,A,c,A,B>>)
add_call_chain(<<A,a,B,A,a>>)
subtraction
add_class(D)
bool_value (true)
add_call_chain(<<BOOLEAN,c,A,d>>)
add_call_chain(<<a,B,C,D,D,d,D,B>>)
add_call_chain(<<a>>)
type_check
less_than
add_call_chain(<<C>>)
numerical_negation
add_class(a)
numerical_negation
add_call_chain(<<A,C,c>>)
add_call_chain(<<A,A,d,A,b,A,D,D>>)
equals
add_command("C", "B", <<["c", "D"], ["a", "INTEGER"], ["A", "INTEGER"], ["C", "INTEGER"], ["D", "D"], ["b", "A"], ["D", "A"], ["D", "A"]>>)
generate_java_code
generate_java_code
bool_value (false)
numerical_negation
bool_value (false)
add_query("D", "C", <<["c", "e"], ["A", "INTEGER"], ["a", "INTEGER"], ["e", "INTEGER"], ["C", "b"]>>, "d")
add_attribute("b", "C", "BOOLEAN")
add_attribute("e", "e", "INTEGER")
bool_value (false)
add_call_chain(<<A>>)
add_command("b", "e", <<["b", "e"], ["d", "D"], ["b", "BOOLEAN"], ["d", "BOOLEAN"], ["B", "INTEGER"], ["A", "BOOLEAN"], ["e", "INTEGER"]>>)
numerical_negation
quotient
add_command("D", "C", <<["A", "d"], ["B", "A"]>>)
add_attribute("B", "A", "a")
add_call_chain(<<e,B,C,D,d,C,BOOLEAN>>)
generate_java_code
bool_value (false)
logical_negation
conjunction
disjunction
add_class(D)
add_call_chain(<<a,D>>)
add_call_chain(<<b,A,B>>)
add_command("c", "d", <<["a", "INTEGER"], ["C", "INTEGER"], ["D", "BOOLEAN"]>>)
add_query("b", "a", <<["b", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "INTEGER"], ["e", "e"], ["A", "e"], ["D", "INTEGER"], ["C", "BOOLEAN"], ["a", "INTEGER"]>>, "C")
type_check
disjunction
disjunction
add_class(D)
bool_value (true)
add_class(c)
int_value (7)
add_call_chain(<<A,B,B,b>>)
int_value (11)
int_value (34)
int_value (3)
int_value (2)
add_command("c", "B", <<["D", "e"]>>)
numerical_negation
numerical_negation
int_value (44)
int_value (3)
add_command("a", "D", <<["D", "c"], ["d", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["B", "e"], ["D", "INTEGER"], ["d", "BOOLEAN"], ["e", "BOOLEAN"]>>)
add_command("b", "A", <<["e", "INTEGER"], ["e", "e"], ["d", "INTEGER"], ["C", "D"]>>)
add_attribute("B", "d", "d")
add_command("D", "INTEGER", <<["e", "BOOLEAN"]>>)
add_attribute("B", "A", "INTEGER")
add_attribute("e", "D", "INTEGER")
add_command("D", "a", <<["B", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "C"]>>)
generate_java_code
add_command("D", "C", <<["B", "BOOLEAN"]>>)
add_command("C", "A", <<["b", "INTEGER"], ["INTEGER", "INTEGER"], ["B", "BOOLEAN"], ["a", "INTEGER"], ["BOOLEAN", "INTEGER"], ["e", "BOOLEAN"]>>)
logical_negation
disjunction
add_call_chain(<<INTEGER,INTEGER,C,d>>)
logical_negation
add_call_chain(<<a,a>>)
add_class(b)
add_command("e", "A", <<["d", "D"], ["A", "BOOLEAN"]>>)
add_command("C", "B", <<["c", "D"], ["e", "BOOLEAN"], ["C", "INTEGER"]>>)
add_call_chain(<<B,b,B,c,C,a,c,c>>)
generate_java_code
add_call_chain(<<A,b,a,b,c,b,c,b>>)
add_command("b", "INTEGER", <<["e", "BOOLEAN"], ["A", "INTEGER"], ["C", "INTEGER"], ["a", "e"], ["e", "BOOLEAN"], ["d", "e"], ["b", "BOOLEAN"], ["INTEGER", "INTEGER"]>>)
add_call_chain(<<C>>)
logical_negation
addition
addition
add_attribute("INTEGER", "a", "BOOLEAN")
numerical_negation
add_attribute("d", "D", "INTEGER")
less_than
add_attribute("c", "BOOLEAN", "BOOLEAN")
add_class(a)
add_query("d", "D", <<["B", "INTEGER"], ["a", "e"]>>, "D")
int_value (49)
add_command("D", "B", <<["a", "d"], ["A", "BOOLEAN"], ["B", "A"], ["A", "BOOLEAN"], ["d", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>)
generate_java_code
add_call_chain(<<b,BOOLEAN,e,D,D,b>>)
int_value (39)
int_value (42)
add_attribute("d", "A", "d")
bool_value (true)
add_query("C", "B", <<["e", "INTEGER"], ["D", "INTEGER"], ["A", "INTEGER"], ["c", "BOOLEAN"], ["c", "INTEGER"]>>, "c")
add_call_chain(<<e,e>>)
add_query("c", "a", <<["A", "D"], ["d", "BOOLEAN"], ["c", "INTEGER"], ["c", "BOOLEAN"], ["D", "INTEGER"], ["D", "BOOLEAN"], ["D", "BOOLEAN"]>>, "B")
add_call_chain(<<D,b,a,B,INTEGER,D,D>>)
generate_java_code
generate_java_code
add_attribute("d", "d", "B")
bool_value (false)
numerical_negation
numerical_negation
add_command("D", "C", <<["a", "BOOLEAN"], ["a", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["A", "d"], ["INTEGER", "INTEGER"], ["BOOLEAN", "d"]>>)
add_class(a)
bool_value (false)
add_call_chain(<<C>>)
add_call_chain(<<d,D,A>>)
add_query("d", "D", <<["A", "INTEGER"], ["A", "INTEGER"], ["B", "d"], ["c", "INTEGER"], ["b", "INTEGER"], ["b", "d"], ["a", "BOOLEAN"]>>, "INTEGER")
add_call_chain(<<a,C,A,D,INTEGER,d,d,c,a>>)
add_query("C", "C", <<["e", "BOOLEAN"], ["C", "BOOLEAN"], ["d", "INTEGER"], ["B", "D"], ["c", "INTEGER"], ["B", "INTEGER"], ["a", "a"]>>, "c")
add_call_chain(<<B>>)
logical_negation
bool_value (true)
add_query("B", "B", <<["D", "a"], ["D", "INTEGER"], ["D", "INTEGER"], ["c", "BOOLEAN"], ["c", "INTEGER"], ["c", "BOOLEAN"]>>, "b")
add_command("D", "b", <<["b", "D"], ["INTEGER", "a"], ["e", "INTEGER"], ["A", "d"], ["B", "c"]>>)
conjunction
numerical_negation
type_check
bool_value (false)
numerical_negation
generate_java_code
int_value (26)
logical_negation
add_command("D", "C", <<["a", "A"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["c", "INTEGER"], ["a", "BOOLEAN"]>>)
add_query("d", "D", <<["a", "c"]>>, "c")
conjunction
add_attribute("C", "B", "INTEGER")
add_class(c)
add_query("d", "c", <<["A", "A"]>>, "d")
numerical_negation
add_attribute("C", "C", "d")
add_attribute("c", "BOOLEAN", "INTEGER")
type_check
add_query("D", "C", <<["B", "BOOLEAN"], ["d", "c"], ["d", "INTEGER"], ["a", "c"], ["D", "a"], ["B", "INTEGER"]>>, "D")
add_query("INTEGER", "b", <<["b", "INTEGER"]>>, "B")
logical_negation
bool_value (true)
conjunction
bool_value (false)
add_class(D)
bool_value (false)
add_call_chain(<<A,a,A>>)
conjunction
add_query("a", "d", <<["C", "BOOLEAN"], ["INTEGER", "D"], ["C", "BOOLEAN"], ["D", "INTEGER"], ["d", "BOOLEAN"], ["D", "INTEGER"], ["b", "INTEGER"], ["d", "B"], ["d", "BOOLEAN"]>>, "A")
add_command("c", "BOOLEAN", <<["a", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "INTEGER"], ["D", "INTEGER"], ["A", "INTEGER"]>>)
add_command("a", "d", <<["A", "INTEGER"], ["D", "C"], ["e", "d"], ["A", "INTEGER"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["A", "INTEGER"], ["A", "INTEGER"], ["C", "C"]>>)
generate_java_code
add_call_chain(<<a,c>>)
add_command("B", "c", <<["BOOLEAN", "e"], ["e", "BOOLEAN"], ["A", "INTEGER"], ["e", "A"]>>)
add_attribute("d", "B", "INTEGER")
add_call_chain(<<c>>)
greater_than
subtraction
bool_value (true)
numerical_negation
add_command("D", "d", <<["b", "INTEGER"], ["D", "BOOLEAN"], ["d", "BOOLEAN"], ["A", "INTEGER"], ["BOOLEAN", "INTEGER"], ["b", "INTEGER"], ["INTEGER", "INTEGER"], ["C", "d"], ["b", "INTEGER"]>>)
add_query("c", "c", <<["B", "BOOLEAN"], ["A", "c"], ["A", "C"], ["a", "BOOLEAN"], ["b", "INTEGER"], ["e", "BOOLEAN"], ["b", "BOOLEAN"]>>, "INTEGER")
add_call_chain(<<C,c,C,a>>)
add_call_chain(<<C,INTEGER,c,e,B,A,C,b,D>>)
logical_negation
logical_negation
numerical_negation
multiplication
numerical_negation
equals
add_attribute("a", "d", "a")
add_call_chain(<<C,c>>)
add_command("B", "e", <<["D", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["B", "INTEGER"], ["a", "INTEGER"], ["b", "a"]>>)
generate_java_code
bool_value (true)
add_command("D", "A", <<["d", "D"], ["D", "INTEGER"], ["C", "INTEGER"], ["d", "BOOLEAN"], ["c", "BOOLEAN"], ["D", "BOOLEAN"]>>)
generate_java_code
add_command("A", "A", <<["C", "INTEGER"], ["b", "INTEGER"], ["D", "INTEGER"], ["A", "BOOLEAN"], ["a", "INTEGER"], ["A", "c"], ["B", "D"], ["A", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>)
bool_value (true)
bool_value (true)
add_query("D", "e", <<["B", "INTEGER"], ["C", "B"], ["D", "BOOLEAN"], ["e", "INTEGER"], ["d", "INTEGER"], ["B", "INTEGER"], ["C", "BOOLEAN"], ["e", "BOOLEAN"], ["C", "INTEGER"]>>, "A")
add_command("a", "a", <<["e", "INTEGER"], ["e", "INTEGER"], ["c", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["c", "C"], ["B", "B"]>>)
int_value (3)
add_call_chain(<<D,D,INTEGER,D,a,e,e,BOOLEAN,d>>)
add_call_chain(<<a,e,e,B,c>>)
add_query("c", "B", <<["A", "INTEGER"]>>, "d")
conjunction
add_call_chain(<<a,c,D,b,d,B>>)
add_command("b", "e", <<["C", "b"], ["C", "INTEGER"]>>)
numerical_negation
subtraction
int_value (14)
add_attribute("A", "a", "INTEGER")
add_query("c", "a", <<["d", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "INTEGER"], ["c", "BOOLEAN"], ["c", "BOOLEAN"], ["b", "D"], ["a", "INTEGER"], ["a", "BOOLEAN"], ["d", "INTEGER"]>>, "BOOLEAN")
bool_value (false)
int_value (48)
add_attribute("d", "c", "INTEGER")
add_class(C)
add_query("c", "D", <<["D", "D"], ["a", "INTEGER"], ["D", "INTEGER"], ["d", "BOOLEAN"], ["A", "INTEGER"], ["c", "INTEGER"], ["D", "INTEGER"], ["B", "A"], ["a", "INTEGER"]>>, "C")
add_attribute("b", "INTEGER", "INTEGER")
add_call_chain(<<c,C,e>>)
multiplication
int_value (15)
conjunction
generate_java_code
add_command("C", "C", <<["C", "BOOLEAN"], ["b", "e"], ["INTEGER", "INTEGER"], ["D", "INTEGER"], ["B", "INTEGER"]>>)
logical_negation
