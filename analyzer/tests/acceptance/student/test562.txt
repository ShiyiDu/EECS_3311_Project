bool_value (true)
add_query("D", "D", <<["c", "BOOLEAN"], ["INTEGER", "a"], ["d", "d"], ["a", "INTEGER"], ["INTEGER", "D"], ["BOOLEAN", "BOOLEAN"], ["D", "a"]>>, "d")
add_call_chain(<<e,D,C,B,C,C,B>>)
disjunction
int_value (9)
add_call_chain(<<D,B,D,A,c,D,A>>)
numerical_negation
add_command("b", "a", <<["C", "BOOLEAN"]>>)
add_call_chain(<<e,e,C,c>>)
add_call_chain(<<b,C,B,B,A,C,a>>)
add_attribute("a", "A", "BOOLEAN")
logical_negation
int_value (2)
add_query("d", "c", <<["d", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["C", "INTEGER"], ["d", "BOOLEAN"], ["C", "B"], ["B", "BOOLEAN"]>>, "c")
disjunction
conjunction
add_attribute("D", "D", "INTEGER")
add_command("A", "BOOLEAN", <<["b", "BOOLEAN"], ["b", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "INTEGER"], ["B", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "BOOLEAN"]>>)
numerical_negation
bool_value (true)
add_call_chain(<<d,B,A,c>>)
bool_value (true)
add_call_chain(<<A,d,A,b,B,b,e,c,BOOLEAN>>)
add_class(BOOLEAN)
add_command("d", "D", <<["BOOLEAN", "INTEGER"], ["e", "BOOLEAN"], ["d", "BOOLEAN"], ["a", "INTEGER"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["D", "INTEGER"], ["B", "b"], ["C", "BOOLEAN"]>>)
add_command("D", "c", <<["B", "BOOLEAN"], ["B", "BOOLEAN"], ["b", "c"]>>)
add_class(d)
add_attribute("c", "C", "INTEGER")
type_check
bool_value (false)
add_command("d", "b", <<["b", "a"], ["INTEGER", "BOOLEAN"]>>)
less_than
int_value (22)
disjunction
disjunction
add_class(c)
add_call_chain(<<A,A,e,B,C>>)
generate_java_code
bool_value (false)
int_value (15)
add_attribute("D", "e", "A")
type_check
logical_negation
add_command("A", "d", <<["a", "INTEGER"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["D", "INTEGER"], ["B", "INTEGER"]>>)
add_attribute("b", "C", "INTEGER")
add_command("D", "A", <<["INTEGER", "INTEGER"], ["b", "BOOLEAN"], ["c", "INTEGER"], ["B", "INTEGER"], ["a", "d"], ["C", "C"]>>)
add_command("D", "INTEGER", <<["C", "INTEGER"], ["B", "BOOLEAN"], ["INTEGER", "D"], ["C", "BOOLEAN"]>>)
add_query("c", "C", <<["B", "BOOLEAN"], ["A", "A"]>>, "a")
add_call_chain(<<e,a,INTEGER,D,D>>)
add_command("a", "B", <<["A", "BOOLEAN"], ["b", "INTEGER"], ["C", "BOOLEAN"], ["D", "c"]>>)
type_check
bool_value (true)
add_attribute("d", "c", "B")
add_call_chain(<<BOOLEAN,A,e,e,a,A,D,INTEGER>>)
numerical_negation
add_call_chain(<<INTEGER,A,e>>)
disjunction
add_query("B", "b", <<["D", "INTEGER"], ["b", "INTEGER"], ["c", "C"], ["B", "BOOLEAN"], ["d", "INTEGER"], ["INTEGER", "A"]>>, "b")
int_value (33)
add_query("B", "A", <<["C", "a"], ["c", "D"], ["A", "B"], ["D", "BOOLEAN"], ["c", "INTEGER"], ["a", "BOOLEAN"], ["b", "a"], ["e", "INTEGER"]>>, "BOOLEAN")
bool_value (false)
numerical_negation
add_call_chain(<<e,D>>)
numerical_negation
add_call_chain(<<d,A,e,INTEGER,e,e,C>>)
add_query("e", "D", <<["B", "INTEGER"], ["B", "BOOLEAN"]>>, "b")
add_query("b", "A", <<["C", "B"], ["C", "D"], ["D", "e"], ["d", "INTEGER"], ["B", "INTEGER"], ["B", "BOOLEAN"], ["B", "BOOLEAN"], ["e", "BOOLEAN"], ["c", "BOOLEAN"]>>, "a")
add_attribute("D", "D", "INTEGER")
add_attribute("D", "d", "A")
add_query("a", "D", <<["D", "A"], ["b", "INTEGER"], ["B", "D"], ["b", "INTEGER"], ["b", "c"], ["b", "A"], ["d", "BOOLEAN"]>>, "a")
add_query("B", "A", <<["B", "INTEGER"], ["a", "D"], ["e", "BOOLEAN"], ["e", "C"], ["a", "INTEGER"], ["INTEGER", "INTEGER"], ["A", "A"]>>, "B")
add_command("BOOLEAN", "C", <<["d", "INTEGER"], ["b", "D"], ["a", "C"], ["C", "B"], ["C", "BOOLEAN"], ["A", "B"], ["c", "INTEGER"], ["b", "INTEGER"]>>)
numerical_negation
add_command("B", "D", <<["BOOLEAN", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["a", "INTEGER"], ["b", "a"]>>)
add_attribute("b", "B", "b")
add_class(d)
add_class(A)
int_value (32)
add_call_chain(<<e,A,INTEGER,d,a>>)
logical_negation
add_command("A", "C", <<["INTEGER", "BOOLEAN"], ["c", "BOOLEAN"]>>)
int_value (22)
add_command("e", "B", <<["D", "c"], ["B", "INTEGER"], ["C", "e"], ["A", "INTEGER"], ["a", "INTEGER"], ["A", "INTEGER"], ["C", "C"], ["B", "BOOLEAN"], ["D", "BOOLEAN"]>>)
int_value (33)
type_check
bool_value (true)
int_value (8)
generate_java_code
add_attribute("b", "b", "a")
conjunction
equals
logical_negation
equals
add_command("D", "a", <<["e", "INTEGER"], ["d", "BOOLEAN"], ["e", "INTEGER"], ["e", "INTEGER"], ["b", "BOOLEAN"], ["C", "INTEGER"], ["B", "INTEGER"], ["D", "INTEGER"], ["e", "A"]>>)
add_command("b", "BOOLEAN", <<["d", "b"], ["a", "INTEGER"], ["C", "BOOLEAN"], ["a", "BOOLEAN"]>>)
greater_than
logical_negation
logical_negation
logical_negation
add_class(BOOLEAN)
add_call_chain(<<A,e,a,c,c,B,C>>)
bool_value (true)
add_command("B", "B", <<["D", "d"], ["INTEGER", "INTEGER"], ["e", "INTEGER"], ["C", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>)
add_attribute("b", "A", "INTEGER")
add_class(INTEGER)
add_call_chain(<<e,b,B,c,D,A,D>>)
generate_java_code
add_query("C", "B", <<["d", "D"], ["B", "C"], ["A", "INTEGER"], ["D", "B"], ["e", "BOOLEAN"]>>, "e")
add_query("b", "A", <<["d", "d"]>>, "A")
add_command("e", "D", <<["D", "INTEGER"]>>)
bool_value (false)
add_query("e", "C", <<["D", "BOOLEAN"], ["b", "INTEGER"], ["C", "e"], ["INTEGER", "B"], ["B", "INTEGER"], ["INTEGER", "INTEGER"], ["B", "C"], ["d", "INTEGER"]>>, "D")
bool_value (false)
int_value (36)
add_attribute("d", "A", "INTEGER")
add_call_chain(<<e,C,D,a,B,INTEGER,d>>)
add_call_chain(<<C,D,a,A,D,C,e,e>>)
add_call_chain(<<d,b,A,d,INTEGER,A,A,B,b>>)
add_query("INTEGER", "INTEGER", <<["A", "BOOLEAN"], ["e", "e"], ["A", "BOOLEAN"], ["d", "b"], ["a", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "INTEGER"], ["INTEGER", "INTEGER"]>>, "e")
add_query("b", "c", <<["BOOLEAN", "A"], ["B", "A"], ["BOOLEAN", "INTEGER"], ["B", "INTEGER"], ["a", "A"], ["C", "BOOLEAN"]>>, "e")
modulo
numerical_negation
disjunction
logical_negation
int_value (43)
generate_java_code
equals
type_check
add_class(c)
int_value (40)
int_value (34)
add_call_chain(<<A,a,BOOLEAN>>)
add_class(B)
add_call_chain(<<C,INTEGER,b,a,INTEGER,C,d,C,e>>)
add_command("A", "B", <<["B", "INTEGER"], ["e", "D"], ["e", "INTEGER"], ["b", "BOOLEAN"], ["d", "INTEGER"], ["BOOLEAN", "b"]>>)
add_call_chain(<<A,D,b,e,C,D,d>>)
add_class(a)
add_attribute("B", "B", "C")
type_check
multiplication
bool_value (false)
add_query("b", "c", <<["a", "INTEGER"], ["INTEGER", "BOOLEAN"], ["A", "INTEGER"], ["d", "a"], ["b", "a"]>>, "A")
disjunction
add_command("D", "a", <<["e", "BOOLEAN"], ["D", "INTEGER"], ["b", "INTEGER"], ["c", "INTEGER"], ["e", "C"]>>)
add_call_chain(<<a,INTEGER,B,b,D>>)
add_command("A", "C", <<["C", "a"], ["e", "A"], ["BOOLEAN", "INTEGER"], ["A", "INTEGER"], ["C", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["a", "c"], ["D", "INTEGER"], ["D", "a"]>>)
add_call_chain(<<C,e,D,b,b>>)
bool_value (false)
disjunction
add_command("C", "A", <<["BOOLEAN", "BOOLEAN"], ["B", "B"], ["d", "INTEGER"], ["B", "INTEGER"]>>)
add_command("B", "C", <<["C", "INTEGER"], ["D", "INTEGER"]>>)
int_value (27)
numerical_negation
add_call_chain(<<d,C>>)
numerical_negation
add_attribute("b", "B", "INTEGER")
less_than
add_call_chain(<<INTEGER,c,c,c,BOOLEAN,b,c,B>>)
numerical_negation
generate_java_code
add_call_chain(<<C,c>>)
add_query("D", "d", <<["a", "BOOLEAN"], ["INTEGER", "INTEGER"], ["A", "A"], ["e", "BOOLEAN"], ["B", "BOOLEAN"], ["e", "BOOLEAN"]>>, "D")
bool_value (false)
add_command("INTEGER", "B", <<["b", "BOOLEAN"], ["D", "BOOLEAN"], ["C", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>)
add_call_chain(<<D,c,D,C,INTEGER,B,C>>)
int_value (11)
add_call_chain(<<a,A>>)
bool_value (false)
add_attribute("INTEGER", "c", "INTEGER")
bool_value (true)
add_call_chain(<<D,B,c,c,D,B,B,C>>)
add_call_chain(<<c,c,D,c,b,b,e,c,c>>)
quotient
greater_than
add_query("c", "a", <<["a", "INTEGER"], ["D", "INTEGER"], ["C", "BOOLEAN"], ["d", "c"], ["INTEGER", "BOOLEAN"], ["e", "A"], ["c", "INTEGER"], ["a", "D"]>>, "D")
add_query("a", "e", <<["e", "b"], ["D", "INTEGER"], ["C", "BOOLEAN"], ["B", "D"], ["A", "b"], ["e", "BOOLEAN"], ["a", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "INTEGER"]>>, "c")
less_than
numerical_negation
add_command("a", "INTEGER", <<["a", "a"], ["INTEGER", "A"], ["e", "BOOLEAN"], ["c", "BOOLEAN"], ["c", "BOOLEAN"], ["e", "BOOLEAN"], ["e", "c"], ["c", "BOOLEAN"]>>)
subtraction
add_call_chain(<<B,B,B,c,BOOLEAN,a,B,d>>)
logical_negation
multiplication
add_call_chain(<<B,C,B,a,e,d,c,INTEGER,e>>)
add_call_chain(<<A,c,c,C>>)
add_command("B", "D", <<["d", "INTEGER"], ["D", "B"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["INTEGER", "INTEGER"], ["INTEGER", "INTEGER"], ["D", "C"], ["D", "BOOLEAN"]>>)
disjunction
add_attribute("B", "B", "BOOLEAN")
add_call_chain(<<INTEGER,d,C,A,BOOLEAN>>)
bool_value (true)
add_command("A", "a", <<["D", "INTEGER"], ["d", "BOOLEAN"], ["e", "INTEGER"], ["A", "A"], ["c", "BOOLEAN"], ["B", "BOOLEAN"], ["d", "BOOLEAN"], ["A", "d"]>>)
add_query("c", "B", <<["e", "BOOLEAN"], ["a", "INTEGER"]>>, "BOOLEAN")
add_command("B", "B", <<["c", "BOOLEAN"], ["a", "e"], ["INTEGER", "c"]>>)
logical_negation
add_class(d)
add_query("d", "D", <<["c", "INTEGER"], ["D", "e"]>>, "d")
add_command("d", "a", <<["c", "BOOLEAN"], ["A", "a"], ["c", "INTEGER"], ["D", "BOOLEAN"], ["e", "INTEGER"], ["e", "d"]>>)
less_than
add_command("C", "c", <<["B", "INTEGER"], ["D", "c"], ["BOOLEAN", "b"], ["d", "INTEGER"], ["C", "d"]>>)
bool_value (false)
numerical_negation
add_class(C)
add_command("B", "A", <<["d", "C"], ["b", "c"], ["b", "a"], ["c", "INTEGER"], ["C", "INTEGER"], ["B", "INTEGER"]>>)
add_query("D", "B", <<["C", "D"], ["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["A", "B"], ["e", "INTEGER"], ["D", "BOOLEAN"], ["c", "INTEGER"], ["d", "INTEGER"]>>, "C")
add_call_chain(<<D,d,c,b,d,BOOLEAN,C,INTEGER,D>>)
add_command("INTEGER", "D", <<["BOOLEAN", "BOOLEAN"], ["e", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["d", "B"]>>)
type_check
modulo
logical_negation
add_query("c", "B", <<["C", "BOOLEAN"], ["A", "INTEGER"], ["b", "B"], ["B", "a"], ["INTEGER", "BOOLEAN"], ["c", "c"], ["d", "INTEGER"]>>, "d")
add_class(B)
bool_value (true)
type_check
bool_value (false)
add_command("e", "A", <<["e", "INTEGER"], ["B", "BOOLEAN"], ["B", "INTEGER"], ["D", "BOOLEAN"], ["e", "INTEGER"], ["INTEGER", "BOOLEAN"], ["c", "BOOLEAN"], ["d", "d"]>>)
add_attribute("b", "e", "d")
generate_java_code
int_value (48)
add_call_chain(<<d,C,e>>)
type_check
less_than
logical_negation
conjunction
generate_java_code
add_query("C", "BOOLEAN", <<["B", "BOOLEAN"], ["C", "D"], ["a", "BOOLEAN"], ["e", "A"]>>, "e")
add_command("c", "INTEGER", <<["a", "BOOLEAN"], ["e", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "BOOLEAN"]>>)
bool_value (true)
add_call_chain(<<e>>)
int_value (43)
add_call_chain(<<D,C,BOOLEAN,e>>)
