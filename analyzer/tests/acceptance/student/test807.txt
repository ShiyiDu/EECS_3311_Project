conjunction
add_command("b", "b", <<["C", "INTEGER"], ["B", "INTEGER"], ["A", "BOOLEAN"], ["B", "e"], ["d", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["e", "INTEGER"], ["b", "INTEGER"]>>)
int_value (40)
add_attribute("A", "c", "d")
add_call_chain(<<d,B,b,d,C,e,c>>)
type_check
add_command("INTEGER", "INTEGER", <<["b", "D"], ["C", "INTEGER"], ["a", "INTEGER"], ["C", "BOOLEAN"], ["c", "D"], ["C", "INTEGER"], ["e", "INTEGER"]>>)
add_call_chain(<<D,e,a,A>>)
subtraction
less_than
add_call_chain(<<a,C,B,b>>)
add_query("d", "INTEGER", <<["c", "INTEGER"], ["A", "BOOLEAN"], ["D", "A"]>>, "b")
bool_value (false)
less_than
add_attribute("D", "c", "a")
bool_value (false)
add_call_chain(<<A>>)
multiplication
add_call_chain(<<BOOLEAN,b>>)
add_command("B", "D", <<["b", "INTEGER"], ["B", "d"], ["B", "BOOLEAN"], ["INTEGER", "INTEGER"], ["C", "BOOLEAN"]>>)
add_attribute("C", "A", "INTEGER")
add_query("D", "D", <<["D", "b"], ["b", "INTEGER"], ["BOOLEAN", "INTEGER"], ["A", "INTEGER"]>>, "B")
numerical_negation
numerical_negation
int_value (46)
numerical_negation
add_class(BOOLEAN)
add_call_chain(<<e>>)
type_check
numerical_negation
disjunction
add_call_chain(<<B>>)
add_command("e", "c", <<["a", "BOOLEAN"], ["d", "BOOLEAN"], ["e", "INTEGER"], ["BOOLEAN", "D"], ["d", "BOOLEAN"]>>)
add_command("a", "b", <<["b", "INTEGER"], ["INTEGER", "BOOLEAN"], ["a", "BOOLEAN"]>>)
add_command("C", "INTEGER", <<["e", "BOOLEAN"], ["A", "BOOLEAN"]>>)
add_call_chain(<<c,C,d,A>>)
add_call_chain(<<C,b>>)
generate_java_code
add_command("d", "INTEGER", <<["C", "INTEGER"], ["B", "b"], ["D", "BOOLEAN"], ["A", "B"], ["b", "INTEGER"], ["B", "D"], ["A", "c"], ["C", "INTEGER"], ["A", "BOOLEAN"]>>)
add_call_chain(<<B>>)
add_call_chain(<<A,C,D,D,C,D,b,c>>)
logical_negation
add_call_chain(<<B,B,c,e,e,B,b,C>>)
int_value (30)
conjunction
add_attribute("b", "a", "BOOLEAN")
equals
add_query("BOOLEAN", "D", <<["b", "BOOLEAN"], ["C", "B"], ["a", "BOOLEAN"], ["d", "BOOLEAN"], ["a", "BOOLEAN"], ["A", "INTEGER"], ["C", "INTEGER"], ["C", "d"]>>, "BOOLEAN")
int_value (16)
int_value (3)
add_attribute("A", "D", "D")
add_attribute("b", "A", "INTEGER")
addition
logical_negation
logical_negation
numerical_negation
int_value (3)
add_call_chain(<<c,B,A,BOOLEAN,b,A>>)
add_attribute("D", "B", "INTEGER")
bool_value (false)
add_attribute("INTEGER", "b", "BOOLEAN")
conjunction
logical_negation
add_call_chain(<<d,A,A,C,C>>)
add_class(c)
add_call_chain(<<b,e,d,D,A,e>>)
add_query("A", "c", <<["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "BOOLEAN"], ["D", "INTEGER"], ["D", "a"]>>, "d")
add_call_chain(<<b,d,INTEGER,c,B>>)
modulo
add_call_chain(<<C>>)
add_command("B", "e", <<["BOOLEAN", "C"], ["A", "INTEGER"]>>)
add_call_chain(<<b,B,A,c,a>>)
numerical_negation
less_than
numerical_negation
bool_value (false)
bool_value (true)
add_attribute("D", "b", "BOOLEAN")
int_value (48)
add_class(b)
modulo
type_check
add_call_chain(<<c,d,c,a,B,D>>)
add_command("B", "A", <<["A", "BOOLEAN"], ["INTEGER", "A"], ["C", "B"]>>)
int_value (3)
add_call_chain(<<D,BOOLEAN,a,C,D,d,A,D>>)
subtraction
bool_value (false)
add_command("e", "D", <<["e", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "BOOLEAN"], ["c", "A"], ["C", "BOOLEAN"], ["D", "C"]>>)
modulo
add_call_chain(<<A,B,C,a,e,b,B,B,c>>)
int_value (44)
add_attribute("c", "A", "BOOLEAN")
numerical_negation
add_command("b", "A", <<["B", "INTEGER"], ["A", "B"], ["a", "B"], ["c", "A"]>>)
int_value (21)
conjunction
add_call_chain(<<e,c>>)
add_attribute("a", "C", "INTEGER")
add_command("b", "c", <<["a", "D"], ["b", "INTEGER"], ["D", "INTEGER"], ["INTEGER", "C"], ["BOOLEAN", "INTEGER"], ["d", "BOOLEAN"], ["d", "BOOLEAN"], ["C", "D"], ["a", "INTEGER"]>>)
int_value (18)
add_command("a", "A", <<["b", "D"]>>)
add_command("C", "A", <<["D", "B"], ["d", "INTEGER"], ["D", "INTEGER"], ["B", "BOOLEAN"], ["INTEGER", "INTEGER"]>>)
add_attribute("b", "C", "INTEGER")
numerical_negation
add_call_chain(<<C,d,c,B>>)
equals
logical_negation
add_attribute("A", "D", "INTEGER")
int_value (7)
add_class(b)
numerical_negation
add_query("B", "A", <<["B", "BOOLEAN"], ["b", "BOOLEAN"], ["A", "e"], ["a", "a"], ["D", "INTEGER"], ["a", "BOOLEAN"], ["a", "d"]>>, "C")
disjunction
add_call_chain(<<a,e>>)
numerical_negation
add_call_chain(<<B,b,e,B,A,e,C,BOOLEAN,INTEGER>>)
int_value (8)
bool_value (false)
numerical_negation
add_class(a)
add_attribute("D", "c", "e")
conjunction
add_query("B", "C", <<["A", "BOOLEAN"], ["a", "INTEGER"], ["C", "INTEGER"], ["INTEGER", "INTEGER"], ["c", "a"], ["B", "INTEGER"], ["D", "INTEGER"], ["e", "INTEGER"], ["INTEGER", "INTEGER"]>>, "C")
conjunction
add_attribute("C", "B", "BOOLEAN")
int_value (20)
add_attribute("C", "B", "INTEGER")
add_query("B", "b", <<["A", "e"], ["e", "e"], ["C", "INTEGER"], ["d", "INTEGER"], ["A", "a"], ["e", "INTEGER"], ["BOOLEAN", "d"], ["C", "D"]>>, "D")
bool_value (false)
int_value (22)
int_value (12)
add_class(BOOLEAN)
numerical_negation
disjunction
numerical_negation
add_call_chain(<<d,b,e>>)
add_attribute("D", "e", "INTEGER")
add_attribute("a", "d", "d")
add_query("A", "b", <<["A", "BOOLEAN"], ["c", "INTEGER"], ["B", "d"], ["d", "BOOLEAN"], ["d", "BOOLEAN"]>>, "c")
add_command("c", "c", <<["a", "INTEGER"], ["D", "INTEGER"]>>)
subtraction
logical_negation
add_attribute("b", "INTEGER", "C")
add_command("a", "B", <<["c", "INTEGER"], ["D", "B"], ["C", "INTEGER"], ["b", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "b"], ["A", "INTEGER"], ["c", "c"], ["D", "C"]>>)
conjunction
add_attribute("d", "A", "BOOLEAN")
generate_java_code
add_class(c)
add_call_chain(<<a,D,BOOLEAN,B,b,b>>)
add_command("A", "e", <<["B", "D"], ["a", "d"], ["INTEGER", "A"]>>)
add_attribute("b", "D", "INTEGER")
numerical_negation
numerical_negation
add_command("e", "A", <<["a", "b"], ["c", "INTEGER"], ["D", "BOOLEAN"]>>)
numerical_negation
add_call_chain(<<INTEGER,A>>)
equals
add_call_chain(<<B,d,B>>)
add_attribute("BOOLEAN", "B", "e")
logical_negation
add_call_chain(<<B,d,B,b,b,D,b,a,b>>)
add_call_chain(<<b,d,d,D,BOOLEAN,A,a,e,e>>)
generate_java_code
add_attribute("b", "c", "BOOLEAN")
type_check
add_query("B", "BOOLEAN", <<["A", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["C", "INTEGER"], ["A", "INTEGER"], ["b", "BOOLEAN"], ["D", "BOOLEAN"]>>, "C")
add_call_chain(<<d,c,C,BOOLEAN,e,d,C,A>>)
add_command("A", "b", <<["C", "C"], ["BOOLEAN", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "C"]>>)
type_check
add_call_chain(<<c,D,D,B,b,a>>)
type_check
add_class(d)
add_query("D", "B", <<["e", "BOOLEAN"], ["b", "C"], ["B", "INTEGER"], ["B", "BOOLEAN"], ["C", "BOOLEAN"]>>, "D")
bool_value (true)
logical_negation
multiplication
add_call_chain(<<c,b>>)
type_check
bool_value (false)
add_call_chain(<<D,d>>)
greater_than
int_value (30)
add_class(B)
add_call_chain(<<BOOLEAN,a>>)
numerical_negation
add_call_chain(<<C,A,C>>)
add_class(B)
bool_value (false)
numerical_negation
modulo
add_attribute("a", "B", "C")
logical_negation
add_call_chain(<<e>>)
add_attribute("c", "INTEGER", "INTEGER")
numerical_negation
add_call_chain(<<B,D,d,B,a>>)
add_attribute("d", "A", "INTEGER")
add_call_chain(<<BOOLEAN,c,c,d,A,B>>)
add_call_chain(<<A,BOOLEAN,c,D,b>>)
add_attribute("B", "e", "INTEGER")
add_call_chain(<<B,C,a,B,D>>)
add_class(b)
numerical_negation
disjunction
multiplication
generate_java_code
add_command("BOOLEAN", "e", <<["d", "c"], ["D", "BOOLEAN"], ["b", "INTEGER"]>>)
add_command("b", "A", <<["d", "INTEGER"], ["a", "BOOLEAN"], ["INTEGER", "c"], ["A", "INTEGER"]>>)
bool_value (false)
bool_value (false)
less_than
logical_negation
add_call_chain(<<b,B,e,A,A>>)
bool_value (false)
numerical_negation
quotient
add_attribute("e", "d", "INTEGER")
add_call_chain(<<e>>)
