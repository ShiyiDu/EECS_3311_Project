less_than
add_command("C", "B", <<["A", "INTEGER"], ["d", "BOOLEAN"], ["e", "INTEGER"], ["d", "INTEGER"], ["b", "BOOLEAN"]>>)
logical_negation
logical_negation
add_call_chain(<<c,A,B,a,D,D,BOOLEAN>>)
add_call_chain(<<D,b,A,C,e,INTEGER>>)
add_call_chain(<<d,C,B,D,e,b>>)
numerical_negation
generate_java_code
add_attribute("c", "b", "INTEGER")
type_check
type_check
add_attribute("b", "D", "INTEGER")
add_command("INTEGER", "A", <<["e", "a"], ["B", "BOOLEAN"], ["A", "A"], ["a", "INTEGER"], ["d", "BOOLEAN"], ["A", "INTEGER"], ["C", "c"]>>)
int_value (1)
add_call_chain(<<c,INTEGER,d,BOOLEAN,a,d,b,A>>)
add_call_chain(<<A,C,b,c,a,b,b>>)
disjunction
add_attribute("C", "a", "INTEGER")
logical_negation
add_query("e", "e", <<["B", "BOOLEAN"], ["C", "INTEGER"], ["D", "BOOLEAN"], ["b", "c"], ["BOOLEAN", "d"], ["e", "INTEGER"], ["C", "INTEGER"], ["C", "INTEGER"]>>, "d")
add_call_chain(<<D,C,a,BOOLEAN,c,c,A,b>>)
numerical_negation
numerical_negation
add_call_chain(<<b,c,e,e,e>>)
subtraction
add_command("A", "B", <<["C", "B"], ["A", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>)
add_command("A", "C", <<["B", "B"], ["d", "BOOLEAN"], ["b", "INTEGER"], ["e", "INTEGER"], ["C", "d"], ["A", "INTEGER"]>>)
add_command("d", "A", <<["BOOLEAN", "BOOLEAN"]>>)
add_call_chain(<<C,c,b,e,C,a,C,a>>)
add_command("b", "c", <<["C", "BOOLEAN"], ["d", "a"], ["D", "INTEGER"], ["D", "BOOLEAN"], ["b", "INTEGER"], ["C", "e"]>>)
add_attribute("c", "A", "BOOLEAN")
bool_value (true)
add_query("D", "B", <<["D", "d"], ["d", "BOOLEAN"], ["e", "e"], ["INTEGER", "INTEGER"], ["B", "BOOLEAN"], ["d", "INTEGER"], ["B", "INTEGER"]>>, "INTEGER")
add_command("D", "d", <<["D", "BOOLEAN"], ["D", "A"], ["a", "e"]>>)
add_query("e", "A", <<["BOOLEAN", "BOOLEAN"], ["a", "BOOLEAN"]>>, "BOOLEAN")
add_command("D", "BOOLEAN", <<["e", "B"], ["d", "C"], ["a", "D"]>>)
add_class(d)
add_class(A)
bool_value (false)
add_attribute("d", "d", "BOOLEAN")
add_call_chain(<<B,b,d,A,D>>)
bool_value (false)
add_call_chain(<<c,c,c,INTEGER,a,BOOLEAN,B>>)
generate_java_code
add_call_chain(<<A,e,INTEGER,c,INTEGER,INTEGER>>)
int_value (11)
add_class(C)
generate_java_code
add_query("d", "B", <<["D", "INTEGER"]>>, "D")
modulo
add_call_chain(<<D,c,c,b,d,d>>)
disjunction
add_query("c", "B", <<["BOOLEAN", "BOOLEAN"], ["A", "INTEGER"], ["a", "BOOLEAN"], ["e", "INTEGER"], ["d", "BOOLEAN"]>>, "A")
add_query("D", "e", <<["c", "INTEGER"], ["a", "d"], ["e", "BOOLEAN"], ["a", "BOOLEAN"], ["e", "BOOLEAN"]>>, "e")
add_class(A)
add_attribute("d", "b", "INTEGER")
add_query("d", "B", <<["b", "INTEGER"], ["A", "INTEGER"], ["C", "INTEGER"], ["C", "BOOLEAN"]>>, "e")
add_query("D", "b", <<["A", "INTEGER"], ["D", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["e", "INTEGER"], ["e", "d"]>>, "D")
add_class(b)
modulo
logical_negation
add_call_chain(<<C>>)
type_check
bool_value (true)
add_command("b", "a", <<["C", "e"], ["c", "INTEGER"], ["d", "INTEGER"], ["C", "INTEGER"], ["d", "B"], ["A", "BOOLEAN"], ["c", "b"], ["d", "A"]>>)
add_class(C)
greater_than
add_call_chain(<<a,b,d>>)
bool_value (false)
bool_value (false)
add_attribute("C", "d", "d")
bool_value (true)
disjunction
int_value (49)
add_call_chain(<<B,a,C,d>>)
numerical_negation
add_query("C", "D", <<["B", "BOOLEAN"], ["C", "D"], ["B", "B"], ["d", "BOOLEAN"], ["INTEGER", "D"], ["D", "INTEGER"], ["D", "A"]>>, "b")
add_query("C", "a", <<["BOOLEAN", "a"], ["A", "d"], ["B", "BOOLEAN"], ["a", "INTEGER"], ["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["d", "a"]>>, "INTEGER")
add_call_chain(<<C>>)
add_command("B", "C", <<["a", "BOOLEAN"], ["b", "INTEGER"], ["D", "INTEGER"], ["e", "BOOLEAN"], ["INTEGER", "INTEGER"], ["d", "A"], ["B", "BOOLEAN"], ["c", "INTEGER"], ["B", "D"]>>)
generate_java_code
quotient
numerical_negation
int_value (16)
add_query("INTEGER", "A", <<["e", "BOOLEAN"], ["B", "b"], ["d", "BOOLEAN"], ["b", "c"], ["a", "C"]>>, "c")
add_call_chain(<<a,D,B,B,e,D,B,C,INTEGER>>)
add_command("C", "D", <<["c", "INTEGER"], ["D", "INTEGER"], ["b", "BOOLEAN"]>>)
logical_negation
add_query("b", "c", <<["D", "INTEGER"], ["c", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["d", "INTEGER"], ["INTEGER", "BOOLEAN"], ["d", "C"], ["BOOLEAN", "C"]>>, "BOOLEAN")
generate_java_code
generate_java_code
add_command("A", "B", <<["b", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["a", "INTEGER"], ["B", "BOOLEAN"], ["b", "INTEGER"], ["d", "BOOLEAN"]>>)
subtraction
disjunction
generate_java_code
add_call_chain(<<B,BOOLEAN,b,e>>)
less_than
bool_value (false)
bool_value (true)
add_query("D", "B", <<["d", "INTEGER"], ["e", "e"], ["a", "INTEGER"], ["INTEGER", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["B", "INTEGER"], ["D", "BOOLEAN"], ["C", "INTEGER"], ["d", "INTEGER"]>>, "b")
int_value (46)
generate_java_code
add_call_chain(<<C,d,b,d,D,INTEGER>>)
add_query("c", "c", <<["C", "INTEGER"], ["b", "C"], ["C", "A"], ["d", "BOOLEAN"], ["INTEGER", "B"], ["d", "c"]>>, "d")
add_attribute("INTEGER", "INTEGER", "INTEGER")
add_query("c", "C", <<["A", "b"], ["e", "D"], ["A", "BOOLEAN"], ["a", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["C", "a"], ["a", "d"], ["D", "INTEGER"], ["INTEGER", "A"]>>, "c")
numerical_negation
add_call_chain(<<c,BOOLEAN,BOOLEAN,b,c>>)
equals
logical_negation
add_class(e)
add_call_chain(<<A,d,e>>)
conjunction
type_check
add_call_chain(<<A>>)
bool_value (true)
add_call_chain(<<C,a,e,d,D,e,A,D,d>>)
generate_java_code
bool_value (true)
add_class(D)
add_query("e", "D", <<["A", "D"], ["e", "D"], ["D", "INTEGER"], ["B", "INTEGER"], ["A", "INTEGER"]>>, "a")
add_command("d", "B", <<["C", "INTEGER"], ["C", "BOOLEAN"], ["D", "BOOLEAN"], ["D", "BOOLEAN"]>>)
logical_negation
add_query("INTEGER", "e", <<["c", "INTEGER"], ["B", "INTEGER"], ["B", "INTEGER"], ["A", "INTEGER"], ["D", "INTEGER"], ["D", "d"], ["C", "B"], ["a", "INTEGER"]>>, "b")
less_than
add_command("a", "e", <<["e", "BOOLEAN"], ["D", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "INTEGER"], ["b", "INTEGER"], ["e", "INTEGER"], ["b", "BOOLEAN"], ["c", "A"]>>)
addition
logical_negation
bool_value (false)
bool_value (true)
quotient
add_call_chain(<<c,d>>)
bool_value (true)
add_call_chain(<<a>>)
add_command("INTEGER", "A", <<["D", "INTEGER"], ["B", "BOOLEAN"]>>)
add_class(a)
add_call_chain(<<a,D,B>>)
generate_java_code
type_check
bool_value (false)
add_class(C)
bool_value (false)
add_command("C", "BOOLEAN", <<["d", "BOOLEAN"], ["C", "B"], ["c", "a"], ["b", "D"], ["BOOLEAN", "BOOLEAN"], ["D", "INTEGER"], ["A", "A"], ["a", "b"], ["e", "BOOLEAN"]>>)
bool_value (true)
generate_java_code
int_value (33)
add_call_chain(<<D,e,c,c,BOOLEAN,INTEGER,b>>)
bool_value (true)
add_command("A", "BOOLEAN", <<["e", "INTEGER"], ["C", "BOOLEAN"], ["b", "A"], ["c", "INTEGER"], ["a", "b"], ["C", "e"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "BOOLEAN"]>>)
logical_negation
numerical_negation
add_attribute("C", "D", "BOOLEAN")
bool_value (false)
add_call_chain(<<c,A,a,D,B>>)
add_query("a", "A", <<["D", "BOOLEAN"], ["INTEGER", "INTEGER"], ["b", "INTEGER"], ["a", "BOOLEAN"], ["A", "BOOLEAN"]>>, "a")
add_call_chain(<<B,B,C,a,B,B>>)
bool_value (false)
add_query("D", "C", <<["d", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["c", "BOOLEAN"], ["C", "d"]>>, "B")
modulo
int_value (28)
less_than
add_attribute("D", "c", "INTEGER")
add_call_chain(<<d,A,B,C,c>>)
add_call_chain(<<INTEGER,d,b,b,a,D,D,B>>)
add_attribute("BOOLEAN", "C", "c")
add_class(d)
bool_value (true)
add_attribute("C", "A", "BOOLEAN")
add_class(B)
numerical_negation
type_check
add_call_chain(<<D,C,BOOLEAN,C>>)
numerical_negation
less_than
type_check
add_attribute("d", "B", "BOOLEAN")
logical_negation
equals
add_attribute("d", "e", "b")
numerical_negation
less_than
add_call_chain(<<A>>)
bool_value (true)
bool_value (true)
add_class(A)
add_query("e", "c", <<["INTEGER", "INTEGER"], ["B", "e"], ["BOOLEAN", "INTEGER"], ["e", "BOOLEAN"], ["c", "C"], ["a", "INTEGER"], ["D", "e"], ["B", "c"]>>, "A")
equals
int_value (23)
add_query("e", "a", <<["b", "INTEGER"], ["INTEGER", "INTEGER"], ["C", "INTEGER"], ["a", "BOOLEAN"]>>, "c")
add_attribute("d", "B", "INTEGER")
bool_value (false)
add_call_chain(<<B,d,A,A>>)
numerical_negation
add_command("B", "C", <<["d", "D"], ["C", "INTEGER"], ["D", "d"], ["C", "a"], ["d", "INTEGER"], ["d", "B"], ["b", "BOOLEAN"], ["a", "INTEGER"], ["B", "b"]>>)
conjunction
add_call_chain(<<B,a,A,D,c>>)
subtraction
add_command("BOOLEAN", "A", <<["D", "INTEGER"]>>)
add_command("c", "d", <<["B", "INTEGER"], ["B", "BOOLEAN"], ["A", "INTEGER"]>>)
add_attribute("C", "B", "A")
add_class(d)
add_call_chain(<<C,C>>)
int_value (5)
numerical_negation
type_check
disjunction
numerical_negation
add_query("d", "A", <<["B", "BOOLEAN"]>>, "c")
numerical_negation
add_call_chain(<<B,C,BOOLEAN,B,b,BOOLEAN,e,BOOLEAN>>)
bool_value (true)
add_class(c)
add_command("a", "D", <<["D", "INTEGER"]>>)
type_check
add_attribute("c", "BOOLEAN", "BOOLEAN")
add_query("D", "b", <<["a", "B"], ["D", "BOOLEAN"]>>, "c")
add_command("A", "d", <<["b", "INTEGER"]>>)
add_command("e", "b", <<["D", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["d", "c"], ["C", "INTEGER"]>>)
add_command("e", "C", <<["d", "D"], ["a", "INTEGER"], ["B", "BOOLEAN"]>>)
add_call_chain(<<a,c,A,A,c,c,A>>)
logical_negation
add_command("e", "B", <<["BOOLEAN", "INTEGER"], ["b", "INTEGER"], ["d", "INTEGER"], ["A", "INTEGER"]>>)
bool_value (true)
type_check
int_value (18)
add_call_chain(<<A,A,e,c,e,D,c>>)
bool_value (false)
generate_java_code
logical_negation
add_command("d", "e", <<["D", "C"], ["a", "BOOLEAN"]>>)
add_query("a", "a", <<["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>, "c")
add_attribute("D", "INTEGER", "D")
generate_java_code
add_command("C", "A", <<["INTEGER", "BOOLEAN"]>>)
add_class(A)
logical_negation
numerical_negation
add_query("b", "A", <<["C", "INTEGER"], ["d", "INTEGER"], ["D", "BOOLEAN"], ["d", "C"], ["D", "INTEGER"], ["d", "d"], ["BOOLEAN", "INTEGER"], ["A", "d"], ["d", "BOOLEAN"]>>, "B")
add_call_chain(<<d,A,D>>)
less_than
int_value (1)
generate_java_code
add_attribute("C", "d", "INTEGER")
addition
numerical_negation
add_class(INTEGER)
generate_java_code
add_query("C", "INTEGER", <<["c", "BOOLEAN"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "INTEGER"]>>, "e")
add_attribute("a", "A", "INTEGER")
add_command("c", "A", <<["D", "INTEGER"], ["BOOLEAN", "INTEGER"], ["e", "INTEGER"], ["INTEGER", "c"]>>)
generate_java_code
int_value (34)
