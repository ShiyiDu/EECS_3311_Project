generate_java_code
add_call_chain(<<a,INTEGER,c,D,D,B,a>>)
int_value (6)
conjunction
add_call_chain(<<C>>)
conjunction
logical_negation
less_than
type_check
generate_java_code
add_command("A", "e", <<["D", "D"], ["B", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["e", "b"], ["a", "INTEGER"]>>)
type_check
add_attribute("D", "A", "INTEGER")
add_attribute("INTEGER", "C", "INTEGER")
add_command("d", "INTEGER", <<["D", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["b", "b"], ["A", "B"], ["B", "a"], ["C", "C"], ["C", "a"], ["b", "INTEGER"]>>)
add_command("BOOLEAN", "C", <<["b", "INTEGER"], ["B", "B"]>>)
add_call_chain(<<d,c,C,BOOLEAN,B,D>>)
add_call_chain(<<A,C,c,B,a,b>>)
add_query("c", "C", <<["a", "BOOLEAN"], ["c", "BOOLEAN"], ["b", "a"]>>, "e")
add_call_chain(<<INTEGER,d,C>>)
add_command("a", "b", <<["a", "INTEGER"], ["C", "e"], ["C", "INTEGER"]>>)
int_value (23)
generate_java_code
add_query("b", "d", <<["B", "BOOLEAN"], ["B", "INTEGER"], ["b", "d"], ["d", "c"]>>, "BOOLEAN")
bool_value (true)
add_attribute("C", "BOOLEAN", "INTEGER")
disjunction
add_command("a", "d", <<["e", "BOOLEAN"], ["BOOLEAN", "a"], ["A", "INTEGER"], ["d", "B"], ["D", "BOOLEAN"], ["d", "BOOLEAN"], ["c", "BOOLEAN"], ["C", "INTEGER"]>>)
add_command("D", "b", <<["BOOLEAN", "INTEGER"]>>)
numerical_negation
greater_than
add_command("a", "A", <<["D", "BOOLEAN"], ["D", "INTEGER"], ["C", "INTEGER"], ["C", "INTEGER"], ["A", "BOOLEAN"], ["d", "INTEGER"], ["BOOLEAN", "INTEGER"]>>)
bool_value (false)
add_call_chain(<<INTEGER>>)
int_value (49)
add_command("BOOLEAN", "C", <<["a", "INTEGER"], ["c", "BOOLEAN"]>>)
int_value (22)
type_check
generate_java_code
numerical_negation
add_call_chain(<<B>>)
add_call_chain(<<a,b,C,D,e,b>>)
add_call_chain(<<a,B,e,C,c,d,d>>)
equals
disjunction
add_query("e", "d", <<["e", "INTEGER"], ["A", "A"], ["INTEGER", "INTEGER"], ["C", "BOOLEAN"], ["INTEGER", "b"], ["d", "BOOLEAN"], ["d", "INTEGER"], ["A", "INTEGER"]>>, "d")
add_call_chain(<<e,a,b>>)
add_attribute("D", "INTEGER", "C")
generate_java_code
add_attribute("C", "a", "INTEGER")
add_attribute("c", "a", "INTEGER")
add_call_chain(<<BOOLEAN,D>>)
add_query("INTEGER", "a", <<["A", "BOOLEAN"], ["c", "BOOLEAN"], ["C", "e"], ["C", "BOOLEAN"], ["d", "b"]>>, "B")
add_attribute("d", "b", "b")
int_value (9)
bool_value (true)
numerical_negation
add_call_chain(<<B,A,B,a>>)
add_call_chain(<<C>>)
disjunction
logical_negation
logical_negation
add_attribute("A", "c", "INTEGER")
modulo
add_command("C", "INTEGER", <<["b", "INTEGER"], ["A", "BOOLEAN"], ["c", "D"], ["BOOLEAN", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["d", "BOOLEAN"]>>)
bool_value (true)
conjunction
logical_negation
type_check
add_attribute("c", "c", "INTEGER")
conjunction
add_command("D", "c", <<["b", "b"], ["e", "c"], ["C", "e"], ["C", "a"], ["BOOLEAN", "INTEGER"]>>)
int_value (34)
numerical_negation
logical_negation
generate_java_code
add_query("C", "B", <<["e", "BOOLEAN"], ["A", "C"], ["B", "BOOLEAN"], ["A", "d"], ["D", "D"], ["C", "BOOLEAN"], ["c", "BOOLEAN"]>>, "e")
bool_value (true)
add_query("c", "d", <<["B", "BOOLEAN"]>>, "C")
type_check
add_call_chain(<<A,b,d,c,C,B,C,e,d>>)
add_call_chain(<<c,B,e,c,D,B,d,C>>)
add_attribute("d", "b", "BOOLEAN")
type_check
int_value (34)
add_call_chain(<<B,B,e,c,D,C,A,a,INTEGER>>)
add_attribute("BOOLEAN", "BOOLEAN", "BOOLEAN")
add_call_chain(<<d,BOOLEAN,C,B,B,d>>)
add_attribute("D", "A", "C")
add_command("c", "d", <<["D", "d"], ["A", "b"], ["INTEGER", "D"], ["a", "BOOLEAN"], ["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["D", "INTEGER"], ["d", "INTEGER"]>>)
int_value (36)
bool_value (true)
numerical_negation
add_call_chain(<<D,e,A,B>>)
logical_negation
logical_negation
disjunction
logical_negation
numerical_negation
add_call_chain(<<B,B,e>>)
add_query("c", "e", <<["B", "A"], ["B", "d"], ["d", "INTEGER"], ["c", "INTEGER"], ["b", "BOOLEAN"], ["D", "INTEGER"], ["INTEGER", "e"], ["C", "INTEGER"]>>, "D")
type_check
bool_value (true)
add_command("A", "D", <<["c", "INTEGER"], ["C", "BOOLEAN"]>>)
add_class(BOOLEAN)
int_value (12)
add_call_chain(<<b,D,c,B,A,e,c>>)
add_query("a", "B", <<["C", "BOOLEAN"], ["D", "D"], ["a", "BOOLEAN"], ["a", "b"], ["a", "BOOLEAN"], ["A", "c"]>>, "C")
add_call_chain(<<INTEGER,e,B,D,e>>)
type_check
bool_value (true)
add_call_chain(<<b,c,B,c>>)
add_call_chain(<<B,d,A,C,b,e,a,b,b>>)
add_command("A", "B", <<["e", "B"], ["D", "BOOLEAN"], ["D", "INTEGER"], ["B", "BOOLEAN"], ["D", "INTEGER"]>>)
int_value (1)
add_command("b", "D", <<["B", "INTEGER"], ["D", "BOOLEAN"], ["d", "b"], ["D", "a"], ["b", "C"], ["A", "INTEGER"]>>)
bool_value (false)
modulo
add_call_chain(<<b>>)
add_class(B)
disjunction
logical_negation
add_query("B", "A", <<["BOOLEAN", "BOOLEAN"], ["a", "B"], ["b", "BOOLEAN"], ["a", "C"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["C", "INTEGER"], ["D", "e"]>>, "A")
less_than
logical_negation
add_call_chain(<<c,B,c,b>>)
int_value (23)
type_check
add_attribute("e", "b", "D")
add_command("a", "D", <<["c", "BOOLEAN"], ["c", "D"], ["e", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "INTEGER"], ["e", "a"], ["b", "BOOLEAN"], ["B", "INTEGER"]>>)
add_command("A", "b", <<["INTEGER", "BOOLEAN"], ["C", "BOOLEAN"]>>)
type_check
add_call_chain(<<b,c,B,D,d,A,e>>)
add_class(A)
bool_value (false)
int_value (24)
bool_value (false)
type_check
add_call_chain(<<D,d,b,a,A,INTEGER>>)
add_call_chain(<<A>>)
generate_java_code
type_check
bool_value (true)
add_query("D", "INTEGER", <<["e", "INTEGER"], ["A", "e"], ["d", "BOOLEAN"]>>, "b")
add_attribute("c", "A", "BOOLEAN")
add_call_chain(<<INTEGER,e,A,C,e,b,C,A>>)
logical_negation
logical_negation
add_command("c", "d", <<["c", "A"], ["b", "c"], ["A", "C"], ["e", "INTEGER"], ["C", "INTEGER"], ["D", "e"]>>)
add_call_chain(<<BOOLEAN,B,BOOLEAN,A>>)
disjunction
add_call_chain(<<C,C,b,a,d>>)
add_call_chain(<<e,c,e,c,c,A,B>>)
add_attribute("BOOLEAN", "c", "a")
type_check
conjunction
less_than
add_command("a", "B", <<["d", "INTEGER"], ["D", "INTEGER"]>>)
add_attribute("D", "A", "c")
int_value (36)
greater_than
add_call_chain(<<b,a,INTEGER>>)
type_check
add_query("e", "c", <<["D", "BOOLEAN"], ["a", "INTEGER"], ["e", "INTEGER"], ["b", "BOOLEAN"], ["D", "C"], ["A", "A"], ["b", "INTEGER"], ["A", "A"], ["d", "INTEGER"]>>, "C")
add_attribute("D", "C", "c")
add_call_chain(<<D,D,D,e,a,INTEGER,A>>)
numerical_negation
add_attribute("INTEGER", "A", "BOOLEAN")
add_query("B", "e", <<["b", "BOOLEAN"], ["C", "BOOLEAN"], ["B", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>, "b")
add_attribute("B", "d", "BOOLEAN")
add_class(A)
add_call_chain(<<e,D,B,INTEGER,a>>)
add_call_chain(<<b,a>>)
generate_java_code
logical_negation
add_call_chain(<<a,a,a,D,d>>)
add_command("c", "D", <<["A", "BOOLEAN"]>>)
numerical_negation
modulo
less_than
type_check
add_query("B", "c", <<["A", "INTEGER"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["d", "D"], ["B", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "b"], ["b", "INTEGER"]>>, "B")
add_call_chain(<<c,D,b,D,a,b,B>>)
add_attribute("a", "D", "INTEGER")
numerical_negation
add_call_chain(<<B,b,d,c>>)
bool_value (false)
greater_than
type_check
add_query("a", "b", <<["D", "INTEGER"], ["d", "INTEGER"], ["A", "A"], ["e", "BOOLEAN"], ["A", "BOOLEAN"], ["e", "BOOLEAN"], ["C", "BOOLEAN"]>>, "INTEGER")
int_value (4)
add_query("e", "d", <<["B", "B"], ["c", "c"], ["a", "e"], ["D", "BOOLEAN"]>>, "B")
modulo
logical_negation
add_command("a", "BOOLEAN", <<["e", "BOOLEAN"], ["A", "INTEGER"], ["B", "BOOLEAN"], ["a", "INTEGER"], ["b", "INTEGER"]>>)
type_check
add_query("D", "C", <<["D", "INTEGER"], ["A", "A"]>>, "A")
quotient
add_query("c", "C", <<["BOOLEAN", "INTEGER"], ["A", "A"], ["C", "c"], ["a", "BOOLEAN"], ["a", "INTEGER"], ["c", "BOOLEAN"]>>, "c")
numerical_negation
logical_negation
add_attribute("BOOLEAN", "INTEGER", "C")
add_call_chain(<<c,INTEGER,c,b,INTEGER,B,b>>)
add_class(d)
bool_value (false)
bool_value (true)
add_call_chain(<<c,d,a,INTEGER,C,b,C>>)
add_command("B", "INTEGER", <<["d", "A"], ["b", "INTEGER"], ["D", "a"], ["INTEGER", "INTEGER"], ["C", "BOOLEAN"], ["A", "a"], ["e", "INTEGER"]>>)
add_call_chain(<<D,D,INTEGER,d>>)
addition
generate_java_code
logical_negation
add_call_chain(<<b,b>>)
logical_negation
add_class(A)
add_command("d", "d", <<["D", "BOOLEAN"]>>)
bool_value (true)
add_command("b", "INTEGER", <<["A", "BOOLEAN"], ["c", "INTEGER"], ["C", "B"]>>)
add_class(b)
bool_value (true)
add_class(A)
bool_value (false)
type_check
add_attribute("B", "A", "INTEGER")
numerical_negation
int_value (40)
