greater_than
conjunction
add_attribute("d", "d", "BOOLEAN")
add_call_chain(<<c,D,e,B,B,e>>)
numerical_negation
add_call_chain(<<b,B,INTEGER,e,d,a,C,BOOLEAN,c>>)
add_command("C", "c", <<["B", "BOOLEAN"], ["c", "INTEGER"], ["INTEGER", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "INTEGER"], ["d", "INTEGER"], ["B", "INTEGER"]>>)
conjunction
quotient
add_call_chain(<<a,b>>)
add_call_chain(<<B,c,B>>)
add_call_chain(<<A,b>>)
add_command("BOOLEAN", "e", <<["c", "BOOLEAN"], ["INTEGER", "C"], ["a", "INTEGER"], ["e", "INTEGER"], ["B", "BOOLEAN"], ["b", "C"], ["D", "BOOLEAN"]>>)
add_call_chain(<<a,C,C,e,B,A,B>>)
subtraction
bool_value (true)
subtraction
add_call_chain(<<e,A,d,e,a,b,D,D>>)
logical_negation
type_check
int_value (16)
int_value (12)
logical_negation
add_query("e", "A", <<["D", "b"], ["c", "INTEGER"], ["a", "BOOLEAN"]>>, "c")
add_class(B)
bool_value (true)
logical_negation
add_class(BOOLEAN)
numerical_negation
numerical_negation
add_attribute("C", "A", "BOOLEAN")
add_attribute("c", "A", "INTEGER")
add_query("a", "d", <<["a", "BOOLEAN"]>>, "e")
int_value (16)
add_command("BOOLEAN", "d", <<["D", "a"], ["d", "A"]>>)
generate_java_code
add_attribute("d", "B", "b")
int_value (44)
bool_value (true)
add_command("D", "BOOLEAN", <<["D", "INTEGER"], ["D", "BOOLEAN"]>>)
modulo
add_query("A", "c", <<["e", "B"], ["c", "INTEGER"]>>, "d")
numerical_negation
add_call_chain(<<a,c>>)
add_query("D", "e", <<["e", "INTEGER"]>>, "c")
numerical_negation
add_call_chain(<<D,b,d,D,d>>)
disjunction
numerical_negation
logical_negation
add_class(c)
type_check
numerical_negation
add_query("e", "B", <<["B", "D"], ["e", "BOOLEAN"], ["B", "e"], ["D", "INTEGER"], ["A", "INTEGER"], ["b", "B"], ["C", "A"], ["C", "BOOLEAN"]>>, "d")
int_value (30)
bool_value (true)
generate_java_code
bool_value (false)
add_command("e", "c", <<["e", "A"], ["D", "D"], ["e", "INTEGER"], ["B", "INTEGER"], ["B", "e"], ["a", "BOOLEAN"], ["D", "BOOLEAN"], ["a", "BOOLEAN"], ["d", "d"]>>)
add_command("d", "e", <<["a", "INTEGER"], ["a", "a"], ["C", "C"], ["a", "INTEGER"], ["c", "BOOLEAN"]>>)
bool_value (true)
quotient
logical_negation
add_call_chain(<<d,a,C,D,D>>)
add_call_chain(<<A,e,b,A>>)
add_call_chain(<<INTEGER,D,c,e,B,d>>)
add_call_chain(<<D,C>>)
add_query("B", "a", <<["A", "INTEGER"], ["b", "INTEGER"]>>, "d")
bool_value (true)
subtraction
conjunction
add_call_chain(<<d,BOOLEAN,d,BOOLEAN,A>>)
bool_value (true)
add_call_chain(<<b,D,a,a>>)
bool_value (false)
add_attribute("D", "A", "INTEGER")
add_command("d", "INTEGER", <<["A", "INTEGER"], ["INTEGER", "B"], ["b", "D"], ["C", "INTEGER"], ["a", "D"], ["B", "INTEGER"]>>)
disjunction
greater_than
addition
add_command("c", "e", <<["D", "INTEGER"], ["a", "C"], ["A", "BOOLEAN"], ["b", "INTEGER"]>>)
add_call_chain(<<c,D,D,b,e>>)
numerical_negation
int_value (20)
conjunction
addition
add_query("D", "A", <<["B", "INTEGER"], ["B", "e"], ["d", "INTEGER"], ["b", "a"], ["e", "a"], ["a", "BOOLEAN"], ["C", "BOOLEAN"], ["b", "INTEGER"]>>, "B")
quotient
add_attribute("d", "a", "B")
add_attribute("d", "c", "INTEGER")
add_call_chain(<<C,C>>)
add_query("c", "A", <<["BOOLEAN", "BOOLEAN"], ["D", "C"]>>, "b")
type_check
add_query("INTEGER", "BOOLEAN", <<["d", "BOOLEAN"], ["A", "d"], ["c", "c"], ["INTEGER", "INTEGER"], ["A", "INTEGER"], ["INTEGER", "B"], ["e", "BOOLEAN"]>>, "B")
int_value (41)
int_value (42)
bool_value (false)
generate_java_code
add_attribute("e", "e", "INTEGER")
type_check
bool_value (true)
bool_value (true)
add_attribute("D", "B", "BOOLEAN")
add_command("BOOLEAN", "c", <<["c", "BOOLEAN"], ["A", "B"], ["C", "B"], ["d", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["C", "INTEGER"], ["c", "INTEGER"]>>)
disjunction
disjunction
bool_value (true)
multiplication
bool_value (false)
numerical_negation
equals
add_command("D", "d", <<["BOOLEAN", "d"], ["e", "INTEGER"], ["A", "BOOLEAN"]>>)
type_check
add_class(e)
add_call_chain(<<c,c,INTEGER,e,INTEGER,INTEGER,a>>)
add_call_chain(<<D,B,C,c,C,B,d,A>>)
add_call_chain(<<A,c,C>>)
int_value (41)
add_query("BOOLEAN", "b", <<["INTEGER", "INTEGER"]>>, "BOOLEAN")
add_command("b", "A", <<["A", "BOOLEAN"], ["D", "INTEGER"], ["D", "BOOLEAN"], ["b", "C"], ["b", "C"], ["D", "INTEGER"], ["B", "INTEGER"], ["D", "D"]>>)
int_value (15)
add_call_chain(<<b,B,C>>)
generate_java_code
add_attribute("A", "A", "d")
add_call_chain(<<B,INTEGER,INTEGER,D>>)
numerical_negation
add_command("b", "d", <<["b", "BOOLEAN"], ["C", "INTEGER"], ["c", "INTEGER"], ["c", "D"], ["d", "b"], ["d", "INTEGER"], ["D", "BOOLEAN"], ["D", "a"]>>)
int_value (2)
add_command("A", "a", <<["d", "BOOLEAN"]>>)
logical_negation
greater_than
add_command("A", "D", <<["a", "BOOLEAN"], ["d", "BOOLEAN"], ["B", "BOOLEAN"]>>)
add_call_chain(<<c,D,C,D,A,C,a,C,C>>)
add_call_chain(<<D,INTEGER,C,e,e>>)
bool_value (false)
int_value (49)
add_attribute("A", "e", "INTEGER")
greater_than
subtraction
bool_value (true)
add_call_chain(<<C,C,b,C>>)
add_command("d", "B", <<["B", "INTEGER"], ["D", "C"], ["D", "a"]>>)
add_call_chain(<<d,e,INTEGER,e,C>>)
bool_value (false)
int_value (31)
add_command("e", "d", <<["A", "BOOLEAN"], ["B", "INTEGER"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["INTEGER", "b"], ["b", "INTEGER"]>>)
generate_java_code
add_call_chain(<<BOOLEAN,a,BOOLEAN,C,a,B,C,b>>)
bool_value (false)
bool_value (true)
numerical_negation
generate_java_code
add_attribute("BOOLEAN", "B", "D")
less_than
add_call_chain(<<A,a,d,BOOLEAN>>)
greater_than
generate_java_code
add_command("D", "A", <<["C", "BOOLEAN"], ["C", "INTEGER"], ["b", "A"]>>)
add_command("c", "A", <<["C", "B"], ["d", "d"], ["e", "BOOLEAN"], ["C", "INTEGER"]>>)
logical_negation
add_call_chain(<<a,D,INTEGER>>)
add_attribute("b", "a", "INTEGER")
add_query("BOOLEAN", "a", <<["BOOLEAN", "INTEGER"], ["B", "INTEGER"], ["B", "INTEGER"], ["d", "BOOLEAN"]>>, "B")
add_query("INTEGER", "b", <<["A", "BOOLEAN"], ["D", "BOOLEAN"], ["c", "INTEGER"], ["a", "INTEGER"], ["c", "INTEGER"], ["a", "BOOLEAN"], ["B", "INTEGER"], ["A", "INTEGER"]>>, "A")
disjunction
add_call_chain(<<b,A,B,A>>)
bool_value (false)
greater_than
bool_value (true)
logical_negation
modulo
add_query("e", "b", <<["D", "BOOLEAN"], ["b", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "INTEGER"]>>, "b")
add_command("c", "c", <<["c", "D"], ["BOOLEAN", "D"], ["c", "BOOLEAN"]>>)
bool_value (true)
add_command("B", "C", <<["D", "INTEGER"], ["e", "BOOLEAN"], ["A", "d"], ["d", "INTEGER"], ["INTEGER", "BOOLEAN"], ["C", "D"], ["C", "BOOLEAN"], ["d", "BOOLEAN"]>>)
disjunction
add_command("D", "e", <<["d", "BOOLEAN"], ["b", "INTEGER"], ["B", "BOOLEAN"], ["c", "INTEGER"], ["e", "INTEGER"], ["e", "BOOLEAN"], ["e", "C"], ["c", "INTEGER"], ["d", "INTEGER"]>>)
add_call_chain(<<b,D,C,A,b,c,BOOLEAN>>)
bool_value (true)
add_query("d", "A", <<["b", "e"], ["A", "C"], ["D", "BOOLEAN"], ["C", "INTEGER"], ["a", "c"], ["a", "BOOLEAN"]>>, "A")
disjunction
add_class(D)
add_query("D", "d", <<["B", "B"], ["B", "D"], ["INTEGER", "a"], ["BOOLEAN", "BOOLEAN"], ["C", "b"], ["e", "B"], ["A", "INTEGER"]>>, "D")
add_call_chain(<<INTEGER,C,a,c>>)
logical_negation
subtraction
addition
add_call_chain(<<D>>)
add_call_chain(<<D,d>>)
int_value (38)
numerical_negation
add_command("d", "C", <<["b", "INTEGER"], ["b", "INTEGER"], ["a", "INTEGER"], ["c", "D"], ["b", "INTEGER"]>>)
add_attribute("B", "D", "BOOLEAN")
bool_value (true)
add_command("B", "A", <<["d", "BOOLEAN"], ["b", "BOOLEAN"], ["INTEGER", "INTEGER"], ["B", "B"], ["e", "INTEGER"], ["e", "D"]>>)
logical_negation
numerical_negation
add_call_chain(<<C,c,c,a,D,A,A,D,d>>)
add_command("b", "a", <<["e", "BOOLEAN"], ["A", "INTEGER"]>>)
bool_value (true)
less_than
add_call_chain(<<e,INTEGER,A,d,INTEGER>>)
greater_than
conjunction
add_call_chain(<<B,c,B,c,c,c,a,A,C>>)
int_value (25)
add_call_chain(<<A,B,c,e>>)
add_call_chain(<<e,a,c,C,c,a,A>>)
add_call_chain(<<a,b,BOOLEAN,D,B,A,a,d>>)
multiplication
addition
add_attribute("b", "b", "D")
add_command("d", "D", <<["b", "C"]>>)
add_attribute("e", "D", "A")
add_command("a", "d", <<["C", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "INTEGER"]>>)
add_command("BOOLEAN", "D", <<["BOOLEAN", "A"]>>)
bool_value (false)
add_query("BOOLEAN", "c", <<["A", "INTEGER"], ["c", "D"], ["d", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["C", "INTEGER"]>>, "C")
add_query("b", "B", <<["e", "a"], ["d", "INTEGER"], ["A", "BOOLEAN"]>>, "A")
