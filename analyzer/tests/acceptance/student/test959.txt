numerical_negation
int_value (44)
modulo
add_call_chain(<<B>>)
bool_value (false)
add_call_chain(<<C,d,a,b,d,C,C,B,BOOLEAN>>)
add_command("d", "INTEGER", <<["INTEGER", "BOOLEAN"], ["D", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["B", "BOOLEAN"], ["b", "INTEGER"], ["B", "INTEGER"], ["INTEGER", "A"]>>)
add_query("A", "e", <<["d", "INTEGER"], ["a", "INTEGER"], ["d", "BOOLEAN"], ["e", "BOOLEAN"]>>, "A")
equals
numerical_negation
addition
logical_negation
bool_value (true)
logical_negation
add_command("D", "B", <<["e", "BOOLEAN"], ["INTEGER", "INTEGER"], ["A", "BOOLEAN"], ["D", "e"], ["a", "INTEGER"], ["b", "INTEGER"], ["A", "INTEGER"], ["a", "BOOLEAN"], ["B", "INTEGER"]>>)
type_check
subtraction
greater_than
generate_java_code
add_command("a", "c", <<["e", "BOOLEAN"], ["D", "BOOLEAN"], ["C", "c"], ["D", "BOOLEAN"], ["a", "e"]>>)
int_value (5)
int_value (20)
bool_value (true)
generate_java_code
int_value (39)
add_call_chain(<<e,B,B,A,A,c,BOOLEAN,b>>)
type_check
add_attribute("A", "D", "D")
bool_value (false)
add_query("e", "B", <<["B", "INTEGER"], ["C", "a"], ["B", "BOOLEAN"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["B", "BOOLEAN"], ["C", "BOOLEAN"]>>, "A")
conjunction
add_call_chain(<<d,e>>)
add_attribute("e", "e", "INTEGER")
disjunction
add_call_chain(<<C,BOOLEAN,BOOLEAN,BOOLEAN,C,a,c,BOOLEAN>>)
bool_value (false)
add_class(d)
add_command("e", "b", <<["INTEGER", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "INTEGER"], ["b", "INTEGER"]>>)
conjunction
conjunction
add_query("a", "d", <<["d", "BOOLEAN"]>>, "D")
type_check
modulo
modulo
add_query("B", "a", <<["c", "b"], ["D", "A"], ["BOOLEAN", "a"], ["INTEGER", "INTEGER"], ["INTEGER", "INTEGER"], ["C", "b"], ["e", "INTEGER"], ["A", "BOOLEAN"]>>, "A")
type_check
int_value (37)
generate_java_code
bool_value (false)
add_call_chain(<<C,d,d,D,c,BOOLEAN,C>>)
int_value (24)
add_query("c", "INTEGER", <<["d", "INTEGER"], ["A", "BOOLEAN"]>>, "a")
bool_value (true)
add_call_chain(<<c,B,INTEGER,e,c,c,D>>)
add_call_chain(<<A,C,B,A,D,a>>)
add_call_chain(<<D,INTEGER,a,e,a,a,D,C,e>>)
numerical_negation
quotient
less_than
generate_java_code
add_call_chain(<<c>>)
add_call_chain(<<d,A,A,d>>)
add_attribute("D", "d", "c")
add_command("D", "e", <<["e", "A"], ["d", "d"], ["a", "BOOLEAN"], ["d", "BOOLEAN"], ["b", "INTEGER"], ["INTEGER", "C"], ["C", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>)
add_command("D", "BOOLEAN", <<["d", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["c", "INTEGER"], ["A", "C"], ["B", "INTEGER"], ["A", "a"], ["B", "INTEGER"], ["a", "e"], ["d", "BOOLEAN"]>>)
less_than
add_command("A", "C", <<["d", "d"]>>)
logical_negation
add_command("A", "d", <<["A", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "BOOLEAN"], ["b", "B"]>>)
add_attribute("C", "B", "INTEGER")
type_check
add_class(INTEGER)
int_value (32)
bool_value (true)
add_call_chain(<<c,INTEGER,a,B,e>>)
bool_value (false)
logical_negation
quotient
type_check
multiplication
numerical_negation
logical_negation
add_class(C)
quotient
logical_negation
add_attribute("b", "C", "INTEGER")
add_call_chain(<<B,C,C,d>>)
add_command("C", "A", <<["BOOLEAN", "INTEGER"], ["B", "INTEGER"], ["B", "INTEGER"], ["A", "c"], ["d", "BOOLEAN"], ["INTEGER", "INTEGER"]>>)
add_call_chain(<<D,C>>)
conjunction
add_class(A)
add_query("D", "b", <<["B", "D"], ["C", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["e", "BOOLEAN"], ["a", "A"], ["e", "BOOLEAN"], ["D", "BOOLEAN"], ["D", "BOOLEAN"], ["c", "INTEGER"]>>, "e")
add_call_chain(<<BOOLEAN,e,e,a,B>>)
numerical_negation
bool_value (false)
add_query("BOOLEAN", "A", <<["A", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["d", "BOOLEAN"], ["C", "INTEGER"]>>, "INTEGER")
add_attribute("D", "B", "INTEGER")
add_attribute("D", "A", "BOOLEAN")
type_check
equals
add_class(b)
add_command("e", "B", <<["A", "INTEGER"], ["c", "d"]>>)
add_call_chain(<<b,D,A,A,c,b,a,C>>)
int_value (4)
numerical_negation
add_call_chain(<<D,d,C,C,e,A,b,d,a>>)
logical_negation
numerical_negation
type_check
add_query("A", "c", <<["d", "a"], ["D", "d"], ["e", "INTEGER"], ["a", "BOOLEAN"]>>, "a")
add_command("e", "INTEGER", <<["B", "INTEGER"]>>)
type_check
add_attribute("B", "b", "A")
add_call_chain(<<C,D>>)
add_call_chain(<<INTEGER,C>>)
add_attribute("a", "d", "D")
add_call_chain(<<b,C,A,D>>)
add_class(C)
bool_value (true)
add_class(a)
logical_negation
add_command("A", "C", <<["A", "INTEGER"], ["a", "A"], ["e", "INTEGER"], ["B", "INTEGER"]>>)
type_check
bool_value (false)
add_command("d", "D", <<["A", "INTEGER"], ["B", "INTEGER"], ["B", "B"], ["B", "INTEGER"], ["d", "c"], ["d", "A"], ["B", "D"]>>)
add_query("B", "BOOLEAN", <<["A", "BOOLEAN"], ["c", "a"], ["A", "D"], ["A", "A"], ["C", "BOOLEAN"], ["C", "D"], ["e", "BOOLEAN"], ["A", "BOOLEAN"]>>, "BOOLEAN")
numerical_negation
numerical_negation
logical_negation
int_value (48)
add_attribute("D", "D", "INTEGER")
add_call_chain(<<B,b,d,B>>)
add_attribute("B", "BOOLEAN", "INTEGER")
bool_value (false)
generate_java_code
add_call_chain(<<a,a,b,C,D>>)
add_class(C)
add_query("A", "C", <<["a", "BOOLEAN"], ["A", "BOOLEAN"], ["C", "INTEGER"], ["C", "INTEGER"], ["C", "BOOLEAN"], ["D", "BOOLEAN"], ["d", "BOOLEAN"], ["B", "INTEGER"]>>, "e")
add_attribute("c", "B", "BOOLEAN")
logical_negation
add_call_chain(<<b,a,C,a,a>>)
add_command("B", "INTEGER", <<["e", "BOOLEAN"]>>)
add_query("b", "c", <<["BOOLEAN", "BOOLEAN"], ["B", "INTEGER"], ["D", "a"], ["e", "BOOLEAN"], ["d", "C"], ["C", "INTEGER"], ["a", "e"], ["a", "INTEGER"], ["A", "INTEGER"]>>, "e")
type_check
add_call_chain(<<b,C,INTEGER,BOOLEAN,c,d,a,d,B>>)
bool_value (true)
int_value (12)
add_call_chain(<<BOOLEAN,e,e,B,a,e,d,C,B>>)
int_value (44)
logical_negation
add_command("C", "D", <<["a", "B"], ["C", "e"]>>)
logical_negation
addition
equals
equals
add_call_chain(<<INTEGER,A>>)
add_attribute("D", "a", "INTEGER")
bool_value (false)
modulo
int_value (23)
equals
add_command("b", "d", <<["A", "BOOLEAN"]>>)
add_call_chain(<<INTEGER,D,e,a,B>>)
disjunction
disjunction
add_call_chain(<<D,d,A,B,e,e,B,A>>)
bool_value (false)
add_command("A", "D", <<["BOOLEAN", "INTEGER"], ["C", "b"], ["D", "INTEGER"], ["e", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>)
add_call_chain(<<c>>)
add_call_chain(<<C,B>>)
add_class(A)
logical_negation
bool_value (true)
disjunction
add_attribute("BOOLEAN", "INTEGER", "INTEGER")
add_query("e", "C", <<["BOOLEAN", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "INTEGER"], ["INTEGER", "INTEGER"], ["c", "BOOLEAN"], ["d", "BOOLEAN"]>>, "c")
logical_negation
add_query("e", "d", <<["C", "INTEGER"], ["b", "BOOLEAN"], ["C", "INTEGER"], ["e", "BOOLEAN"], ["c", "INTEGER"], ["c", "BOOLEAN"], ["d", "BOOLEAN"], ["d", "D"]>>, "b")
add_class(B)
generate_java_code
numerical_negation
add_attribute("e", "B", "d")
type_check
quotient
int_value (33)
type_check
generate_java_code
add_command("e", "C", <<["BOOLEAN", "a"], ["INTEGER", "B"], ["INTEGER", "BOOLEAN"]>>)
add_call_chain(<<b,D,c,c,C,a>>)
add_class(A)
bool_value (false)
add_command("C", "C", <<["INTEGER", "INTEGER"], ["e", "BOOLEAN"], ["b", "INTEGER"], ["d", "INTEGER"], ["c", "INTEGER"], ["d", "A"], ["A", "BOOLEAN"], ["D", "A"]>>)
add_attribute("A", "D", "c")
add_class(B)
add_attribute("a", "a", "INTEGER")
generate_java_code
add_command("d", "C", <<["C", "INTEGER"]>>)
add_call_chain(<<e,A,c,D,B>>)
add_call_chain(<<A,D>>)
type_check
add_call_chain(<<c,d,c,A,d,a>>)
logical_negation
int_value (49)
logical_negation
add_command("A", "d", <<["D", "BOOLEAN"], ["C", "INTEGER"], ["A", "INTEGER"], ["A", "BOOLEAN"], ["b", "A"], ["d", "BOOLEAN"], ["C", "INTEGER"], ["d", "BOOLEAN"]>>)
add_call_chain(<<D,c,BOOLEAN,d,c,D>>)
add_call_chain(<<a,BOOLEAN,C,D>>)
int_value (16)
bool_value (false)
numerical_negation
bool_value (true)
bool_value (false)
add_query("a", "D", <<["B", "INTEGER"], ["D", "BOOLEAN"], ["c", "B"], ["INTEGER", "INTEGER"]>>, "b")
add_call_chain(<<A,B,c,e,B,D,B,c>>)
generate_java_code
logical_negation
add_class(c)
numerical_negation
int_value (12)
conjunction
add_call_chain(<<c>>)
add_command("BOOLEAN", "b", <<["B", "B"], ["b", "INTEGER"], ["A", "a"], ["e", "BOOLEAN"], ["C", "c"], ["INTEGER", "INTEGER"], ["C", "INTEGER"], ["C", "INTEGER"]>>)
add_class(B)
bool_value (true)
add_command("BOOLEAN", "e", <<["c", "INTEGER"], ["e", "b"], ["e", "BOOLEAN"], ["c", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["d", "INTEGER"]>>)
disjunction
numerical_negation
add_attribute("BOOLEAN", "e", "BOOLEAN")
type_check
int_value (4)
