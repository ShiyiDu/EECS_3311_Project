int_value (10)
bool_value (false)
greater_than
add_command("INTEGER", "d", <<["INTEGER", "d"], ["A", "INTEGER"]>>)
add_attribute("BOOLEAN", "a", "BOOLEAN")
logical_negation
add_call_chain(<<b,c,C,INTEGER,D>>)
int_value (39)
logical_negation
generate_java_code
add_call_chain(<<A,D,B,C,B,d>>)
generate_java_code
multiplication
less_than
add_call_chain(<<C,B,A,B>>)
add_command("b", "A", <<["A", "INTEGER"], ["c", "INTEGER"], ["BOOLEAN", "INTEGER"], ["e", "b"], ["BOOLEAN", "INTEGER"], ["c", "B"], ["D", "b"], ["D", "INTEGER"]>>)
add_query("A", "d", <<["b", "INTEGER"], ["c", "INTEGER"], ["D", "BOOLEAN"], ["a", "INTEGER"], ["B", "b"], ["B", "INTEGER"]>>, "A")
numerical_negation
bool_value (true)
add_attribute("d", "C", "b")
generate_java_code
add_command("BOOLEAN", "B", <<["a", "A"], ["A", "BOOLEAN"]>>)
logical_negation
add_command("A", "B", <<["d", "a"], ["A", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "BOOLEAN"], ["e", "INTEGER"], ["B", "b"]>>)
numerical_negation
generate_java_code
addition
add_call_chain(<<a,D>>)
add_command("A", "B", <<["e", "BOOLEAN"], ["e", "INTEGER"]>>)
add_call_chain(<<A,D,INTEGER,b,D,D>>)
add_call_chain(<<A,A,b,C,INTEGER>>)
generate_java_code
add_command("b", "e", <<["c", "b"], ["e", "A"]>>)
add_class(D)
bool_value (true)
add_call_chain(<<BOOLEAN,a,A,b,a>>)
add_command("A", "B", <<["a", "C"], ["a", "INTEGER"], ["D", "INTEGER"], ["e", "BOOLEAN"], ["INTEGER", "INTEGER"]>>)
numerical_negation
add_call_chain(<<a,C,D,a,c,C,a>>)
int_value (16)
int_value (25)
add_call_chain(<<e,a,d,BOOLEAN,d,e,d,B,d>>)
add_class(B)
add_command("b", "c", <<["A", "INTEGER"]>>)
add_query("A", "B", <<["D", "INTEGER"], ["d", "BOOLEAN"], ["e", "INTEGER"]>>, "C")
numerical_negation
add_attribute("b", "b", "BOOLEAN")
add_call_chain(<<D,a,B,d,B,BOOLEAN>>)
add_query("D", "A", <<["a", "INTEGER"], ["e", "d"], ["D", "BOOLEAN"], ["e", "e"], ["e", "d"], ["b", "INTEGER"]>>, "a")
disjunction
add_call_chain(<<c,e,a,INTEGER,d>>)
add_call_chain(<<INTEGER,b>>)
quotient
add_command("D", "e", <<["c", "BOOLEAN"], ["C", "b"], ["D", "INTEGER"]>>)
greater_than
add_query("B", "a", <<["e", "INTEGER"], ["B", "INTEGER"]>>, "INTEGER")
int_value (6)
generate_java_code
add_attribute("C", "D", "BOOLEAN")
add_call_chain(<<d,B,a,D,b,D,A,INTEGER,B>>)
add_call_chain(<<INTEGER,A,d,a,c,BOOLEAN,e,INTEGER>>)
numerical_negation
less_than
int_value (27)
disjunction
add_call_chain(<<c,C,c,e,C,INTEGER,c,a>>)
add_call_chain(<<d>>)
int_value (24)
add_query("B", "B", <<["a", "BOOLEAN"], ["d", "BOOLEAN"], ["b", "INTEGER"], ["C", "BOOLEAN"]>>, "c")
add_command("b", "c", <<["BOOLEAN", "BOOLEAN"], ["a", "D"], ["d", "INTEGER"], ["e", "BOOLEAN"], ["C", "INTEGER"], ["D", "BOOLEAN"], ["A", "D"]>>)
add_attribute("C", "C", "A")
greater_than
add_attribute("C", "A", "BOOLEAN")
add_attribute("a", "d", "INTEGER")
add_attribute("b", "b", "BOOLEAN")
add_attribute("B", "B", "INTEGER")
add_query("D", "B", <<["e", "INTEGER"], ["INTEGER", "BOOLEAN"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["D", "BOOLEAN"]>>, "c")
logical_negation
bool_value (true)
numerical_negation
add_class(d)
numerical_negation
type_check
add_command("e", "e", <<["d", "d"], ["BOOLEAN", "INTEGER"], ["b", "INTEGER"], ["a", "INTEGER"], ["C", "A"], ["d", "B"], ["B", "INTEGER"]>>)
add_call_chain(<<D,e>>)
add_query("C", "D", <<["BOOLEAN", "C"], ["B", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "INTEGER"], ["d", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["c", "BOOLEAN"]>>, "A")
bool_value (false)
add_query("D", "D", <<["INTEGER", "B"], ["a", "a"], ["A", "INTEGER"], ["d", "BOOLEAN"]>>, "B")
add_attribute("c", "a", "e")
add_command("B", "e", <<["b", "BOOLEAN"], ["a", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "INTEGER"], ["b", "BOOLEAN"], ["b", "INTEGER"]>>)
add_class(b)
add_attribute("INTEGER", "B", "BOOLEAN")
multiplication
type_check
add_query("d", "BOOLEAN", <<["A", "BOOLEAN"], ["INTEGER", "d"], ["D", "INTEGER"]>>, "D")
add_class(C)
add_command("C", "A", <<["B", "BOOLEAN"], ["a", "BOOLEAN"], ["A", "BOOLEAN"]>>)
add_command("INTEGER", "e", <<["B", "INTEGER"], ["A", "D"], ["e", "INTEGER"], ["c", "INTEGER"], ["e", "C"]>>)
add_query("b", "a", <<["b", "INTEGER"], ["D", "C"], ["C", "BOOLEAN"], ["INTEGER", "INTEGER"], ["a", "c"], ["c", "A"], ["b", "INTEGER"]>>, "BOOLEAN")
add_command("b", "a", <<["C", "INTEGER"], ["BOOLEAN", "INTEGER"], ["a", "A"], ["D", "INTEGER"], ["B", "BOOLEAN"], ["d", "a"]>>)
add_query("D", "c", <<["INTEGER", "INTEGER"]>>, "d")
add_command("C", "a", <<["INTEGER", "d"]>>)
logical_negation
int_value (10)
numerical_negation
add_query("c", "B", <<["a", "BOOLEAN"], ["a", "BOOLEAN"], ["D", "INTEGER"], ["C", "BOOLEAN"], ["d", "INTEGER"], ["c", "BOOLEAN"], ["B", "a"], ["B", "BOOLEAN"]>>, "d")
add_query("b", "a", <<["d", "INTEGER"], ["C", "INTEGER"], ["C", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "INTEGER"], ["B", "C"], ["B", "BOOLEAN"], ["b", "BOOLEAN"], ["D", "BOOLEAN"]>>, "B")
logical_negation
add_class(D)
bool_value (false)
add_query("a", "D", <<["B", "INTEGER"], ["INTEGER", "INTEGER"], ["BOOLEAN", "INTEGER"]>>, "INTEGER")
add_call_chain(<<C,d,A,d>>)
add_query("D", "a", <<["b", "INTEGER"], ["a", "A"], ["A", "C"], ["B", "BOOLEAN"], ["INTEGER", "INTEGER"], ["A", "A"], ["A", "INTEGER"]>>, "b")
int_value (26)
add_call_chain(<<c,BOOLEAN,D,d,B,A>>)
numerical_negation
add_query("B", "B", <<["A", "BOOLEAN"]>>, "INTEGER")
conjunction
int_value (28)
add_query("INTEGER", "c", <<["B", "BOOLEAN"], ["c", "A"]>>, "C")
numerical_negation
int_value (32)
add_command("D", "d", <<["INTEGER", "INTEGER"]>>)
add_command("a", "a", <<["e", "INTEGER"], ["b", "INTEGER"], ["a", "BOOLEAN"]>>)
int_value (28)
add_call_chain(<<e,e,C,c,b>>)
add_call_chain(<<e,A,a,a,C,e>>)
add_call_chain(<<D,d,c,b,INTEGER,D>>)
add_query("a", "D", <<["INTEGER", "BOOLEAN"], ["d", "b"], ["A", "INTEGER"], ["b", "INTEGER"], ["B", "INTEGER"], ["C", "C"], ["a", "BOOLEAN"]>>, "e")
add_attribute("A", "c", "B")
numerical_negation
equals
add_query("A", "D", <<["A", "BOOLEAN"], ["D", "BOOLEAN"]>>, "D")
add_call_chain(<<d,c,C,D,C,A,c>>)
add_attribute("B", "BOOLEAN", "A")
generate_java_code
logical_negation
add_call_chain(<<D,e,e>>)
add_call_chain(<<c,A,C,B,e,B>>)
add_class(b)
bool_value (true)
equals
logical_negation
add_call_chain(<<B>>)
logical_negation
add_call_chain(<<d,B,B,e,D,D,b,b>>)
int_value (5)
less_than
add_command("b", "INTEGER", <<["C", "INTEGER"], ["B", "INTEGER"], ["c", "B"], ["D", "a"], ["d", "BOOLEAN"], ["c", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["b", "INTEGER"]>>)
bool_value (false)
equals
numerical_negation
add_attribute("C", "A", "a")
add_query("BOOLEAN", "a", <<["INTEGER", "b"], ["a", "c"], ["INTEGER", "INTEGER"], ["b", "INTEGER"], ["B", "INTEGER"], ["A", "INTEGER"], ["A", "d"]>>, "A")
bool_value (false)
bool_value (false)
add_call_chain(<<D,a,a,c>>)
add_class(b)
logical_negation
add_command("D", "BOOLEAN", <<["d", "BOOLEAN"], ["B", "BOOLEAN"], ["b", "BOOLEAN"], ["a", "BOOLEAN"], ["A", "INTEGER"], ["c", "BOOLEAN"], ["INTEGER", "C"], ["d", "A"], ["e", "INTEGER"]>>)
add_query("a", "a", <<["D", "b"], ["c", "BOOLEAN"], ["A", "A"], ["b", "INTEGER"], ["B", "INTEGER"], ["B", "BOOLEAN"], ["b", "INTEGER"], ["c", "BOOLEAN"]>>, "D")
add_class(B)
greater_than
logical_negation
bool_value (true)
numerical_negation
disjunction
logical_negation
add_call_chain(<<e,a,c,D,e,B>>)
logical_negation
addition
add_attribute("D", "A", "INTEGER")
generate_java_code
bool_value (true)
add_query("C", "INTEGER", <<["A", "C"], ["BOOLEAN", "A"], ["e", "BOOLEAN"], ["b", "e"], ["b", "INTEGER"], ["A", "INTEGER"], ["b", "BOOLEAN"], ["c", "e"]>>, "BOOLEAN")
add_call_chain(<<e,A>>)
add_command("INTEGER", "c", <<["B", "BOOLEAN"], ["e", "INTEGER"], ["C", "INTEGER"], ["a", "BOOLEAN"]>>)
add_attribute("B", "C", "BOOLEAN")
add_attribute("d", "INTEGER", "BOOLEAN")
add_call_chain(<<A,B,a,A,B,c,d>>)
add_command("b", "D", <<["A", "C"]>>)
int_value (38)
generate_java_code
add_attribute("c", "b", "C")
add_command("e", "B", <<["B", "INTEGER"], ["D", "INTEGER"], ["c", "INTEGER"], ["b", "C"], ["INTEGER", "BOOLEAN"], ["c", "BOOLEAN"], ["e", "BOOLEAN"], ["B", "INTEGER"]>>)
add_attribute("BOOLEAN", "D", "c")
logical_negation
conjunction
generate_java_code
add_attribute("a", "a", "BOOLEAN")
add_query("c", "BOOLEAN", <<["c", "e"], ["D", "C"], ["c", "INTEGER"], ["d", "BOOLEAN"], ["A", "b"]>>, "C")
equals
bool_value (true)
add_command("a", "b", <<["INTEGER", "INTEGER"], ["A", "INTEGER"], ["C", "BOOLEAN"], ["INTEGER", "B"]>>)
int_value (42)
bool_value (true)
add_call_chain(<<d,a,BOOLEAN>>)
bool_value (false)
type_check
logical_negation
add_call_chain(<<C,B,a,BOOLEAN,D>>)
add_call_chain(<<A,BOOLEAN,C,d,D,A,b,a,C>>)
add_call_chain(<<C,d,B,INTEGER,c,c,a,D,d>>)
add_call_chain(<<d,a,INTEGER,d,c,a,D>>)
logical_negation
add_command("a", "c", <<["a", "a"], ["b", "a"], ["c", "BOOLEAN"], ["d", "BOOLEAN"], ["e", "INTEGER"], ["A", "BOOLEAN"], ["A", "B"], ["b", "BOOLEAN"]>>)
generate_java_code
add_call_chain(<<A,A,D>>)
bool_value (false)
modulo
add_command("A", "A", <<["BOOLEAN", "BOOLEAN"]>>)
add_command("INTEGER", "a", <<["C", "INTEGER"], ["d", "INTEGER"], ["C", "C"], ["INTEGER", "D"], ["e", "INTEGER"]>>)
numerical_negation
logical_negation
add_command("B", "BOOLEAN", <<["c", "C"], ["a", "e"]>>)
add_command("D", "B", <<["INTEGER", "A"], ["INTEGER", "BOOLEAN"], ["a", "INTEGER"], ["a", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "BOOLEAN"], ["C", "e"], ["A", "INTEGER"]>>)
add_query("D", "e", <<["C", "BOOLEAN"], ["A", "d"], ["BOOLEAN", "C"], ["D", "INTEGER"]>>, "d")
bool_value (false)
add_command("e", "A", <<["e", "INTEGER"], ["D", "INTEGER"], ["INTEGER", "e"], ["A", "INTEGER"], ["A", "B"], ["b", "A"], ["BOOLEAN", "INTEGER"]>>)
add_class(e)
less_than
add_call_chain(<<b,C,c,c,C,INTEGER,a,D,B>>)
quotient
conjunction
type_check
add_command("C", "a", <<["C", "INTEGER"]>>)
add_command("A", "b", <<["c", "BOOLEAN"], ["D", "B"], ["d", "INTEGER"]>>)
type_check
add_class(D)
quotient
add_command("e", "B", <<["c", "INTEGER"], ["A", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "INTEGER"], ["A", "INTEGER"], ["b", "C"], ["e", "BOOLEAN"], ["A", "A"]>>)
logical_negation
add_call_chain(<<B,B>>)
add_attribute("B", "a", "A")
add_query("b", "b", <<["INTEGER", "INTEGER"], ["B", "BOOLEAN"], ["B", "C"], ["C", "BOOLEAN"], ["B", "INTEGER"], ["b", "a"]>>, "b")
add_command("A", "BOOLEAN", <<["D", "BOOLEAN"], ["A", "e"], ["A", "b"]>>)
add_attribute("D", "A", "b")
add_command("A", "D", <<["d", "b"], ["B", "INTEGER"], ["c", "INTEGER"], ["a", "INTEGER"], ["B", "INTEGER"]>>)
add_query("e", "C", <<["B", "INTEGER"], ["A", "C"], ["e", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>, "c")
int_value (21)
bool_value (false)
generate_java_code
add_query("C", "c", <<["b", "BOOLEAN"], ["B", "INTEGER"], ["a", "BOOLEAN"], ["D", "A"]>>, "C")
add_query("B", "b", <<["C", "INTEGER"], ["BOOLEAN", "INTEGER"], ["a", "INTEGER"], ["a", "BOOLEAN"], ["A", "INTEGER"], ["d", "INTEGER"]>>, "c")
add_class(d)
add_command("A", "c", <<["A", "INTEGER"]>>)
bool_value (false)
type_check
bool_value (false)
add_command("B", "D", <<["C", "BOOLEAN"], ["B", "D"], ["A", "INTEGER"]>>)
int_value (14)
int_value (38)
generate_java_code
type_check
add_call_chain(<<C,C,A,b,C,C,c,e,b>>)
logical_negation
add_command("c", "b", <<["A", "INTEGER"], ["c", "e"]>>)
add_query("b", "B", <<["B", "INTEGER"], ["D", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["D", "d"], ["a", "INTEGER"], ["c", "a"], ["C", "INTEGER"], ["B", "BOOLEAN"]>>, "c")
add_attribute("d", "C", "BOOLEAN")
add_query("A", "e", <<["a", "INTEGER"], ["C", "C"], ["B", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "INTEGER"]>>, "c")
bool_value (false)
add_query("C", "D", <<["e", "INTEGER"], ["D", "BOOLEAN"]>>, "b")
logical_negation
numerical_negation
add_call_chain(<<B,a,a,b,B>>)
add_query("C", "e", <<["a", "A"], ["B", "BOOLEAN"], ["D", "D"]>>, "C")
int_value (42)
int_value (37)
add_class(A)
int_value (19)
add_call_chain(<<d,a,c>>)
add_query("B", "c", <<["C", "INTEGER"], ["e", "INTEGER"], ["B", "BOOLEAN"]>>, "B")
logical_negation
numerical_negation
int_value (36)
conjunction
numerical_negation
add_call_chain(<<D,d>>)
logical_negation
add_call_chain(<<c,d,D,C,B,c>>)
disjunction
add_call_chain(<<C,a,B,c,INTEGER,e,c,B>>)
conjunction
add_command("a", "C", <<["e", "e"]>>)
logical_negation
add_call_chain(<<C,e,A,C,C>>)
int_value (5)
add_call_chain(<<D,c,D>>)
add_call_chain(<<INTEGER,d,B,a,a>>)
logical_negation
int_value (25)
bool_value (false)
add_call_chain(<<c,D,B>>)
type_check
disjunction
greater_than
