generate_java_code
type_check
type_check
type_check
add_command("b", "c", <<["d", "INTEGER"]>>)
numerical_negation
add_attribute("c", "a", "C")
add_call_chain(<<b,C>>)
disjunction
add_class(C)
add_query("D", "A", <<["BOOLEAN", "D"]>>, "C")
add_call_chain(<<D,C,D,e>>)
type_check
add_class(c)
equals
numerical_negation
int_value (28)
numerical_negation
add_call_chain(<<a>>)
bool_value (true)
int_value (10)
modulo
add_command("a", "BOOLEAN", <<["a", "C"]>>)
quotient
add_query("e", "D", <<["D", "A"], ["a", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["e", "INTEGER"], ["a", "BOOLEAN"]>>, "b")
add_query("B", "e", <<["C", "INTEGER"], ["e", "c"], ["A", "e"], ["c", "a"], ["a", "INTEGER"], ["e", "INTEGER"]>>, "B")
add_command("C", "A", <<["e", "INTEGER"], ["BOOLEAN", "e"], ["d", "e"], ["D", "C"], ["D", "INTEGER"], ["INTEGER", "INTEGER"]>>)
generate_java_code
type_check
add_call_chain(<<A,d,c,d>>)
add_command("e", "e", <<["D", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "b"], ["D", "INTEGER"], ["C", "BOOLEAN"]>>)
add_command("INTEGER", "e", <<["INTEGER", "BOOLEAN"], ["A", "INTEGER"], ["B", "A"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["c", "INTEGER"], ["A", "BOOLEAN"], ["a", "BOOLEAN"], ["A", "BOOLEAN"]>>)
add_call_chain(<<a,C,c,e,BOOLEAN,A,e>>)
logical_negation
type_check
add_attribute("a", "D", "BOOLEAN")
add_query("a", "INTEGER", <<["a", "INTEGER"], ["c", "INTEGER"], ["d", "BOOLEAN"]>>, "B")
modulo
add_call_chain(<<C,e,B,B,D,e,B>>)
add_call_chain(<<B,d,C,B>>)
add_command("B", "d", <<["C", "INTEGER"], ["B", "INTEGER"], ["a", "BOOLEAN"], ["B", "INTEGER"]>>)
int_value (4)
numerical_negation
numerical_negation
add_call_chain(<<A,c,B,c,D,b>>)
numerical_negation
logical_negation
less_than
add_query("b", "b", <<["c", "INTEGER"], ["e", "BOOLEAN"], ["B", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["a", "d"], ["D", "e"], ["C", "INTEGER"], ["B", "INTEGER"]>>, "A")
bool_value (true)
int_value (8)
generate_java_code
add_call_chain(<<A,A,c,c,a,B,e,b,D>>)
add_query("D", "BOOLEAN", <<["a", "b"], ["d", "BOOLEAN"], ["C", "INTEGER"], ["D", "B"], ["D", "INTEGER"]>>, "A")
add_call_chain(<<b,a,c,C,a>>)
add_query("a", "D", <<["A", "INTEGER"], ["INTEGER", "A"], ["INTEGER", "B"]>>, "e")
add_query("e", "INTEGER", <<["a", "d"], ["b", "INTEGER"], ["b", "INTEGER"], ["D", "a"], ["a", "BOOLEAN"], ["c", "INTEGER"], ["a", "BOOLEAN"], ["a", "INTEGER"], ["C", "INTEGER"]>>, "d")
bool_value (false)
logical_negation
numerical_negation
int_value (41)
add_attribute("C", "INTEGER", "INTEGER")
generate_java_code
add_attribute("a", "INTEGER", "INTEGER")
generate_java_code
add_class(D)
bool_value (true)
conjunction
less_than
add_query("C", "d", <<["c", "INTEGER"], ["D", "BOOLEAN"], ["C", "INTEGER"], ["b", "INTEGER"], ["A", "INTEGER"], ["e", "C"]>>, "e")
int_value (7)
add_query("b", "a", <<["b", "INTEGER"], ["D", "INTEGER"], ["C", "BOOLEAN"]>>, "BOOLEAN")
add_attribute("e", "D", "BOOLEAN")
add_attribute("d", "d", "BOOLEAN")
add_call_chain(<<D>>)
logical_negation
numerical_negation
add_attribute("INTEGER", "INTEGER", "INTEGER")
add_command("D", "b", <<["d", "INTEGER"], ["A", "INTEGER"], ["e", "D"], ["D", "BOOLEAN"], ["e", "BOOLEAN"]>>)
logical_negation
add_class(b)
int_value (26)
add_call_chain(<<D>>)
type_check
add_query("a", "a", <<["e", "BOOLEAN"], ["D", "INTEGER"], ["d", "INTEGER"], ["A", "INTEGER"], ["D", "c"], ["C", "INTEGER"], ["b", "INTEGER"], ["c", "C"], ["b", "INTEGER"]>>, "D")
type_check
add_query("b", "a", <<["B", "INTEGER"], ["c", "INTEGER"], ["BOOLEAN", "c"], ["d", "BOOLEAN"], ["D", "BOOLEAN"]>>, "a")
add_command("INTEGER", "a", <<["d", "c"], ["INTEGER", "B"], ["c", "d"], ["A", "INTEGER"], ["d", "BOOLEAN"], ["D", "INTEGER"]>>)
add_call_chain(<<a,d,D,INTEGER,INTEGER,a,B>>)
bool_value (true)
add_call_chain(<<a,D,e,d,D,d>>)
bool_value (true)
add_command("C", "c", <<["c", "a"], ["A", "BOOLEAN"]>>)
add_call_chain(<<B,a,b,C,d>>)
logical_negation
quotient
bool_value (false)
add_class(d)
conjunction
greater_than
add_command("B", "c", <<["C", "INTEGER"], ["A", "BOOLEAN"], ["D", "BOOLEAN"], ["D", "BOOLEAN"], ["e", "INTEGER"], ["c", "INTEGER"]>>)
logical_negation
add_command("D", "c", <<["B", "BOOLEAN"], ["d", "c"], ["B", "C"], ["b", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "BOOLEAN"]>>)
add_command("e", "e", <<["c", "BOOLEAN"], ["b", "INTEGER"], ["C", "B"], ["c", "INTEGER"], ["d", "A"], ["e", "C"], ["A", "D"], ["c", "INTEGER"]>>)
add_attribute("c", "B", "BOOLEAN")
add_query("B", "B", <<["D", "INTEGER"], ["e", "C"], ["INTEGER", "INTEGER"], ["b", "INTEGER"], ["c", "A"], ["INTEGER", "D"], ["A", "A"]>>, "a")
add_attribute("INTEGER", "C", "A")
add_call_chain(<<BOOLEAN,c,INTEGER,a,INTEGER,b,e>>)
bool_value (true)
add_call_chain(<<A,c,BOOLEAN,INTEGER,e,A,D,a,A>>)
add_class(e)
int_value (36)
add_command("c", "a", <<["B", "INTEGER"], ["A", "BOOLEAN"], ["D", "BOOLEAN"], ["c", "INTEGER"]>>)
add_call_chain(<<a,C,c,e,C,a,a>>)
type_check
add_command("A", "D", <<["b", "b"], ["e", "BOOLEAN"], ["d", "BOOLEAN"], ["d", "INTEGER"], ["a", "A"]>>)
add_class(A)
bool_value (true)
add_query("C", "a", <<["B", "D"]>>, "b")
type_check
add_command("C", "B", <<["BOOLEAN", "BOOLEAN"], ["INTEGER", "d"], ["BOOLEAN", "BOOLEAN"], ["b", "C"]>>)
add_call_chain(<<B,INTEGER,A,c,B>>)
numerical_negation
add_attribute("a", "C", "INTEGER")
addition
logical_negation
disjunction
add_command("c", "D", <<["A", "A"], ["A", "INTEGER"], ["e", "INTEGER"]>>)
add_call_chain(<<C,a,B,b,d>>)
add_call_chain(<<B,A,D,D>>)
add_call_chain(<<C,b,d,e,a,D,d>>)
conjunction
bool_value (false)
add_query("d", "d", <<["A", "A"], ["b", "BOOLEAN"], ["C", "INTEGER"], ["D", "INTEGER"], ["INTEGER", "INTEGER"], ["C", "INTEGER"], ["b", "INTEGER"], ["B", "BOOLEAN"]>>, "b")
add_call_chain(<<d,b,C,B,d>>)
conjunction
bool_value (true)
int_value (40)
add_call_chain(<<c,a,a,d,a,D,e>>)
bool_value (false)
add_query("a", "D", <<["B", "BOOLEAN"], ["e", "BOOLEAN"], ["c", "BOOLEAN"], ["b", "b"], ["A", "BOOLEAN"]>>, "a")
add_call_chain(<<BOOLEAN,C,C,B,D,d,C>>)
type_check
add_call_chain(<<D,D,a,INTEGER,a,C>>)
quotient
add_attribute("e", "b", "c")
add_query("c", "B", <<["INTEGER", "BOOLEAN"], ["c", "INTEGER"], ["B", "BOOLEAN"], ["a", "c"], ["BOOLEAN", "BOOLEAN"], ["c", "BOOLEAN"], ["c", "BOOLEAN"], ["d", "BOOLEAN"]>>, "A")
subtraction
add_query("A", "c", <<["BOOLEAN", "BOOLEAN"], ["c", "BOOLEAN"], ["D", "d"], ["e", "c"], ["d", "BOOLEAN"], ["A", "A"], ["B", "INTEGER"]>>, "a")
logical_negation
int_value (25)
add_query("BOOLEAN", "c", <<["C", "INTEGER"], ["C", "c"], ["a", "C"], ["b", "b"], ["C", "INTEGER"], ["c", "INTEGER"]>>, "B")
greater_than
add_class(D)
numerical_negation
add_query("b", "B", <<["D", "INTEGER"], ["b", "INTEGER"], ["A", "INTEGER"], ["D", "c"], ["B", "A"], ["INTEGER", "D"], ["INTEGER", "INTEGER"]>>, "C")
disjunction
bool_value (true)
multiplication
add_call_chain(<<BOOLEAN,d,A,BOOLEAN,C,a,b,BOOLEAN,a>>)
type_check
add_attribute("INTEGER", "B", "b")
conjunction
add_call_chain(<<B,C>>)
add_call_chain(<<a,B,e,b,C,c,C,b>>)
numerical_negation
add_attribute("A", "A", "INTEGER")
numerical_negation
int_value (7)
generate_java_code
int_value (6)
numerical_negation
add_attribute("b", "INTEGER", "INTEGER")
addition
add_query("B", "BOOLEAN", <<["A", "INTEGER"], ["INTEGER", "BOOLEAN"], ["A", "D"], ["C", "c"], ["b", "INTEGER"], ["C", "B"], ["D", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>, "e")
add_query("d", "b", <<["BOOLEAN", "d"]>>, "b")
bool_value (true)
bool_value (false)
numerical_negation
disjunction
conjunction
add_attribute("B", "D", "INTEGER")
multiplication
generate_java_code
add_attribute("A", "A", "A")
add_command("e", "e", <<["INTEGER", "c"], ["C", "INTEGER"], ["C", "INTEGER"], ["D", "INTEGER"], ["B", "d"], ["C", "INTEGER"]>>)
generate_java_code
int_value (34)
add_call_chain(<<B,D>>)
add_query("b", "e", <<["b", "INTEGER"], ["d", "INTEGER"], ["C", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["A", "A"], ["C", "INTEGER"], ["a", "INTEGER"], ["a", "c"], ["D", "INTEGER"]>>, "D")
add_query("c", "b", <<["a", "B"], ["c", "BOOLEAN"], ["a", "BOOLEAN"], ["c", "BOOLEAN"], ["a", "INTEGER"], ["e", "INTEGER"], ["B", "INTEGER"], ["c", "INTEGER"], ["e", "e"]>>, "D")
add_call_chain(<<c,B>>)
add_call_chain(<<d,d,B,D,INTEGER,D,d,e>>)
add_call_chain(<<C,B,BOOLEAN,C>>)
bool_value (false)
add_call_chain(<<B,e,BOOLEAN>>)
bool_value (true)
add_call_chain(<<INTEGER,c,B,e,INTEGER,A>>)
bool_value (true)
add_call_chain(<<c,B,e,B,BOOLEAN,INTEGER,c,a,D>>)
int_value (5)
add_command("B", "a", <<["INTEGER", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>)
disjunction
generate_java_code
logical_negation
logical_negation
