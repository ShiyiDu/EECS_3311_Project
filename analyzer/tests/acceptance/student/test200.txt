add_attribute("A", "BOOLEAN", "INTEGER")
type_check
int_value (24)
disjunction
numerical_negation
logical_negation
disjunction
bool_value (false)
bool_value (false)
add_call_chain(<<a>>)
add_call_chain(<<d,INTEGER,C,B,C>>)
logical_negation
add_query("b", "C", <<["A", "INTEGER"], ["B", "INTEGER"], ["INTEGER", "BOOLEAN"], ["A", "BOOLEAN"]>>, "e")
add_class(A)
multiplication
add_class(BOOLEAN)
numerical_negation
add_class(BOOLEAN)
int_value (44)
equals
generate_java_code
add_command("D", "C", <<["c", "d"]>>)
add_call_chain(<<D,D,B,BOOLEAN,INTEGER,BOOLEAN,e>>)
logical_negation
numerical_negation
less_than
generate_java_code
generate_java_code
add_query("e", "D", <<["a", "INTEGER"], ["d", "D"]>>, "d")
int_value (8)
add_command("D", "INTEGER", <<["BOOLEAN", "INTEGER"], ["e", "B"], ["a", "c"]>>)
bool_value (true)
add_class(d)
add_attribute("BOOLEAN", "e", "INTEGER")
add_call_chain(<<e,INTEGER,d,a,BOOLEAN,D>>)
add_call_chain(<<a,e,b,c,A,c,e,b>>)
generate_java_code
bool_value (true)
type_check
add_call_chain(<<C,B,B,e,e,a,c>>)
modulo
add_call_chain(<<D,a,INTEGER,B,A,B,c>>)
add_query("c", "c", <<["A", "INTEGER"], ["c", "INTEGER"], ["INTEGER", "BOOLEAN"], ["B", "a"], ["e", "INTEGER"], ["c", "INTEGER"]>>, "a")
equals
conjunction
add_class(B)
add_attribute("B", "D", "BOOLEAN")
logical_negation
equals
add_call_chain(<<a,a,a,A,D,BOOLEAN,d,D>>)
add_class(b)
add_call_chain(<<e,d,e,c>>)
logical_negation
add_command("e", "D", <<["b", "INTEGER"], ["b", "d"], ["C", "A"], ["INTEGER", "BOOLEAN"], ["D", "INTEGER"], ["B", "d"], ["b", "INTEGER"], ["C", "BOOLEAN"]>>)
add_attribute("c", "c", "C")
type_check
add_class(INTEGER)
add_call_chain(<<B>>)
add_attribute("e", "INTEGER", "INTEGER")
add_call_chain(<<B,C,b,b>>)
add_query("a", "A", <<["e", "INTEGER"], ["INTEGER", "A"], ["e", "BOOLEAN"], ["C", "BOOLEAN"], ["d", "INTEGER"], ["a", "C"], ["INTEGER", "INTEGER"], ["b", "INTEGER"]>>, "e")
disjunction
int_value (29)
add_class(B)
add_call_chain(<<b,D,BOOLEAN,e>>)
add_call_chain(<<e,D,D>>)
generate_java_code
bool_value (false)
logical_negation
logical_negation
add_call_chain(<<c,D,B,A>>)
add_query("C", "INTEGER", <<["A", "BOOLEAN"], ["c", "c"], ["D", "INTEGER"]>>, "BOOLEAN")
add_query("c", "c", <<["c", "BOOLEAN"], ["c", "c"], ["INTEGER", "INTEGER"], ["D", "INTEGER"], ["A", "INTEGER"], ["d", "INTEGER"], ["D", "INTEGER"], ["d", "a"], ["A", "A"]>>, "e")
less_than
type_check
add_query("INTEGER", "INTEGER", <<["b", "INTEGER"], ["D", "BOOLEAN"], ["A", "BOOLEAN"]>>, "A")
add_command("d", "B", <<["C", "BOOLEAN"], ["e", "INTEGER"], ["b", "INTEGER"], ["D", "BOOLEAN"], ["C", "INTEGER"], ["b", "INTEGER"], ["C", "BOOLEAN"], ["c", "D"], ["A", "BOOLEAN"]>>)
add_attribute("c", "b", "d")
int_value (23)
add_call_chain(<<D,BOOLEAN,d,BOOLEAN,e,c,D,C>>)
add_command("d", "C", <<["a", "INTEGER"], ["e", "INTEGER"]>>)
equals
add_attribute("B", "e", "BOOLEAN")
logical_negation
logical_negation
add_call_chain(<<d,b,a,c,C,D,A>>)
disjunction
bool_value (false)
modulo
add_call_chain(<<d,A,d>>)
add_call_chain(<<C,b,d,C,a,INTEGER,b>>)
greater_than
add_query("a", "B", <<["c", "BOOLEAN"], ["C", "INTEGER"], ["D", "d"], ["INTEGER", "INTEGER"], ["A", "INTEGER"], ["b", "e"], ["B", "INTEGER"], ["e", "INTEGER"], ["D", "INTEGER"]>>, "a")
equals
add_class(C)
add_class(C)
add_call_chain(<<D,a,C,D,d>>)
bool_value (false)
int_value (35)
generate_java_code
add_call_chain(<<C,D>>)
less_than
type_check
add_call_chain(<<C,d,D,A,d,c,d>>)
add_query("e", "A", <<["d", "INTEGER"], ["A", "BOOLEAN"], ["c", "INTEGER"], ["INTEGER", "INTEGER"], ["B", "B"], ["D", "BOOLEAN"], ["D", "C"], ["c", "INTEGER"]>>, "B")
logical_negation
logical_negation
int_value (46)
add_query("D", "d", <<["A", "INTEGER"], ["D", "BOOLEAN"], ["d", "BOOLEAN"], ["a", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "c"], ["D", "c"], ["C", "e"]>>, "C")
bool_value (true)
int_value (42)
int_value (14)
logical_negation
add_attribute("a", "b", "INTEGER")
numerical_negation
logical_negation
bool_value (false)
add_call_chain(<<c>>)
add_command("c", "BOOLEAN", <<["D", "INTEGER"], ["C", "BOOLEAN"]>>)
add_command("D", "BOOLEAN", <<["a", "b"], ["INTEGER", "A"], ["BOOLEAN", "BOOLEAN"], ["e", "BOOLEAN"], ["e", "C"]>>)
add_call_chain(<<e,e,a,c,B,INTEGER,INTEGER,e>>)
int_value (29)
add_class(D)
add_attribute("e", "C", "INTEGER")
add_command("B", "A", <<["a", "BOOLEAN"]>>)
conjunction
numerical_negation
int_value (15)
add_attribute("D", "B", "BOOLEAN")
add_attribute("e", "a", "INTEGER")
logical_negation
type_check
add_attribute("c", "e", "BOOLEAN")
add_call_chain(<<d,D,c,A,C,d,D>>)
bool_value (false)
numerical_negation
generate_java_code
add_attribute("A", "d", "BOOLEAN")
add_query("D", "a", <<["INTEGER", "BOOLEAN"], ["d", "BOOLEAN"], ["b", "d"], ["B", "c"], ["c", "BOOLEAN"], ["B", "BOOLEAN"], ["c", "BOOLEAN"], ["b", "BOOLEAN"], ["d", "BOOLEAN"]>>, "c")
generate_java_code
int_value (34)
greater_than
numerical_negation
add_command("C", "d", <<["A", "BOOLEAN"], ["a", "INTEGER"], ["B", "INTEGER"], ["b", "A"]>>)
add_attribute("B", "e", "INTEGER")
add_attribute("B", "c", "INTEGER")
type_check
add_call_chain(<<a,A,a,d,c,C>>)
add_call_chain(<<e,B,c,D>>)
add_attribute("C", "B", "INTEGER")
bool_value (false)
add_command("A", "d", <<["c", "d"], ["D", "BOOLEAN"], ["d", "a"], ["e", "INTEGER"], ["C", "B"], ["c", "INTEGER"], ["e", "INTEGER"]>>)
add_call_chain(<<e,c,b>>)
numerical_negation
int_value (5)
add_call_chain(<<D>>)
numerical_negation
add_query("BOOLEAN", "d", <<["d", "BOOLEAN"], ["C", "BOOLEAN"], ["c", "A"]>>, "INTEGER")
greater_than
less_than
logical_negation
bool_value (false)
int_value (36)
add_call_chain(<<a,B,e,c,B>>)
bool_value (false)
add_call_chain(<<a,d>>)
add_command("B", "A", <<["D", "C"], ["a", "INTEGER"], ["c", "d"], ["INTEGER", "BOOLEAN"], ["B", "b"], ["a", "BOOLEAN"], ["c", "A"]>>)
add_call_chain(<<d,e,A>>)
add_query("A", "BOOLEAN", <<["d", "INTEGER"], ["e", "BOOLEAN"], ["d", "a"], ["e", "INTEGER"], ["B", "INTEGER"], ["B", "INTEGER"], ["C", "BOOLEAN"]>>, "C")
subtraction
add_class(C)
numerical_negation
numerical_negation
add_attribute("c", "C", "BOOLEAN")
add_call_chain(<<D,BOOLEAN,INTEGER,e,a,c>>)
numerical_negation
bool_value (true)
add_call_chain(<<c,d,C>>)
add_query("e", "C", <<["a", "INTEGER"], ["b", "INTEGER"], ["INTEGER", "b"], ["INTEGER", "BOOLEAN"]>>, "c")
add_class(INTEGER)
bool_value (false)
bool_value (false)
add_call_chain(<<B,BOOLEAN>>)
add_command("b", "BOOLEAN", <<["c", "b"], ["e", "BOOLEAN"], ["C", "INTEGER"]>>)
add_call_chain(<<INTEGER,D,a,D>>)
add_attribute("e", "C", "C")
greater_than
add_call_chain(<<d,A,INTEGER,C,C,B,INTEGER>>)
add_attribute("b", "A", "BOOLEAN")
int_value (12)
add_command("D", "d", <<["c", "d"], ["e", "INTEGER"]>>)
logical_negation
add_attribute("e", "A", "INTEGER")
add_attribute("B", "B", "INTEGER")
disjunction
type_check
generate_java_code
add_query("A", "D", <<["c", "INTEGER"], ["c", "BOOLEAN"]>>, "e")
add_command("c", "INTEGER", <<["INTEGER", "C"], ["A", "INTEGER"], ["A", "INTEGER"], ["b", "e"], ["b", "INTEGER"], ["d", "INTEGER"], ["d", "A"], ["c", "BOOLEAN"], ["INTEGER", "b"]>>)
add_attribute("c", "c", "INTEGER")
add_attribute("D", "C", "D")
add_attribute("d", "BOOLEAN", "BOOLEAN")
bool_value (false)
add_command("INTEGER", "INTEGER", <<["e", "INTEGER"], ["e", "INTEGER"], ["a", "INTEGER"], ["D", "d"], ["d", "INTEGER"], ["D", "A"], ["e", "INTEGER"], ["D", "INTEGER"]>>)
add_class(A)
add_call_chain(<<A>>)
add_command("b", "INTEGER", <<["INTEGER", "INTEGER"], ["B", "BOOLEAN"]>>)
int_value (24)
add_query("D", "e", <<["B", "BOOLEAN"], ["c", "e"], ["BOOLEAN", "INTEGER"], ["b", "INTEGER"], ["e", "INTEGER"], ["e", "BOOLEAN"], ["d", "BOOLEAN"], ["e", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>, "C")
add_command("C", "INTEGER", <<["B", "BOOLEAN"]>>)
greater_than
add_call_chain(<<INTEGER,c,C,c,a,d,B,b,d>>)
conjunction
modulo
disjunction
generate_java_code
bool_value (false)
add_call_chain(<<D,b,INTEGER,a,B>>)
int_value (3)
add_call_chain(<<e,e,C,a,A,D>>)
add_query("d", "D", <<["d", "INTEGER"]>>, "BOOLEAN")
less_than
logical_negation
numerical_negation
add_class(e)
generate_java_code
int_value (18)
add_call_chain(<<e,D,C,c,e,A,e,e,a>>)
add_call_chain(<<A,INTEGER,B,e>>)
add_query("b", "b", <<["B", "BOOLEAN"], ["C", "INTEGER"], ["a", "BOOLEAN"], ["e", "B"], ["D", "c"], ["d", "INTEGER"], ["D", "BOOLEAN"]>>, "C")
generate_java_code
bool_value (false)
add_call_chain(<<D,a,c>>)
