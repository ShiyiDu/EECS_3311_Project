type_check
add_attribute("c", "B", "BOOLEAN")
logical_negation
add_call_chain(<<C,A,C,A,D,e>>)
numerical_negation
generate_java_code
numerical_negation
add_query("c", "a", <<["BOOLEAN", "BOOLEAN"], ["B", "INTEGER"], ["C", "INTEGER"]>>, "a")
add_attribute("INTEGER", "a", "e")
int_value (26)
numerical_negation
greater_than
numerical_negation
type_check
add_command("b", "B", <<["D", "INTEGER"], ["A", "BOOLEAN"], ["a", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "BOOLEAN"]>>)
bool_value (false)
add_call_chain(<<A,B,D,D,d,e,b,A>>)
add_call_chain(<<b,a,C>>)
add_command("BOOLEAN", "C", <<["d", "BOOLEAN"], ["a", "e"], ["C", "INTEGER"], ["a", "d"], ["INTEGER", "INTEGER"], ["b", "a"]>>)
bool_value (true)
add_call_chain(<<A,A,C,A,C,d>>)
bool_value (false)
less_than
add_call_chain(<<c,B,b>>)
logical_negation
numerical_negation
numerical_negation
add_query("d", "a", <<["D", "BOOLEAN"], ["C", "INTEGER"], ["C", "BOOLEAN"], ["e", "BOOLEAN"], ["b", "INTEGER"], ["a", "BOOLEAN"], ["D", "INTEGER"]>>, "a")
add_attribute("d", "e", "BOOLEAN")
bool_value (false)
numerical_negation
type_check
add_command("D", "e", <<["d", "B"], ["e", "INTEGER"], ["a", "INTEGER"], ["B", "b"], ["a", "BOOLEAN"], ["C", "INTEGER"], ["c", "BOOLEAN"], ["b", "INTEGER"]>>)
add_class(INTEGER)
generate_java_code
type_check
logical_negation
add_call_chain(<<b,a,e,A,INTEGER,a>>)
add_class(A)
bool_value (true)
logical_negation
generate_java_code
add_command("INTEGER", "c", <<["e", "BOOLEAN"]>>)
add_attribute("A", "c", "INTEGER")
less_than
add_call_chain(<<D,B,b,B,a,e,B>>)
int_value (32)
add_call_chain(<<a,D,d,C>>)
add_query("B", "a", <<["b", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "b"], ["e", "INTEGER"], ["D", "D"], ["c", "INTEGER"], ["C", "BOOLEAN"]>>, "A")
add_attribute("b", "b", "B")
numerical_negation
add_call_chain(<<A,d,d,BOOLEAN,BOOLEAN,e,C,d>>)
add_call_chain(<<C,B,D,B,e>>)
bool_value (false)
type_check
add_call_chain(<<D,B>>)
add_call_chain(<<e>>)
add_call_chain(<<B,C,e,B,d>>)
numerical_negation
add_command("c", "D", <<["d", "BOOLEAN"]>>)
logical_negation
type_check
add_call_chain(<<A,a,d,D,C,e,d,B>>)
add_command("A", "B", <<["B", "d"], ["e", "c"], ["d", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "a"]>>)
add_attribute("e", "d", "C")
add_attribute("C", "INTEGER", "BOOLEAN")
numerical_negation
add_command("c", "b", <<["A", "BOOLEAN"]>>)
add_attribute("b", "e", "b")
add_attribute("e", "D", "INTEGER")
add_command("B", "B", <<["c", "B"], ["A", "b"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["A", "INTEGER"]>>)
logical_negation
add_attribute("D", "a", "BOOLEAN")
logical_negation
disjunction
add_call_chain(<<a,INTEGER,c,D>>)
bool_value (false)
logical_negation
add_query("C", "e", <<["b", "INTEGER"], ["A", "a"], ["C", "C"], ["INTEGER", "BOOLEAN"], ["B", "c"], ["C", "D"], ["b", "BOOLEAN"], ["b", "BOOLEAN"], ["b", "INTEGER"]>>, "c")
generate_java_code
bool_value (true)
bool_value (true)
logical_negation
bool_value (false)
int_value (46)
add_call_chain(<<B,a,c,D>>)
add_call_chain(<<d,e,e,a>>)
add_query("c", "c", <<["BOOLEAN", "B"], ["b", "BOOLEAN"], ["D", "B"], ["b", "INTEGER"], ["A", "INTEGER"]>>, "C")
generate_java_code
modulo
less_than
generate_java_code
add_query("b", "a", <<["a", "BOOLEAN"]>>, "B")
add_call_chain(<<d,C,D>>)
add_query("c", "e", <<["C", "BOOLEAN"], ["b", "BOOLEAN"], ["d", "c"], ["INTEGER", "INTEGER"], ["C", "BOOLEAN"], ["e", "BOOLEAN"]>>, "a")
add_command("INTEGER", "A", <<["A", "BOOLEAN"], ["b", "INTEGER"], ["a", "A"], ["B", "D"], ["BOOLEAN", "INTEGER"], ["c", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "BOOLEAN"]>>)
add_attribute("c", "INTEGER", "C")
generate_java_code
bool_value (false)
generate_java_code
add_query("a", "c", <<["e", "BOOLEAN"], ["b", "B"], ["C", "BOOLEAN"], ["D", "INTEGER"], ["b", "c"], ["e", "d"], ["b", "BOOLEAN"], ["b", "D"]>>, "b")
generate_java_code
bool_value (true)
int_value (37)
add_call_chain(<<INTEGER,BOOLEAN,b>>)
multiplication
logical_negation
add_call_chain(<<D,d>>)
add_query("B", "C", <<["a", "A"], ["B", "INTEGER"], ["a", "INTEGER"], ["e", "A"], ["e", "INTEGER"], ["e", "c"], ["b", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "BOOLEAN"]>>, "c")
add_call_chain(<<a,e,b,d>>)
add_call_chain(<<B,A,c,D,A,INTEGER>>)
add_class(e)
less_than
add_call_chain(<<C>>)
add_class(A)
disjunction
add_call_chain(<<d,A,d>>)
logical_negation
add_call_chain(<<D,e>>)
add_call_chain(<<D,B,C,B,INTEGER,C>>)
int_value (43)
add_call_chain(<<A,c,D,e,INTEGER>>)
add_attribute("D", "c", "A")
numerical_negation
equals
bool_value (false)
int_value (47)
add_attribute("A", "C", "INTEGER")
add_command("A", "e", <<["e", "INTEGER"], ["d", "INTEGER"], ["BOOLEAN", "INTEGER"], ["e", "b"], ["A", "B"]>>)
equals
disjunction
add_query("e", "INTEGER", <<["C", "D"], ["D", "INTEGER"]>>, "d")
add_command("a", "BOOLEAN", <<["INTEGER", "BOOLEAN"], ["a", "INTEGER"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["e", "c"], ["INTEGER", "A"], ["BOOLEAN", "B"], ["A", "INTEGER"]>>)
int_value (36)
add_command("C", "b", <<["e", "e"], ["c", "INTEGER"], ["A", "INTEGER"], ["d", "INTEGER"], ["C", "BOOLEAN"], ["b", "D"], ["e", "B"]>>)
int_value (20)
add_attribute("B", "D", "c")
conjunction
equals
add_call_chain(<<D,D,d,d,d,d,A,A,e>>)
type_check
add_call_chain(<<b>>)
add_call_chain(<<b,A,b>>)
type_check
less_than
add_command("e", "D", <<["c", "INTEGER"], ["e", "a"]>>)
add_call_chain(<<A,e,D,D,INTEGER,D,B,A,B>>)
multiplication
bool_value (true)
numerical_negation
add_query("C", "a", <<["b", "INTEGER"], ["d", "b"], ["a", "c"], ["B", "a"]>>, "C")
bool_value (true)
add_attribute("A", "b", "BOOLEAN")
add_class(C)
disjunction
add_attribute("D", "b", "INTEGER")
add_call_chain(<<e,e,c,A,A>>)
add_attribute("d", "B", "INTEGER")
type_check
add_command("C", "B", <<["b", "INTEGER"], ["C", "BOOLEAN"]>>)
add_call_chain(<<A,b,b,b,BOOLEAN>>)
numerical_negation
type_check
add_command("C", "BOOLEAN", <<["C", "e"], ["B", "B"], ["d", "C"], ["C", "A"], ["B", "INTEGER"]>>)
add_class(B)
type_check
add_attribute("D", "a", "a")
add_class(b)
add_query("BOOLEAN", "B", <<["D", "INTEGER"], ["c", "INTEGER"], ["e", "INTEGER"], ["c", "d"]>>, "A")
bool_value (false)
add_query("A", "BOOLEAN", <<["A", "INTEGER"], ["c", "INTEGER"], ["b", "b"], ["B", "BOOLEAN"], ["INTEGER", "a"], ["B", "d"], ["INTEGER", "INTEGER"], ["e", "a"]>>, "INTEGER")
numerical_negation
