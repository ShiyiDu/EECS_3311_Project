add_command("INTEGER", "C", <<["e", "INTEGER"], ["B", "BOOLEAN"], ["a", "D"], ["A", "BOOLEAN"], ["e", "INTEGER"], ["D", "BOOLEAN"]>>)
add_query("d", "b", <<["A", "C"], ["INTEGER", "INTEGER"], ["C", "D"], ["D", "d"]>>, "d")
conjunction
modulo
type_check
add_query("INTEGER", "A", <<["c", "BOOLEAN"], ["A", "BOOLEAN"], ["e", "INTEGER"], ["e", "INTEGER"], ["e", "BOOLEAN"], ["INTEGER", "A"], ["b", "d"], ["B", "INTEGER"], ["c", "BOOLEAN"]>>, "c")
subtraction
add_command("D", "d", <<["b", "INTEGER"]>>)
add_query("B", "A", <<["d", "BOOLEAN"]>>, "b")
numerical_negation
add_command("B", "D", <<["B", "BOOLEAN"], ["C", "c"], ["a", "BOOLEAN"], ["d", "D"]>>)
add_attribute("A", "b", "INTEGER")
int_value (46)
add_call_chain(<<e,C,C>>)
conjunction
add_call_chain(<<b,a,c,D>>)
type_check
add_attribute("C", "b", "BOOLEAN")
add_query("B", "c", <<["d", "BOOLEAN"], ["c", "BOOLEAN"], ["d", "INTEGER"]>>, "c")
bool_value (false)
add_call_chain(<<a>>)
add_query("b", "D", <<["a", "INTEGER"], ["a", "INTEGER"], ["e", "INTEGER"], ["c", "INTEGER"], ["d", "BOOLEAN"]>>, "INTEGER")
less_than
disjunction
add_query("a", "C", <<["d", "INTEGER"], ["d", "BOOLEAN"], ["A", "INTEGER"], ["e", "BOOLEAN"], ["d", "a"], ["D", "BOOLEAN"], ["D", "INTEGER"], ["INTEGER", "INTEGER"], ["C", "C"]>>, "B")
add_command("b", "c", <<["A", "D"], ["C", "BOOLEAN"], ["A", "c"]>>)
generate_java_code
greater_than
add_command("B", "a", <<["B", "D"], ["d", "D"], ["b", "INTEGER"], ["d", "BOOLEAN"], ["A", "b"], ["a", "INTEGER"], ["C", "BOOLEAN"]>>)
add_class(D)
add_attribute("BOOLEAN", "b", "D")
add_call_chain(<<D,b,INTEGER>>)
bool_value (false)
add_query("e", "D", <<["c", "INTEGER"], ["d", "C"], ["c", "C"]>>, "B")
add_call_chain(<<B>>)
int_value (46)
type_check
int_value (26)
add_attribute("d", "BOOLEAN", "BOOLEAN")
add_attribute("c", "e", "INTEGER")
add_command("A", "A", <<["c", "BOOLEAN"], ["B", "INTEGER"], ["e", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "INTEGER"], ["e", "INTEGER"]>>)
equals
add_call_chain(<<a,e,INTEGER,e,C,D,b,C>>)
add_attribute("b", "a", "D")
add_call_chain(<<D,B,B,e>>)
generate_java_code
add_call_chain(<<B,a,e,c>>)
conjunction
add_call_chain(<<d,C,D,C,c,A,A,B,INTEGER>>)
add_call_chain(<<INTEGER,INTEGER>>)
numerical_negation
add_query("B", "A", <<["B", "INTEGER"], ["e", "INTEGER"], ["A", "C"], ["C", "D"], ["d", "INTEGER"]>>, "b")
add_call_chain(<<b,B,D,c,b,A,INTEGER>>)
numerical_negation
bool_value (true)
conjunction
add_call_chain(<<b,d,c,c,B,c>>)
logical_negation
add_command("a", "D", <<["INTEGER", "d"]>>)
add_command("B", "b", <<["b", "BOOLEAN"], ["c", "BOOLEAN"], ["b", "INTEGER"], ["B", "D"], ["a", "INTEGER"], ["a", "INTEGER"], ["A", "BOOLEAN"]>>)
add_attribute("b", "b", "INTEGER")
int_value (36)
add_attribute("A", "b", "BOOLEAN")
type_check
int_value (45)
add_attribute("D", "b", "BOOLEAN")
bool_value (false)
disjunction
disjunction
numerical_negation
int_value (3)
add_attribute("D", "INTEGER", "BOOLEAN")
int_value (20)
add_attribute("INTEGER", "D", "INTEGER")
add_call_chain(<<e,e,A>>)
bool_value (true)
add_call_chain(<<b,e,c,A,B>>)
type_check
add_attribute("d", "c", "D")
numerical_negation
add_call_chain(<<A,c,d,e,e,b,A>>)
add_attribute("c", "a", "B")
add_class(C)
add_attribute("b", "B", "BOOLEAN")
add_attribute("A", "a", "BOOLEAN")
logical_negation
numerical_negation
generate_java_code
bool_value (true)
add_call_chain(<<B,a,b,e>>)
add_call_chain(<<c,B,c,D,B,c>>)
type_check
add_attribute("A", "e", "BOOLEAN")
bool_value (true)
disjunction
add_class(C)
int_value (35)
disjunction
add_query("d", "A", <<["BOOLEAN", "INTEGER"], ["c", "C"], ["c", "BOOLEAN"], ["d", "b"], ["B", "BOOLEAN"], ["B", "BOOLEAN"]>>, "B")
logical_negation
add_query("b", "C", <<["C", "INTEGER"], ["D", "INTEGER"], ["a", "e"], ["B", "BOOLEAN"], ["e", "C"], ["A", "INTEGER"], ["D", "INTEGER"]>>, "C")
add_query("BOOLEAN", "c", <<["a", "BOOLEAN"], ["e", "INTEGER"], ["B", "INTEGER"], ["A", "BOOLEAN"], ["A", "INTEGER"], ["C", "c"], ["BOOLEAN", "a"]>>, "C")
numerical_negation
generate_java_code
add_attribute("c", "e", "e")
add_command("A", "b", <<["e", "INTEGER"], ["A", "e"], ["INTEGER", "INTEGER"], ["e", "INTEGER"], ["C", "BOOLEAN"]>>)
add_call_chain(<<e,e>>)
add_attribute("C", "e", "INTEGER")
add_attribute("c", "d", "b")
add_call_chain(<<D,e,C,B,D>>)
add_call_chain(<<D,BOOLEAN,B,A>>)
add_call_chain(<<A,a,A,d,INTEGER>>)
generate_java_code
add_query("B", "D", <<["e", "INTEGER"], ["d", "INTEGER"], ["d", "INTEGER"], ["B", "INTEGER"], ["INTEGER", "INTEGER"], ["A", "INTEGER"], ["C", "INTEGER"], ["d", "BOOLEAN"]>>, "d")
add_query("e", "e", <<["a", "INTEGER"], ["A", "INTEGER"], ["e", "B"], ["B", "BOOLEAN"], ["A", "BOOLEAN"], ["d", "INTEGER"], ["D", "BOOLEAN"], ["b", "INTEGER"], ["A", "BOOLEAN"]>>, "a")
add_call_chain(<<d>>)
generate_java_code
add_attribute("D", "a", "BOOLEAN")
add_call_chain(<<A,C,A,B>>)
int_value (36)
add_class(A)
add_command("C", "D", <<["c", "BOOLEAN"], ["B", "D"], ["D", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["C", "BOOLEAN"]>>)
int_value (32)
add_call_chain(<<b>>)
add_query("e", "c", <<["D", "C"], ["e", "BOOLEAN"]>>, "A")
logical_negation
conjunction
add_call_chain(<<c>>)
add_call_chain(<<INTEGER,b,BOOLEAN,A,B,C>>)
add_query("B", "INTEGER", <<["c", "INTEGER"], ["A", "BOOLEAN"], ["A", "A"], ["C", "INTEGER"], ["A", "D"]>>, "C")
add_class(D)
bool_value (false)
add_call_chain(<<b,INTEGER,A,D,C>>)
add_command("INTEGER", "B", <<["a", "BOOLEAN"], ["e", "INTEGER"]>>)
conjunction
bool_value (false)
add_query("A", "b", <<["a", "BOOLEAN"], ["A", "INTEGER"], ["INTEGER", "c"], ["d", "BOOLEAN"], ["D", "INTEGER"]>>, "B")
numerical_negation
generate_java_code
bool_value (true)
logical_negation
generate_java_code
add_attribute("b", "b", "B")
int_value (25)
add_attribute("b", "INTEGER", "BOOLEAN")
add_command("D", "A", <<["D", "INTEGER"]>>)
generate_java_code
add_call_chain(<<C,e,c,d,d>>)
bool_value (true)
add_call_chain(<<D>>)
logical_negation
add_call_chain(<<c,C,C,d>>)
logical_negation
add_call_chain(<<a,INTEGER,BOOLEAN,INTEGER>>)
int_value (27)
type_check
bool_value (false)
add_command("B", "B", <<["B", "B"], ["C", "BOOLEAN"], ["d", "INTEGER"], ["A", "INTEGER"], ["B", "INTEGER"], ["BOOLEAN", "INTEGER"], ["B", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "INTEGER"]>>)
add_call_chain(<<e,c,d,C>>)
add_call_chain(<<b,B,A>>)
add_call_chain(<<B,c,e,D,D,b,B>>)
add_call_chain(<<c,b,A,D,d,b,e>>)
add_call_chain(<<A>>)
add_call_chain(<<C,INTEGER,A>>)
numerical_negation
type_check
numerical_negation
add_query("e", "d", <<["b", "BOOLEAN"], ["b", "BOOLEAN"], ["c", "A"], ["c", "INTEGER"], ["c", "D"]>>, "D")
add_class(b)
add_attribute("D", "c", "INTEGER")
numerical_negation
add_query("c", "D", <<["INTEGER", "BOOLEAN"], ["D", "BOOLEAN"], ["b", "A"]>>, "a")
logical_negation
numerical_negation
multiplication
add_command("A", "c", <<["A", "INTEGER"], ["c", "BOOLEAN"], ["b", "INTEGER"], ["e", "BOOLEAN"], ["B", "D"], ["a", "INTEGER"], ["e", "INTEGER"], ["A", "INTEGER"], ["C", "INTEGER"]>>)
bool_value (false)
int_value (30)
add_call_chain(<<D,C,D,A,B,e,d,INTEGER,C>>)
add_query("e", "b", <<["a", "c"], ["C", "BOOLEAN"], ["a", "A"], ["A", "c"], ["d", "B"], ["D", "INTEGER"], ["B", "d"], ["a", "C"], ["b", "INTEGER"]>>, "A")
add_attribute("BOOLEAN", "c", "INTEGER")
add_query("c", "A", <<["a", "A"], ["d", "INTEGER"], ["B", "INTEGER"], ["A", "BOOLEAN"], ["c", "D"], ["e", "BOOLEAN"], ["b", "C"], ["a", "BOOLEAN"], ["a", "BOOLEAN"]>>, "b")
subtraction
add_class(INTEGER)
add_command("D", "b", <<["b", "C"], ["D", "INTEGER"], ["A", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "INTEGER"], ["d", "INTEGER"]>>)
less_than
greater_than
add_call_chain(<<C,c,C,A,A,e>>)
type_check
add_attribute("C", "D", "INTEGER")
add_call_chain(<<c,b,d>>)
logical_negation
int_value (16)
int_value (25)
add_query("a", "A", <<["c", "BOOLEAN"], ["b", "D"], ["c", "INTEGER"], ["b", "BOOLEAN"], ["c", "BOOLEAN"]>>, "e")
bool_value (true)
add_attribute("d", "a", "C")
add_call_chain(<<e,a,b,C,e>>)
numerical_negation
disjunction
add_call_chain(<<C,C,BOOLEAN,BOOLEAN,e,c,a,c>>)
bool_value (true)
add_command("b", "D", <<["b", "INTEGER"], ["C", "b"], ["D", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["e", "D"], ["A", "INTEGER"], ["B", "INTEGER"], ["A", "BOOLEAN"]>>)
generate_java_code
add_query("a", "BOOLEAN", <<["b", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["D", "BOOLEAN"], ["A", "BOOLEAN"]>>, "a")
add_query("D", "D", <<["D", "B"], ["INTEGER", "INTEGER"]>>, "a")
bool_value (false)
add_command("A", "INTEGER", <<["C", "INTEGER"], ["INTEGER", "INTEGER"], ["d", "INTEGER"], ["e", "BOOLEAN"], ["d", "BOOLEAN"], ["b", "INTEGER"]>>)
add_command("e", "b", <<["INTEGER", "C"], ["INTEGER", "D"], ["A", "d"], ["a", "D"], ["C", "BOOLEAN"], ["D", "INTEGER"]>>)
add_command("C", "C", <<["A", "A"], ["b", "a"], ["a", "D"], ["B", "INTEGER"], ["B", "A"], ["D", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>)
add_attribute("D", "D", "BOOLEAN")
add_call_chain(<<a,C>>)
add_query("D", "INTEGER", <<["A", "b"], ["e", "INTEGER"]>>, "b")
add_query("d", "a", <<["D", "D"], ["C", "INTEGER"], ["a", "a"], ["d", "INTEGER"], ["d", "BOOLEAN"], ["B", "C"], ["D", "BOOLEAN"], ["INTEGER", "INTEGER"]>>, "D")
bool_value (false)
numerical_negation
logical_negation
numerical_negation
add_query("d", "INTEGER", <<["A", "d"], ["a", "INTEGER"], ["d", "INTEGER"]>>, "D")
numerical_negation
add_call_chain(<<D,B,B>>)
add_call_chain(<<d,A>>)
add_call_chain(<<A,C>>)
disjunction
less_than
conjunction
type_check
add_call_chain(<<INTEGER,C,B,INTEGER,D,B,c,b>>)
add_call_chain(<<e,d,e,C,A,INTEGER,c,B,BOOLEAN>>)
add_query("d", "D", <<["D", "INTEGER"]>>, "D")
add_call_chain(<<A>>)
int_value (43)
add_call_chain(<<A>>)
numerical_negation
add_call_chain(<<D,A,B,e,d>>)
numerical_negation
add_query("b", "D", <<["INTEGER", "INTEGER"]>>, "b")
add_attribute("B", "a", "INTEGER")
numerical_negation
greater_than
conjunction
add_class(C)
add_command("A", "a", <<["BOOLEAN", "B"], ["D", "BOOLEAN"], ["D", "BOOLEAN"], ["B", "B"], ["d", "BOOLEAN"], ["D", "e"], ["B", "BOOLEAN"]>>)
add_command("a", "BOOLEAN", <<["B", "c"], ["d", "BOOLEAN"], ["a", "INTEGER"], ["b", "BOOLEAN"], ["INTEGER", "c"], ["d", "INTEGER"]>>)
logical_negation
greater_than
add_call_chain(<<A,a,c>>)
add_query("a", "D", <<["d", "BOOLEAN"], ["C", "INTEGER"]>>, "A")
add_query("b", "BOOLEAN", <<["C", "c"], ["e", "INTEGER"], ["C", "BOOLEAN"], ["D", "BOOLEAN"], ["D", "INTEGER"], ["C", "e"]>>, "C")
add_command("d", "d", <<["A", "c"]>>)
generate_java_code
add_call_chain(<<C,A,A,e,C,A,C,d>>)
generate_java_code
int_value (45)
add_call_chain(<<D,e,D,d,A,b,C>>)
bool_value (false)
