add_call_chain(<<c,e,A,B,a,e,BOOLEAN,b>>)
numerical_negation
add_query("B", "D", <<["B", "BOOLEAN"], ["a", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "INTEGER"], ["INTEGER", "INTEGER"]>>, "A")
int_value (15)
disjunction
add_call_chain(<<b,d,d,A,INTEGER,d,e,C,a>>)
add_attribute("INTEGER", "D", "C")
add_attribute("BOOLEAN", "e", "e")
int_value (6)
add_call_chain(<<D>>)
add_class(C)
add_query("B", "e", <<["a", "B"], ["c", "INTEGER"], ["c", "BOOLEAN"]>>, "C")
type_check
bool_value (true)
numerical_negation
less_than
bool_value (true)
add_call_chain(<<D,e>>)
logical_negation
add_class(INTEGER)
bool_value (false)
add_query("B", "D", <<["BOOLEAN", "INTEGER"], ["d", "c"], ["b", "BOOLEAN"], ["d", "BOOLEAN"], ["A", "a"], ["c", "e"], ["d", "BOOLEAN"], ["e", "BOOLEAN"], ["B", "BOOLEAN"]>>, "c")
generate_java_code
add_query("e", "BOOLEAN", <<["D", "BOOLEAN"], ["B", "B"], ["D", "BOOLEAN"], ["D", "D"], ["a", "B"]>>, "INTEGER")
add_attribute("c", "c", "c")
add_query("BOOLEAN", "b", <<["A", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "d"], ["d", "a"], ["c", "A"], ["BOOLEAN", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "BOOLEAN"]>>, "D")
equals
logical_negation
int_value (31)
greater_than
add_query("c", "a", <<["A", "BOOLEAN"], ["C", "BOOLEAN"], ["a", "INTEGER"], ["BOOLEAN", "INTEGER"]>>, "d")
logical_negation
numerical_negation
less_than
add_command("INTEGER", "C", <<["c", "BOOLEAN"], ["C", "BOOLEAN"], ["D", "INTEGER"], ["d", "BOOLEAN"], ["d", "BOOLEAN"], ["D", "INTEGER"], ["D", "e"], ["B", "BOOLEAN"]>>)
equals
add_command("a", "D", <<["A", "C"], ["a", "INTEGER"], ["c", "INTEGER"], ["e", "INTEGER"]>>)
add_command("b", "B", <<["c", "BOOLEAN"], ["A", "BOOLEAN"], ["D", "c"], ["C", "BOOLEAN"], ["d", "BOOLEAN"], ["a", "BOOLEAN"], ["D", "INTEGER"], ["C", "BOOLEAN"]>>)
add_attribute("c", "D", "INTEGER")
type_check
add_call_chain(<<a,B>>)
add_query("A", "C", <<["e", "INTEGER"], ["B", "INTEGER"], ["e", "BOOLEAN"], ["e", "INTEGER"], ["C", "INTEGER"], ["D", "INTEGER"], ["a", "BOOLEAN"], ["e", "INTEGER"]>>, "C")
add_command("a", "B", <<["D", "INTEGER"], ["INTEGER", "INTEGER"], ["B", "INTEGER"], ["c", "c"], ["INTEGER", "INTEGER"], ["B", "BOOLEAN"], ["C", "INTEGER"], ["B", "INTEGER"]>>)
bool_value (true)
add_call_chain(<<A,B,c,a,A,B>>)
add_call_chain(<<BOOLEAN,C>>)
add_class(A)
add_command("D", "A", <<["C", "BOOLEAN"], ["b", "INTEGER"], ["D", "BOOLEAN"], ["B", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["d", "INTEGER"]>>)
add_call_chain(<<d,b,a,A,C,c,b>>)
add_call_chain(<<B,C,C,c,c>>)
disjunction
type_check
add_call_chain(<<D,C,d,C,e,A,A>>)
bool_value (false)
type_check
logical_negation
add_call_chain(<<C,d,INTEGER,e,A,b>>)
disjunction
logical_negation
type_check
logical_negation
add_query("d", "BOOLEAN", <<["a", "INTEGER"], ["C", "INTEGER"], ["C", "A"]>>, "b")
type_check
add_call_chain(<<b,B>>)
int_value (47)
int_value (11)
add_call_chain(<<a>>)
addition
numerical_negation
bool_value (true)
subtraction
add_call_chain(<<A,c,BOOLEAN,A,D,a,c,A>>)
add_call_chain(<<A,D,D,A,b,a,c,b>>)
add_query("e", "c", <<["a", "INTEGER"], ["a", "BOOLEAN"]>>, "C")
add_command("a", "A", <<["INTEGER", "INTEGER"], ["e", "C"], ["B", "INTEGER"], ["c", "C"], ["b", "BOOLEAN"]>>)
less_than
type_check
numerical_negation
add_attribute("BOOLEAN", "B", "INTEGER")
generate_java_code
add_call_chain(<<c,BOOLEAN,C,B>>)
logical_negation
addition
add_call_chain(<<b,B,c,C,a,a,A,A,C>>)
bool_value (true)
add_attribute("c", "B", "A")
add_call_chain(<<C,d,c,D,C,INTEGER,D,d>>)
add_command("c", "D", <<["A", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["c", "BOOLEAN"], ["D", "D"], ["D", "c"]>>)
int_value (9)
conjunction
add_attribute("b", "b", "INTEGER")
add_command("c", "B", <<["D", "INTEGER"], ["c", "c"], ["C", "b"], ["D", "D"], ["b", "INTEGER"], ["B", "BOOLEAN"], ["d", "d"], ["e", "INTEGER"]>>)
add_attribute("c", "c", "BOOLEAN")
add_query("A", "INTEGER", <<["A", "b"], ["e", "C"], ["d", "INTEGER"], ["a", "a"], ["d", "BOOLEAN"], ["D", "BOOLEAN"]>>, "INTEGER")
disjunction
logical_negation
add_call_chain(<<C,b>>)
bool_value (false)
bool_value (true)
numerical_negation
add_call_chain(<<A,B,b,D,D,BOOLEAN,C,A,D>>)
add_command("e", "c", <<["C", "INTEGER"], ["B", "INTEGER"], ["BOOLEAN", "INTEGER"], ["B", "B"], ["A", "B"], ["a", "BOOLEAN"], ["d", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["e", "INTEGER"]>>)
add_call_chain(<<D,B,b,e,b,e>>)
type_check
add_command("B", "D", <<["B", "BOOLEAN"]>>)
add_class(A)
subtraction
bool_value (true)
logical_negation
add_query("C", "B", <<["C", "INTEGER"], ["e", "BOOLEAN"], ["B", "INTEGER"], ["c", "INTEGER"], ["A", "BOOLEAN"]>>, "e")
generate_java_code
bool_value (true)
add_query("A", "C", <<["INTEGER", "INTEGER"], ["A", "BOOLEAN"], ["c", "B"], ["D", "BOOLEAN"], ["b", "e"], ["b", "BOOLEAN"], ["A", "e"]>>, "a")
add_class(C)
add_call_chain(<<b>>)
add_class(b)
add_query("C", "A", <<["C", "INTEGER"], ["INTEGER", "INTEGER"], ["C", "C"], ["c", "INTEGER"], ["C", "INTEGER"], ["A", "INTEGER"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["C", "INTEGER"]>>, "A")
type_check
bool_value (true)
add_call_chain(<<D,c,d,e,e,BOOLEAN,INTEGER>>)
add_call_chain(<<d,b,A,e,A,D>>)
add_command("d", "b", <<["A", "B"], ["c", "BOOLEAN"]>>)
add_class(e)
add_attribute("D", "d", "BOOLEAN")
add_query("b", "A", <<["B", "INTEGER"]>>, "c")
add_command("e", "c", <<["A", "INTEGER"], ["INTEGER", "BOOLEAN"], ["C", "BOOLEAN"], ["INTEGER", "D"], ["d", "C"], ["C", "INTEGER"], ["BOOLEAN", "C"]>>)
int_value (41)
int_value (44)
add_query("c", "C", <<["C", "INTEGER"], ["A", "A"]>>, "B")
generate_java_code
add_command("C", "INTEGER", <<["A", "BOOLEAN"], ["b", "a"], ["e", "INTEGER"], ["A", "INTEGER"], ["c", "BOOLEAN"], ["a", "e"], ["a", "a"]>>)
add_call_chain(<<a,b,b,a,D,c,d,c>>)
type_check
add_command("B", "INTEGER", <<["e", "b"]>>)
equals
add_class(A)
numerical_negation
conjunction
add_command("a", "A", <<["INTEGER", "B"], ["e", "INTEGER"], ["a", "e"], ["B", "C"], ["a", "BOOLEAN"], ["a", "e"], ["B", "c"], ["A", "B"], ["INTEGER", "c"]>>)
add_attribute("INTEGER", "e", "BOOLEAN")
addition
logical_negation
add_call_chain(<<D,A,B,INTEGER,D,a>>)
numerical_negation
add_call_chain(<<B,A,d,c>>)
add_attribute("INTEGER", "e", "INTEGER")
add_class(C)
add_command("c", "A", <<["B", "e"], ["C", "BOOLEAN"], ["e", "D"]>>)
logical_negation
add_call_chain(<<A,c,c>>)
add_command("A", "a", <<["C", "BOOLEAN"], ["c", "BOOLEAN"], ["d", "INTEGER"], ["e", "BOOLEAN"], ["c", "D"], ["C", "c"], ["BOOLEAN", "INTEGER"]>>)
logical_negation
add_attribute("B", "B", "INTEGER")
add_call_chain(<<c,B,d,d,C,b>>)
int_value (7)
add_call_chain(<<INTEGER,a,C,c,A>>)
add_class(C)
add_call_chain(<<c,a>>)
add_command("A", "e", <<["a", "C"], ["b", "BOOLEAN"], ["B", "BOOLEAN"], ["D", "BOOLEAN"], ["d", "B"], ["B", "BOOLEAN"], ["C", "INTEGER"]>>)
add_call_chain(<<c,a>>)
logical_negation
add_call_chain(<<A,d,C,b,A,B>>)
add_query("B", "a", <<["C", "INTEGER"], ["b", "BOOLEAN"], ["d", "c"], ["d", "BOOLEAN"], ["b", "BOOLEAN"], ["b", "INTEGER"], ["d", "BOOLEAN"], ["D", "a"]>>, "C")
numerical_negation
type_check
add_query("B", "INTEGER", <<["A", "e"], ["b", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "INTEGER"]>>, "A")
int_value (38)
equals
bool_value (true)
disjunction
add_command("A", "b", <<["A", "BOOLEAN"], ["c", "BOOLEAN"], ["a", "BOOLEAN"], ["b", "a"], ["C", "BOOLEAN"], ["C", "INTEGER"], ["C", "INTEGER"], ["B", "INTEGER"], ["c", "BOOLEAN"]>>)
numerical_negation
add_call_chain(<<BOOLEAN,C,e,C,C>>)
int_value (11)
less_than
addition
multiplication
add_attribute("C", "B", "INTEGER")
generate_java_code
add_command("INTEGER", "b", <<["c", "INTEGER"], ["A", "BOOLEAN"], ["C", "INTEGER"], ["d", "BOOLEAN"], ["d", "e"]>>)
add_class(b)
quotient
bool_value (true)
add_call_chain(<<e,BOOLEAN,BOOLEAN,d,BOOLEAN,b,C,INTEGER,e>>)
bool_value (true)
add_call_chain(<<e,A,BOOLEAN,b,C,BOOLEAN,B,e>>)
generate_java_code
int_value (21)
type_check
add_query("a", "e", <<["B", "INTEGER"], ["b", "BOOLEAN"], ["c", "BOOLEAN"]>>, "D")
add_call_chain(<<b>>)
bool_value (true)
greater_than
add_attribute("B", "B", "BOOLEAN")
logical_negation
numerical_negation
subtraction
add_class(d)
disjunction
add_attribute("D", "B", "BOOLEAN")
add_call_chain(<<D,D,B>>)
type_check
add_call_chain(<<B,BOOLEAN>>)
add_class(B)
bool_value (true)
add_attribute("C", "C", "BOOLEAN")
bool_value (true)
add_call_chain(<<A,d,BOOLEAN,a,a,D,D,e,e>>)
add_command("A", "c", <<["d", "BOOLEAN"]>>)
int_value (43)
add_call_chain(<<b,INTEGER,C>>)
bool_value (true)
add_attribute("c", "B", "e")
bool_value (true)
conjunction
add_command("d", "b", <<["C", "B"], ["C", "INTEGER"], ["b", "INTEGER"]>>)
int_value (1)
logical_negation
generate_java_code
add_query("A", "d", <<["c", "INTEGER"], ["D", "D"], ["C", "BOOLEAN"], ["D", "BOOLEAN"]>>, "INTEGER")
add_class(B)
conjunction
bool_value (true)
numerical_negation
add_attribute("c", "c", "BOOLEAN")
add_command("a", "A", <<["d", "INTEGER"], ["d", "BOOLEAN"], ["b", "a"]>>)
add_query("C", "A", <<["e", "BOOLEAN"]>>, "A")
logical_negation
add_query("A", "B", <<["e", "INTEGER"], ["d", "INTEGER"], ["B", "INTEGER"]>>, "B")
add_command("a", "B", <<["c", "D"], ["b", "INTEGER"], ["b", "INTEGER"], ["INTEGER", "INTEGER"], ["C", "c"], ["A", "BOOLEAN"], ["B", "c"], ["e", "INTEGER"], ["c", "BOOLEAN"]>>)
add_attribute("INTEGER", "D", "INTEGER")
add_attribute("c", "D", "e")
bool_value (true)
logical_negation
add_call_chain(<<B,INTEGER,d,c,C,d,b,e,c>>)
add_command("C", "BOOLEAN", <<["B", "INTEGER"], ["b", "INTEGER"], ["a", "INTEGER"], ["D", "BOOLEAN"], ["B", "INTEGER"], ["c", "BOOLEAN"]>>)
add_query("C", "B", <<["C", "C"], ["INTEGER", "INTEGER"], ["B", "b"]>>, "B")
add_attribute("B", "d", "BOOLEAN")
add_class(B)
disjunction
bool_value (true)
logical_negation
add_call_chain(<<b,A,C,B,B,c>>)
add_attribute("c", "c", "a")
int_value (27)
add_attribute("A", "B", "e")
generate_java_code
add_call_chain(<<e>>)
add_attribute("e", "C", "b")
numerical_negation
add_call_chain(<<A,a>>)
add_attribute("a", "D", "d")
add_call_chain(<<d,INTEGER,a>>)
generate_java_code
equals
add_call_chain(<<e,c,b,D,INTEGER,BOOLEAN>>)
disjunction
add_attribute("C", "a", "C")
bool_value (true)
add_call_chain(<<D,e,D,e,d,e,D,INTEGER,INTEGER>>)
numerical_negation
add_call_chain(<<B,b,INTEGER,b,b>>)
add_query("c", "b", <<["A", "e"], ["e", "INTEGER"], ["B", "c"], ["c", "BOOLEAN"], ["B", "B"], ["b", "BOOLEAN"]>>, "C")
numerical_negation
conjunction
generate_java_code
add_call_chain(<<a,d,b,b,C,D,e,BOOLEAN,a>>)
int_value (3)
