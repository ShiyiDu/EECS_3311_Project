disjunction
greater_than
subtraction
add_attribute("C", "B", "d")
add_command("C", "B", <<["a", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "c"], ["D", "INTEGER"], ["b", "BOOLEAN"], ["A", "BOOLEAN"]>>)
bool_value (false)
logical_negation
numerical_negation
equals
numerical_negation
add_attribute("D", "D", "BOOLEAN")
int_value (2)
conjunction
int_value (42)
add_command("B", "b", <<["c", "INTEGER"], ["A", "BOOLEAN"]>>)
type_check
add_attribute("D", "d", "INTEGER")
int_value (12)
add_query("D", "a", <<["BOOLEAN", "BOOLEAN"], ["c", "A"], ["A", "BOOLEAN"], ["INTEGER", "INTEGER"], ["c", "BOOLEAN"], ["e", "BOOLEAN"], ["B", "B"]>>, "B")
add_command("D", "d", <<["B", "INTEGER"], ["B", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>)
add_call_chain(<<C,B,B,INTEGER,c,b,INTEGER,A,INTEGER>>)
add_attribute("B", "D", "INTEGER")
bool_value (false)
logical_negation
add_command("d", "a", <<["B", "INTEGER"]>>)
generate_java_code
add_attribute("e", "c", "A")
generate_java_code
add_call_chain(<<BOOLEAN,e>>)
bool_value (false)
logical_negation
int_value (1)
logical_negation
bool_value (false)
add_command("B", "D", <<["C", "BOOLEAN"], ["e", "BOOLEAN"], ["b", "BOOLEAN"], ["d", "B"], ["b", "BOOLEAN"]>>)
conjunction
logical_negation
add_attribute("B", "c", "BOOLEAN")
logical_negation
add_query("b", "D", <<["B", "C"], ["d", "INTEGER"], ["b", "B"], ["c", "INTEGER"], ["c", "BOOLEAN"], ["a", "a"], ["D", "BOOLEAN"], ["b", "INTEGER"]>>, "BOOLEAN")
bool_value (true)
int_value (36)
add_attribute("b", "b", "INTEGER")
add_class(d)
type_check
add_attribute("B", "BOOLEAN", "b")
numerical_negation
add_query("D", "e", <<["C", "INTEGER"], ["C", "a"], ["e", "INTEGER"], ["e", "BOOLEAN"], ["b", "BOOLEAN"]>>, "a")
generate_java_code
add_class(C)
add_query("b", "e", <<["A", "BOOLEAN"]>>, "B")
add_call_chain(<<C,BOOLEAN,e,B>>)
bool_value (false)
add_call_chain(<<B,D,d>>)
logical_negation
logical_negation
add_command("C", "A", <<["b", "c"]>>)
logical_negation
bool_value (true)
add_query("d", "INTEGER", <<["C", "INTEGER"], ["c", "e"], ["B", "a"], ["D", "BOOLEAN"], ["A", "b"], ["e", "b"]>>, "A")
add_command("e", "d", <<["e", "INTEGER"], ["C", "BOOLEAN"], ["B", "D"], ["INTEGER", "BOOLEAN"], ["D", "INTEGER"], ["A", "BOOLEAN"]>>)
int_value (5)
logical_negation
add_command("b", "B", <<["D", "INTEGER"], ["c", "INTEGER"], ["D", "e"], ["C", "BOOLEAN"], ["c", "BOOLEAN"], ["e", "D"], ["c", "BOOLEAN"], ["D", "BOOLEAN"]>>)
less_than
type_check
int_value (40)
numerical_negation
add_attribute("C", "INTEGER", "INTEGER")
conjunction
add_command("a", "D", <<["e", "BOOLEAN"], ["e", "INTEGER"], ["B", "B"]>>)
add_command("c", "c", <<["D", "BOOLEAN"], ["D", "INTEGER"], ["C", "d"], ["B", "c"], ["a", "BOOLEAN"], ["C", "B"], ["INTEGER", "b"], ["B", "BOOLEAN"]>>)
modulo
int_value (48)
bool_value (false)
add_command("B", "A", <<["e", "D"]>>)
add_call_chain(<<B,e,C,d,b,BOOLEAN,c,C,C>>)
add_command("D", "B", <<["c", "d"], ["A", "D"]>>)
bool_value (false)
add_class(D)
add_query("d", "D", <<["d", "A"], ["d", "B"], ["BOOLEAN", "A"]>>, "D")
add_class(B)
int_value (14)
generate_java_code
add_class(e)
bool_value (false)
numerical_negation
equals
numerical_negation
add_attribute("d", "BOOLEAN", "INTEGER")
add_class(D)
add_attribute("A", "b", "d")
greater_than
type_check
disjunction
bool_value (true)
int_value (39)
add_call_chain(<<c,BOOLEAN,B,INTEGER,B,b,e,b,d>>)
add_query("C", "A", <<["c", "INTEGER"], ["D", "BOOLEAN"], ["a", "BOOLEAN"], ["a", "INTEGER"], ["B", "INTEGER"]>>, "D")
type_check
generate_java_code
bool_value (true)
generate_java_code
add_query("A", "a", <<["C", "BOOLEAN"]>>, "BOOLEAN")
generate_java_code
bool_value (false)
add_attribute("A", "C", "D")
add_call_chain(<<A,d,D,a,c,INTEGER>>)
add_attribute("C", "d", "INTEGER")
bool_value (false)
add_attribute("b", "a", "BOOLEAN")
add_attribute("a", "BOOLEAN", "D")
add_call_chain(<<A,b>>)
add_query("e", "c", <<["C", "INTEGER"], ["A", "BOOLEAN"]>>, "a")
add_call_chain(<<D,BOOLEAN,C,B,c,INTEGER,A,b,d>>)
bool_value (false)
int_value (11)
int_value (37)
quotient
generate_java_code
add_command("e", "B", <<["e", "BOOLEAN"], ["INTEGER", "a"], ["B", "BOOLEAN"], ["BOOLEAN", "A"]>>)
logical_negation
add_command("e", "d", <<["e", "BOOLEAN"], ["a", "A"], ["a", "BOOLEAN"], ["c", "d"]>>)
numerical_negation
logical_negation
type_check
subtraction
add_attribute("A", "C", "INTEGER")
add_attribute("B", "A", "BOOLEAN")
int_value (46)
add_query("B", "A", <<["d", "BOOLEAN"], ["INTEGER", "d"]>>, "c")
bool_value (false)
numerical_negation
numerical_negation
add_query("A", "d", <<["A", "BOOLEAN"], ["c", "C"], ["INTEGER", "e"], ["BOOLEAN", "BOOLEAN"], ["d", "BOOLEAN"], ["A", "BOOLEAN"]>>, "B")
add_query("C", "c", <<["a", "B"], ["a", "INTEGER"], ["INTEGER", "INTEGER"]>>, "e")
int_value (11)
add_command("a", "B", <<["B", "A"], ["C", "e"], ["b", "A"], ["D", "B"], ["INTEGER", "A"], ["c", "c"], ["C", "INTEGER"], ["BOOLEAN", "INTEGER"], ["a", "BOOLEAN"]>>)
logical_negation
generate_java_code
add_query("D", "A", <<["D", "a"], ["e", "c"], ["c", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["INTEGER", "e"]>>, "c")
numerical_negation
equals
type_check
add_command("A", "D", <<["c", "BOOLEAN"], ["e", "BOOLEAN"], ["D", "INTEGER"], ["C", "BOOLEAN"], ["D", "BOOLEAN"], ["a", "INTEGER"], ["b", "INTEGER"], ["b", "INTEGER"]>>)
type_check
add_class(C)
bool_value (true)
add_call_chain(<<a,B,INTEGER>>)
add_query("D", "D", <<["C", "INTEGER"], ["e", "INTEGER"], ["e", "INTEGER"], ["D", "INTEGER"], ["c", "INTEGER"], ["c", "BOOLEAN"]>>, "B")
add_call_chain(<<b,A,c,B,a,a,b,C>>)
disjunction
logical_negation
numerical_negation
modulo
generate_java_code
add_command("A", "d", <<["e", "d"]>>)
add_query("C", "e", <<["C", "BOOLEAN"], ["A", "BOOLEAN"], ["B", "INTEGER"], ["C", "INTEGER"]>>, "e")
bool_value (true)
add_call_chain(<<c,c,e,A,b,e,A>>)
add_command("C", "e", <<["a", "BOOLEAN"], ["B", "INTEGER"], ["INTEGER", "BOOLEAN"], ["D", "A"], ["C", "INTEGER"], ["b", "INTEGER"], ["A", "A"], ["BOOLEAN", "BOOLEAN"]>>)
logical_negation
add_attribute("b", "B", "BOOLEAN")
add_query("C", "D", <<["a", "d"], ["D", "BOOLEAN"], ["c", "BOOLEAN"], ["d", "INTEGER"], ["B", "INTEGER"], ["INTEGER", "BOOLEAN"], ["d", "BOOLEAN"], ["C", "INTEGER"]>>, "C")
logical_negation
logical_negation
add_query("C", "B", <<["e", "b"]>>, "C")
add_query("B", "C", <<["d", "BOOLEAN"], ["D", "c"], ["e", "A"], ["C", "INTEGER"]>>, "e")
greater_than
add_command("a", "D", <<["C", "BOOLEAN"], ["c", "BOOLEAN"], ["BOOLEAN", "a"], ["A", "BOOLEAN"]>>)
generate_java_code
add_call_chain(<<a,A,A,A,b,b,c,a,c>>)
bool_value (false)
add_call_chain(<<c,b>>)
generate_java_code
bool_value (true)
add_call_chain(<<d,c,e,INTEGER,e,b,e,B>>)
logical_negation
greater_than
add_call_chain(<<C,D,b,D,C,INTEGER,c>>)
int_value (42)
logical_negation
int_value (31)
add_command("C", "b", <<["C", "B"], ["d", "A"], ["B", "D"], ["D", "C"], ["a", "INTEGER"], ["A", "B"], ["BOOLEAN", "INTEGER"], ["c", "a"]>>)
add_call_chain(<<A,B,B,b,b,a,BOOLEAN>>)
type_check
bool_value (true)
addition
add_call_chain(<<a,a,b,INTEGER,D>>)
add_command("C", "C", <<["B", "INTEGER"], ["b", "a"], ["b", "C"]>>)
add_command("c", "B", <<["BOOLEAN", "BOOLEAN"], ["B", "INTEGER"], ["e", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "BOOLEAN"], ["a", "A"]>>)
numerical_negation
add_call_chain(<<e,D,D,b,e,b,C,BOOLEAN,B>>)
add_query("INTEGER", "A", <<["d", "BOOLEAN"], ["c", "INTEGER"]>>, "a")
add_call_chain(<<C,d,e,b,BOOLEAN>>)
add_query("d", "c", <<["A", "C"], ["INTEGER", "INTEGER"], ["b", "e"]>>, "e")
numerical_negation
generate_java_code
int_value (28)
add_class(INTEGER)
bool_value (false)
logical_negation
addition
numerical_negation
add_attribute("a", "c", "BOOLEAN")
add_call_chain(<<INTEGER,C,A>>)
type_check
int_value (17)
bool_value (false)
bool_value (true)
add_attribute("C", "D", "INTEGER")
add_call_chain(<<c,C,a,a,d,D,A>>)
add_attribute("A", "d", "a")
add_attribute("c", "a", "INTEGER")
quotient
numerical_negation
quotient
disjunction
add_call_chain(<<D,D>>)
generate_java_code
add_class(c)
equals
add_attribute("C", "d", "BOOLEAN")
add_call_chain(<<A>>)
bool_value (true)
add_attribute("b", "C", "BOOLEAN")
generate_java_code
numerical_negation
addition
add_call_chain(<<INTEGER,BOOLEAN,B,B>>)
bool_value (true)
int_value (28)
