add_query("A", "a", <<["c", "BOOLEAN"]>>, "B")
generate_java_code
type_check
add_call_chain(<<D,BOOLEAN,d,b,d,C>>)
bool_value (false)
conjunction
add_query("e", "e", <<["D", "INTEGER"], ["B", "BOOLEAN"], ["A", "e"], ["INTEGER", "A"], ["C", "BOOLEAN"], ["a", "a"], ["D", "a"], ["A", "BOOLEAN"], ["e", "D"]>>, "d")
add_call_chain(<<D,b,a,INTEGER,B,B,d,d,e>>)
bool_value (true)
add_query("B", "c", <<["D", "INTEGER"], ["b", "B"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["e", "d"], ["c", "C"], ["BOOLEAN", "BOOLEAN"]>>, "b")
quotient
numerical_negation
disjunction
subtraction
add_call_chain(<<B,a,B>>)
add_attribute("a", "e", "BOOLEAN")
type_check
numerical_negation
bool_value (false)
add_command("INTEGER", "c", <<["e", "INTEGER"], ["c", "e"], ["C", "A"]>>)
add_call_chain(<<INTEGER,e,C>>)
add_call_chain(<<c,e>>)
add_class(d)
add_query("c", "A", <<["b", "INTEGER"], ["C", "INTEGER"], ["d", "INTEGER"], ["e", "INTEGER"], ["D", "C"], ["c", "INTEGER"]>>, "A")
add_call_chain(<<c,e,D,D,C,d>>)
add_call_chain(<<a,C>>)
bool_value (false)
add_call_chain(<<C,D,C,c>>)
add_command("b", "D", <<["e", "INTEGER"], ["d", "INTEGER"], ["A", "BOOLEAN"], ["B", "BOOLEAN"]>>)
add_command("D", "BOOLEAN", <<["a", "d"]>>)
int_value (2)
conjunction
logical_negation
add_call_chain(<<a,B,INTEGER,e,a,b,d>>)
logical_negation
logical_negation
add_query("B", "b", <<["D", "BOOLEAN"], ["A", "BOOLEAN"], ["A", "BOOLEAN"], ["c", "BOOLEAN"], ["C", "BOOLEAN"], ["B", "INTEGER"]>>, "d")
bool_value (false)
add_call_chain(<<A>>)
add_call_chain(<<INTEGER,d,C>>)
equals
conjunction
add_command("C", "C", <<["a", "INTEGER"], ["A", "INTEGER"], ["D", "A"], ["c", "D"]>>)
numerical_negation
add_command("C", "c", <<["e", "d"], ["D", "c"], ["A", "e"], ["B", "BOOLEAN"], ["BOOLEAN", "D"], ["INTEGER", "BOOLEAN"], ["e", "BOOLEAN"]>>)
add_query("D", "C", <<["INTEGER", "INTEGER"], ["B", "d"], ["INTEGER", "INTEGER"], ["c", "INTEGER"]>>, "BOOLEAN")
bool_value (true)
add_class(B)
int_value (42)
add_attribute("D", "a", "BOOLEAN")
add_command("B", "a", <<["C", "INTEGER"]>>)
add_attribute("D", "a", "A")
add_class(C)
add_command("A", "D", <<["e", "D"], ["D", "b"], ["a", "INTEGER"], ["a", "e"], ["INTEGER", "BOOLEAN"], ["e", "INTEGER"], ["B", "INTEGER"], ["A", "INTEGER"]>>)
bool_value (false)
add_query("C", "A", <<["d", "BOOLEAN"], ["D", "INTEGER"]>>, "INTEGER")
bool_value (false)
numerical_negation
int_value (46)
disjunction
subtraction
int_value (30)
add_call_chain(<<a,c,d>>)
add_call_chain(<<d,d>>)
int_value (12)
add_command("INTEGER", "d", <<["d", "BOOLEAN"], ["D", "A"]>>)
add_attribute("C", "e", "BOOLEAN")
int_value (11)
logical_negation
add_call_chain(<<e>>)
int_value (19)
add_attribute("D", "c", "BOOLEAN")
add_query("b", "a", <<["c", "INTEGER"], ["BOOLEAN", "INTEGER"], ["e", "A"]>>, "C")
add_call_chain(<<c>>)
logical_negation
add_query("C", "a", <<["d", "INTEGER"], ["d", "BOOLEAN"], ["C", "BOOLEAN"]>>, "A")
add_class(d)
add_query("A", "c", <<["d", "INTEGER"], ["C", "BOOLEAN"], ["a", "b"], ["A", "BOOLEAN"], ["A", "c"]>>, "C")
int_value (5)
conjunction
add_command("c", "B", <<["D", "b"]>>)
add_call_chain(<<d,INTEGER,d,C,INTEGER,d>>)
generate_java_code
numerical_negation
logical_negation
bool_value (false)
numerical_negation
add_call_chain(<<C,e>>)
add_call_chain(<<e,A,B,e>>)
int_value (6)
add_attribute("B", "d", "BOOLEAN")
bool_value (false)
disjunction
add_call_chain(<<C,d>>)
equals
add_call_chain(<<C,B,c>>)
add_class(C)
add_call_chain(<<D,c,B,a,d,d,a,e,e>>)
add_command("C", "A", <<["D", "c"], ["B", "A"], ["b", "BOOLEAN"], ["B", "BOOLEAN"], ["c", "INTEGER"], ["b", "b"], ["C", "INTEGER"], ["B", "b"], ["A", "INTEGER"]>>)
add_call_chain(<<D,c,INTEGER,INTEGER>>)
add_attribute("d", "b", "BOOLEAN")
numerical_negation
add_attribute("D", "B", "BOOLEAN")
add_query("B", "C", <<["C", "INTEGER"], ["C", "INTEGER"], ["INTEGER", "b"], ["B", "INTEGER"]>>, "b")
add_query("INTEGER", "a", <<["C", "INTEGER"], ["C", "BOOLEAN"], ["C", "a"], ["INTEGER", "a"], ["e", "BOOLEAN"], ["e", "INTEGER"], ["D", "A"]>>, "a")
type_check
greater_than
quotient
bool_value (true)
less_than
bool_value (true)
int_value (34)
add_class(a)
add_query("B", "A", <<["C", "d"], ["c", "INTEGER"], ["B", "INTEGER"]>>, "b")
add_call_chain(<<a,B,B,e,C,C,INTEGER,C,c>>)
subtraction
add_attribute("c", "A", "INTEGER")
add_attribute("A", "C", "INTEGER")
numerical_negation
conjunction
add_call_chain(<<B,B,INTEGER,A,d,e,b,D>>)
type_check
add_class(D)
add_call_chain(<<D,a,a,b,e,C>>)
add_query("INTEGER", "c", <<["b", "a"], ["a", "BOOLEAN"], ["d", "BOOLEAN"], ["c", "BOOLEAN"], ["B", "a"]>>, "c")
add_query("C", "C", <<["a", "BOOLEAN"], ["D", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["d", "BOOLEAN"], ["B", "INTEGER"], ["b", "A"], ["BOOLEAN", "INTEGER"], ["a", "b"]>>, "D")
bool_value (false)
add_call_chain(<<e,C,B,d,A>>)
int_value (17)
quotient
numerical_negation
numerical_negation
add_attribute("d", "d", "INTEGER")
add_attribute("d", "a", "BOOLEAN")
add_query("d", "b", <<["A", "INTEGER"], ["b", "INTEGER"], ["INTEGER", "BOOLEAN"], ["e", "BOOLEAN"], ["C", "INTEGER"]>>, "c")
add_attribute("D", "d", "D")
add_attribute("D", "e", "INTEGER")
generate_java_code
bool_value (false)
int_value (25)
add_query("D", "e", <<["B", "INTEGER"], ["B", "BOOLEAN"], ["a", "BOOLEAN"], ["D", "B"], ["B", "A"], ["b", "INTEGER"], ["INTEGER", "B"], ["c", "BOOLEAN"], ["e", "INTEGER"]>>, "BOOLEAN")
numerical_negation
add_query("e", "A", <<["a", "INTEGER"], ["B", "BOOLEAN"], ["a", "c"], ["d", "c"], ["B", "BOOLEAN"]>>, "D")
add_command("A", "INTEGER", <<["A", "B"]>>)
logical_negation
generate_java_code
int_value (46)
add_class(C)
add_call_chain(<<d,e,b,D,D>>)
int_value (32)
equals
multiplication
add_call_chain(<<D,BOOLEAN,A,BOOLEAN,A,b>>)
bool_value (false)
add_attribute("d", "B", "INTEGER")
conjunction
logical_negation
add_class(D)
less_than
add_command("A", "a", <<["BOOLEAN", "INTEGER"], ["D", "INTEGER"], ["b", "INTEGER"], ["C", "INTEGER"]>>)
generate_java_code
add_call_chain(<<d,e,e,a,A,B,B,c,C>>)
int_value (44)
bool_value (true)
logical_negation
multiplication
type_check
bool_value (true)
add_attribute("a", "e", "BOOLEAN")
equals
disjunction
add_class(B)
add_class(d)
add_attribute("a", "A", "INTEGER")
add_query("D", "a", <<["B", "BOOLEAN"], ["D", "BOOLEAN"], ["INTEGER", "INTEGER"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["c", "INTEGER"], ["b", "BOOLEAN"], ["C", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>, "d")
logical_negation
add_call_chain(<<a,a,A>>)
generate_java_code
add_command("A", "b", <<["e", "INTEGER"]>>)
add_attribute("INTEGER", "BOOLEAN", "BOOLEAN")
add_call_chain(<<c,a,A,D,C,D,A>>)
int_value (37)
generate_java_code
int_value (19)
bool_value (true)
add_call_chain(<<D,INTEGER,C,A,INTEGER,D,D>>)
add_attribute("c", "INTEGER", "BOOLEAN")
add_query("a", "D", <<["A", "BOOLEAN"], ["e", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"]>>, "D")
logical_negation
add_call_chain(<<A,d,c,d>>)
subtraction
add_call_chain(<<d,C,c>>)
add_command("B", "d", <<["a", "BOOLEAN"], ["a", "INTEGER"], ["B", "INTEGER"], ["b", "BOOLEAN"]>>)
add_command("c", "INTEGER", <<["c", "INTEGER"], ["a", "INTEGER"], ["e", "B"], ["A", "d"], ["d", "BOOLEAN"], ["d", "INTEGER"], ["a", "a"], ["C", "D"], ["B", "B"]>>)
logical_negation
numerical_negation
int_value (45)
add_command("c", "B", <<["a", "BOOLEAN"], ["b", "C"], ["e", "C"], ["BOOLEAN", "INTEGER"], ["C", "d"], ["b", "BOOLEAN"], ["e", "d"]>>)
int_value (30)
add_attribute("d", "A", "INTEGER")
add_attribute("a", "A", "INTEGER")
numerical_negation
add_command("INTEGER", "D", <<["d", "BOOLEAN"], ["C", "INTEGER"]>>)
greater_than
numerical_negation
add_call_chain(<<e,b,BOOLEAN,a,INTEGER,B,a,d>>)
add_attribute("INTEGER", "D", "INTEGER")
bool_value (false)
add_call_chain(<<A,D>>)
add_call_chain(<<a,D,C,e,a>>)
add_attribute("B", "b", "INTEGER")
add_query("c", "c", <<["B", "INTEGER"], ["c", "INTEGER"], ["A", "A"], ["D", "D"], ["BOOLEAN", "a"], ["D", "BOOLEAN"], ["d", "C"], ["C", "b"], ["A", "INTEGER"]>>, "c")
logical_negation
generate_java_code
add_query("B", "A", <<["C", "A"], ["d", "BOOLEAN"], ["D", "BOOLEAN"], ["c", "BOOLEAN"], ["d", "INTEGER"], ["D", "A"], ["C", "b"], ["BOOLEAN", "BOOLEAN"], ["C", "BOOLEAN"]>>, "d")
subtraction
numerical_negation
add_call_chain(<<C,d,c>>)
type_check
int_value (1)
add_attribute("a", "a", "c")
add_query("A", "d", <<["C", "C"], ["A", "INTEGER"], ["c", "BOOLEAN"], ["d", "d"], ["d", "BOOLEAN"]>>, "B")
equals
generate_java_code
greater_than
