add_class(C)
add_query("d", "a", <<["D", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["a", "D"], ["b", "INTEGER"], ["d", "BOOLEAN"], ["d", "BOOLEAN"]>>, "B")
generate_java_code
add_call_chain(<<D,e,A,a,BOOLEAN>>)
add_command("b", "B", <<["C", "BOOLEAN"], ["e", "INTEGER"], ["b", "INTEGER"]>>)
add_query("b", "B", <<["C", "b"], ["c", "BOOLEAN"]>>, "B")
add_attribute("a", "a", "C")
bool_value (false)
logical_negation
conjunction
numerical_negation
add_attribute("a", "a", "INTEGER")
add_call_chain(<<C,d>>)
add_call_chain(<<B,e>>)
bool_value (false)
logical_negation
add_class(b)
add_query("b", "BOOLEAN", <<["e", "BOOLEAN"], ["INTEGER", "INTEGER"], ["d", "b"], ["a", "BOOLEAN"], ["e", "INTEGER"]>>, "B")
add_call_chain(<<b,b,INTEGER,d,INTEGER,D>>)
add_call_chain(<<C>>)
add_class(A)
add_call_chain(<<BOOLEAN,BOOLEAN,B,D,C,A>>)
type_check
generate_java_code
add_command("B", "c", <<["e", "C"], ["e", "D"]>>)
equals
type_check
bool_value (false)
logical_negation
generate_java_code
disjunction
bool_value (true)
int_value (23)
add_call_chain(<<c,e,e,a>>)
add_query("BOOLEAN", "c", <<["INTEGER", "BOOLEAN"], ["B", "INTEGER"], ["b", "INTEGER"], ["a", "BOOLEAN"], ["D", "INTEGER"]>>, "e")
logical_negation
add_call_chain(<<D,d,C,B,b,A>>)
add_class(B)
less_than
type_check
type_check
logical_negation
bool_value (false)
add_query("a", "a", <<["A", "b"], ["C", "e"], ["A", "d"], ["e", "INTEGER"]>>, "A")
add_call_chain(<<INTEGER,e,B,e,B>>)
add_call_chain(<<b>>)
add_command("B", "d", <<["A", "b"], ["d", "INTEGER"], ["B", "BOOLEAN"], ["d", "INTEGER"], ["a", "BOOLEAN"]>>)
disjunction
type_check
add_call_chain(<<a,D,e,D>>)
add_call_chain(<<D,a,b,B,A,e,D>>)
logical_negation
greater_than
add_attribute("D", "b", "BOOLEAN")
add_command("D", "A", <<["D", "INTEGER"], ["A", "A"], ["D", "INTEGER"], ["b", "c"], ["d", "C"], ["a", "C"], ["B", "INTEGER"], ["D", "BOOLEAN"], ["e", "BOOLEAN"]>>)
add_call_chain(<<c,B,A,B>>)
add_attribute("c", "A", "INTEGER")
add_query("e", "INTEGER", <<["e", "BOOLEAN"], ["C", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["D", "INTEGER"], ["BOOLEAN", "BOOLEAN"]>>, "A")
conjunction
add_command("a", "BOOLEAN", <<["A", "BOOLEAN"], ["A", "INTEGER"], ["D", "INTEGER"]>>)
add_query("INTEGER", "b", <<["C", "BOOLEAN"], ["d", "BOOLEAN"]>>, "d")
add_attribute("a", "c", "BOOLEAN")
add_command("b", "D", <<["e", "a"], ["A", "INTEGER"], ["c", "INTEGER"], ["d", "BOOLEAN"]>>)
bool_value (true)
add_command("e", "BOOLEAN", <<["a", "c"], ["B", "BOOLEAN"], ["c", "INTEGER"], ["B", "BOOLEAN"], ["INTEGER", "BOOLEAN"]>>)
add_attribute("e", "D", "BOOLEAN")
add_query("B", "A", <<["c", "B"], ["A", "BOOLEAN"], ["c", "e"]>>, "D")
add_query("d", "c", <<["D", "a"], ["A", "d"], ["A", "D"], ["BOOLEAN", "B"], ["b", "B"], ["a", "INTEGER"], ["e", "d"], ["INTEGER", "INTEGER"]>>, "B")
add_class(a)
type_check
add_command("c", "A", <<["INTEGER", "A"], ["a", "BOOLEAN"], ["A", "BOOLEAN"], ["b", "BOOLEAN"], ["d", "C"], ["D", "BOOLEAN"]>>)
add_call_chain(<<B,a,c,BOOLEAN,A,c,B,B,C>>)
type_check
add_query("c", "c", <<["c", "INTEGER"], ["b", "BOOLEAN"], ["A", "INTEGER"], ["INTEGER", "d"], ["b", "INTEGER"]>>, "e")
add_command("a", "b", <<["BOOLEAN", "BOOLEAN"], ["d", "BOOLEAN"]>>)
less_than
add_call_chain(<<c>>)
add_command("e", "C", <<["A", "BOOLEAN"]>>)
type_check
generate_java_code
add_attribute("C", "BOOLEAN", "INTEGER")
modulo
greater_than
add_call_chain(<<INTEGER,a,C,C,A,D,b,B,D>>)
add_attribute("c", "INTEGER", "BOOLEAN")
logical_negation
equals
generate_java_code
add_attribute("e", "e", "BOOLEAN")
add_command("b", "A", <<["B", "INTEGER"], ["B", "BOOLEAN"]>>)
add_call_chain(<<A,BOOLEAN,A,C>>)
type_check
add_call_chain(<<d>>)
add_call_chain(<<C,c,B,C,A>>)
add_attribute("B", "a", "BOOLEAN")
add_command("D", "b", <<["C", "a"], ["B", "INTEGER"], ["A", "INTEGER"], ["INTEGER", "c"]>>)
type_check
add_attribute("d", "C", "BOOLEAN")
bool_value (false)
add_command("INTEGER", "C", <<["b", "BOOLEAN"], ["e", "B"], ["D", "BOOLEAN"], ["A", "INTEGER"], ["d", "INTEGER"]>>)
int_value (1)
add_command("b", "B", <<["INTEGER", "A"], ["b", "INTEGER"]>>)
add_class(d)
add_attribute("B", "d", "d")
add_command("A", "INTEGER", <<["B", "B"], ["C", "INTEGER"]>>)
add_attribute("INTEGER", "d", "d")
bool_value (false)
add_command("c", "b", <<["c", "INTEGER"], ["c", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["D", "e"], ["A", "BOOLEAN"], ["b", "INTEGER"]>>)
add_attribute("C", "A", "INTEGER")
add_call_chain(<<d,BOOLEAN,a,A,a,C,A,c>>)
logical_negation
int_value (4)
add_command("c", "BOOLEAN", <<["D", "BOOLEAN"], ["A", "INTEGER"], ["D", "BOOLEAN"], ["B", "A"], ["INTEGER", "BOOLEAN"], ["C", "INTEGER"], ["c", "INTEGER"], ["D", "c"]>>)
int_value (2)
add_class(c)
int_value (1)
modulo
numerical_negation
add_class(B)
logical_negation
add_call_chain(<<e,B,a,c,C>>)
bool_value (false)
add_attribute("c", "e", "BOOLEAN")
logical_negation
type_check
int_value (23)
add_query("b", "c", <<["A", "BOOLEAN"], ["D", "BOOLEAN"], ["C", "BOOLEAN"], ["A", "INTEGER"]>>, "a")
add_query("C", "BOOLEAN", <<["D", "INTEGER"]>>, "D")
generate_java_code
bool_value (true)
add_call_chain(<<D,B,d,C,e>>)
add_command("c", "A", <<["a", "INTEGER"], ["d", "INTEGER"], ["C", "BOOLEAN"], ["a", "a"], ["e", "BOOLEAN"], ["a", "BOOLEAN"], ["C", "A"], ["INTEGER", "e"]>>)
add_command("e", "INTEGER", <<["D", "INTEGER"], ["D", "BOOLEAN"], ["e", "INTEGER"], ["C", "INTEGER"], ["A", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["D", "BOOLEAN"]>>)
add_attribute("e", "a", "C")
add_attribute("D", "a", "A")
quotient
numerical_negation
numerical_negation
add_attribute("D", "c", "BOOLEAN")
add_attribute("a", "B", "d")
add_query("c", "e", <<["D", "b"], ["a", "BOOLEAN"]>>, "d")
int_value (13)
int_value (11)
generate_java_code
type_check
add_command("B", "c", <<["C", "BOOLEAN"], ["INTEGER", "B"], ["A", "INTEGER"], ["INTEGER", "INTEGER"], ["c", "INTEGER"], ["INTEGER", "INTEGER"]>>)
int_value (40)
add_attribute("e", "c", "b")
bool_value (true)
add_command("D", "a", <<["C", "b"], ["D", "BOOLEAN"], ["D", "BOOLEAN"]>>)
add_attribute("D", "e", "INTEGER")
add_query("INTEGER", "c", <<["BOOLEAN", "C"], ["BOOLEAN", "BOOLEAN"], ["b", "B"], ["d", "B"], ["d", "INTEGER"], ["c", "B"], ["B", "e"], ["e", "D"]>>, "D")
add_attribute("A", "e", "INTEGER")
type_check
int_value (42)
numerical_negation
add_call_chain(<<A,INTEGER>>)
numerical_negation
multiplication
add_command("INTEGER", "A", <<["D", "INTEGER"], ["C", "A"], ["a", "BOOLEAN"], ["a", "INTEGER"]>>)
add_command("c", "d", <<["a", "B"], ["B", "BOOLEAN"], ["a", "INTEGER"]>>)
int_value (24)
add_command("D", "BOOLEAN", <<["A", "INTEGER"], ["A", "INTEGER"]>>)
greater_than
add_query("e", "D", <<["INTEGER", "c"], ["B", "BOOLEAN"], ["C", "d"], ["a", "INTEGER"], ["b", "INTEGER"], ["INTEGER", "BOOLEAN"]>>, "c")
type_check
int_value (41)
int_value (24)
add_query("c", "a", <<["INTEGER", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["D", "BOOLEAN"], ["C", "c"], ["C", "BOOLEAN"]>>, "e")
add_call_chain(<<C,BOOLEAN>>)
bool_value (true)
add_attribute("B", "d", "c")
add_query("A", "c", <<["B", "INTEGER"], ["b", "INTEGER"], ["A", "BOOLEAN"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["a", "BOOLEAN"]>>, "C")
int_value (31)
greater_than
generate_java_code
add_attribute("B", "B", "a")
numerical_negation
bool_value (false)
bool_value (true)
add_call_chain(<<a,B,b,D,C,BOOLEAN,c,e>>)
int_value (44)
add_attribute("B", "D", "INTEGER")
add_call_chain(<<b,b,b,BOOLEAN,B,c,A,d>>)
bool_value (false)
quotient
add_query("A", "B", <<["d", "B"], ["C", "INTEGER"], ["C", "INTEGER"]>>, "A")
add_attribute("b", "e", "c")
add_command("a", "a", <<["D", "INTEGER"], ["INTEGER", "BOOLEAN"], ["a", "INTEGER"], ["BOOLEAN", "B"], ["d", "INTEGER"], ["D", "INTEGER"], ["D", "c"], ["d", "c"], ["c", "D"]>>)
logical_negation
bool_value (false)
conjunction
int_value (37)
modulo
conjunction
numerical_negation
conjunction
add_query("B", "A", <<["d", "A"], ["b", "a"], ["BOOLEAN", "D"], ["a", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["D", "c"]>>, "B")
logical_negation
add_class(BOOLEAN)
add_call_chain(<<D,D,c,a,c,c,e,C>>)
add_call_chain(<<B>>)
bool_value (false)
add_query("A", "a", <<["A", "e"], ["e", "BOOLEAN"], ["a", "BOOLEAN"], ["d", "D"], ["c", "INTEGER"], ["D", "BOOLEAN"], ["D", "BOOLEAN"]>>, "d")
add_query("A", "a", <<["b", "INTEGER"], ["B", "BOOLEAN"], ["e", "INTEGER"]>>, "c")
add_attribute("e", "e", "B")
logical_negation
type_check
less_than
add_attribute("e", "A", "INTEGER")
add_command("INTEGER", "D", <<["D", "BOOLEAN"], ["D", "a"], ["d", "INTEGER"], ["c", "BOOLEAN"], ["B", "BOOLEAN"], ["INTEGER", "INTEGER"]>>)
int_value (2)
add_query("b", "A", <<["B", "INTEGER"], ["a", "BOOLEAN"], ["B", "BOOLEAN"], ["B", "BOOLEAN"], ["e", "BOOLEAN"], ["C", "INTEGER"], ["d", "INTEGER"], ["A", "d"], ["b", "BOOLEAN"]>>, "D")
type_check
add_attribute("d", "c", "e")
logical_negation
add_class(A)
numerical_negation
add_class(B)
add_query("d", "a", <<["INTEGER", "INTEGER"], ["B", "d"], ["d", "A"], ["e", "INTEGER"], ["BOOLEAN", "BOOLEAN"], ["B", "BOOLEAN"], ["b", "INTEGER"], ["A", "c"], ["C", "INTEGER"]>>, "A")
bool_value (true)
add_command("B", "B", <<["d", "INTEGER"], ["e", "INTEGER"], ["A", "BOOLEAN"], ["B", "b"], ["D", "INTEGER"], ["A", "INTEGER"], ["b", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "BOOLEAN"]>>)
add_call_chain(<<C,a,c,b>>)
type_check
add_query("e", "BOOLEAN", <<["A", "c"], ["D", "INTEGER"], ["B", "INTEGER"], ["a", "C"], ["b", "c"], ["b", "BOOLEAN"]>>, "c")
add_query("D", "c", <<["D", "a"], ["b", "c"], ["B", "INTEGER"], ["B", "INTEGER"], ["c", "BOOLEAN"]>>, "b")
add_query("d", "C", <<["C", "BOOLEAN"], ["e", "C"], ["INTEGER", "c"], ["c", "B"]>>, "INTEGER")
add_attribute("a", "e", "INTEGER")
add_command("b", "B", <<["D", "C"], ["D", "b"], ["d", "BOOLEAN"], ["C", "C"]>>)
add_class(A)
bool_value (true)
add_query("c", "d", <<["b", "d"], ["A", "INTEGER"], ["d", "A"], ["b", "INTEGER"], ["e", "INTEGER"], ["C", "c"], ["e", "e"]>>, "D")
conjunction
conjunction
bool_value (false)
add_class(B)
add_call_chain(<<B>>)
add_call_chain(<<c>>)
generate_java_code
add_call_chain(<<c,D,INTEGER,BOOLEAN,e,d,a,A>>)
add_query("B", "C", <<["C", "C"], ["C", "INTEGER"], ["B", "INTEGER"], ["B", "BOOLEAN"], ["e", "BOOLEAN"], ["c", "B"], ["e", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "C"]>>, "C")
add_query("D", "C", <<["B", "INTEGER"], ["A", "b"], ["c", "D"], ["A", "BOOLEAN"], ["c", "INTEGER"], ["B", "INTEGER"], ["d", "c"], ["a", "INTEGER"], ["b", "c"]>>, "A")
add_call_chain(<<B,C,C,d,a,c>>)
logical_negation
logical_negation
equals
int_value (9)
