bool_value (false)
add_command("b", "B", <<["INTEGER", "BOOLEAN"], ["B", "INTEGER"], ["C", "INTEGER"], ["C", "A"]>>)
int_value (26)
add_call_chain(<<a>>)
equals
bool_value (false)
add_command("C", "d", <<["c", "BOOLEAN"], ["a", "INTEGER"]>>)
add_query("A", "d", <<["c", "INTEGER"], ["A", "INTEGER"], ["c", "INTEGER"]>>, "b")
quotient
add_attribute("A", "a", "c")
add_command("c", "b", <<["a", "BOOLEAN"], ["B", "INTEGER"], ["d", "c"], ["c", "A"], ["C", "B"], ["D", "BOOLEAN"]>>)
numerical_negation
disjunction
generate_java_code
add_command("a", "d", <<["A", "e"], ["d", "e"], ["c", "B"], ["b", "BOOLEAN"], ["D", "BOOLEAN"], ["BOOLEAN", "INTEGER"], ["B", "b"], ["D", "BOOLEAN"], ["C", "c"]>>)
conjunction
add_attribute("A", "D", "d")
add_call_chain(<<C,C,D,D,e,B,e,C>>)
bool_value (false)
int_value (28)
logical_negation
generate_java_code
add_command("A", "d", <<["C", "BOOLEAN"], ["C", "BOOLEAN"], ["c", "a"], ["D", "e"]>>)
add_call_chain(<<c,a,e,A,C,e,A,c,b>>)
bool_value (true)
int_value (20)
greater_than
add_command("C", "B", <<["BOOLEAN", "B"]>>)
add_call_chain(<<c,a,B,e,e,B>>)
modulo
bool_value (true)
numerical_negation
type_check
add_call_chain(<<d,e,C>>)
numerical_negation
bool_value (false)
int_value (4)
add_query("BOOLEAN", "c", <<["A", "BOOLEAN"], ["C", "BOOLEAN"], ["d", "D"], ["e", "INTEGER"]>>, "e")
modulo
add_call_chain(<<a,D,c>>)
add_call_chain(<<A,e>>)
numerical_negation
equals
add_query("INTEGER", "C", <<["c", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["b", "BOOLEAN"], ["b", "INTEGER"], ["a", "D"], ["a", "INTEGER"], ["C", "BOOLEAN"], ["c", "INTEGER"]>>, "D")
type_check
bool_value (true)
numerical_negation
int_value (46)
add_command("c", "B", <<["c", "A"], ["b", "e"], ["A", "INTEGER"], ["e", "INTEGER"], ["C", "BOOLEAN"], ["BOOLEAN", "B"], ["c", "BOOLEAN"], ["BOOLEAN", "INTEGER"]>>)
add_attribute("C", "D", "b")
add_class(D)
disjunction
bool_value (false)
add_query("a", "A", <<["B", "INTEGER"], ["d", "B"], ["C", "INTEGER"], ["B", "BOOLEAN"], ["B", "INTEGER"]>>, "C")
int_value (13)
numerical_negation
add_query("a", "e", <<["a", "INTEGER"], ["b", "INTEGER"], ["a", "BOOLEAN"], ["D", "BOOLEAN"], ["INTEGER", "INTEGER"], ["D", "BOOLEAN"], ["D", "BOOLEAN"]>>, "B")
int_value (18)
bool_value (true)
numerical_negation
logical_negation
greater_than
logical_negation
add_class(c)
numerical_negation
disjunction
bool_value (false)
add_attribute("D", "e", "INTEGER")
type_check
generate_java_code
add_call_chain(<<d,A,A,C,B,a,C,C,B>>)
add_command("a", "c", <<["C", "BOOLEAN"], ["INTEGER", "INTEGER"], ["c", "INTEGER"], ["C", "BOOLEAN"], ["C", "INTEGER"], ["C", "BOOLEAN"], ["d", "BOOLEAN"], ["a", "INTEGER"], ["C", "INTEGER"]>>)
add_command("INTEGER", "B", <<["b", "A"], ["a", "b"], ["D", "BOOLEAN"], ["b", "INTEGER"], ["b", "BOOLEAN"]>>)
int_value (38)
add_query("B", "D", <<["d", "C"], ["c", "B"], ["a", "INTEGER"], ["b", "INTEGER"], ["A", "INTEGER"], ["B", "e"]>>, "B")
logical_negation
type_check
quotient
conjunction
greater_than
add_call_chain(<<A,C>>)
add_command("C", "b", <<["d", "c"], ["a", "INTEGER"], ["B", "INTEGER"], ["d", "C"], ["d", "A"], ["INTEGER", "B"], ["B", "INTEGER"], ["c", "BOOLEAN"], ["A", "e"]>>)
add_call_chain(<<b>>)
add_call_chain(<<d,B,B,D,c,C>>)
add_call_chain(<<d,b,e,C,D,e,e,c,D>>)
type_check
add_call_chain(<<b,B,C,c,D>>)
add_class(d)
add_attribute("C", "D", "BOOLEAN")
add_call_chain(<<C,C,B,a>>)
generate_java_code
int_value (24)
add_command("C", "d", <<["c", "BOOLEAN"], ["D", "BOOLEAN"], ["C", "d"], ["INTEGER", "BOOLEAN"], ["B", "a"], ["b", "BOOLEAN"], ["b", "BOOLEAN"]>>)
type_check
type_check
numerical_negation
conjunction
add_attribute("INTEGER", "BOOLEAN", "c")
add_query("e", "c", <<["c", "INTEGER"], ["INTEGER", "BOOLEAN"], ["B", "INTEGER"], ["a", "BOOLEAN"]>>, "b")
bool_value (false)
add_call_chain(<<a,BOOLEAN,b,INTEGER,a,a,e,BOOLEAN>>)
disjunction
type_check
disjunction
generate_java_code
add_attribute("a", "d", "A")
add_call_chain(<<D,d>>)
int_value (33)
add_query("INTEGER", "b", <<["b", "BOOLEAN"], ["B", "BOOLEAN"], ["e", "BOOLEAN"], ["d", "D"], ["B", "INTEGER"], ["C", "BOOLEAN"], ["C", "BOOLEAN"], ["B", "BOOLEAN"], ["c", "BOOLEAN"]>>, "B")
add_call_chain(<<c,e,b,d,INTEGER,A,B,c,B>>)
add_query("A", "b", <<["d", "BOOLEAN"], ["B", "BOOLEAN"], ["A", "INTEGER"], ["d", "INTEGER"], ["B", "e"], ["b", "BOOLEAN"], ["C", "INTEGER"], ["A", "c"]>>, "a")
add_call_chain(<<a,a,B,b,B,a,C>>)
add_call_chain(<<b,C,e,a,A,A,b,b,a>>)
modulo
numerical_negation
generate_java_code
add_attribute("d", "e", "c")
add_attribute("A", "D", "BOOLEAN")
add_query("d", "e", <<["e", "INTEGER"], ["b", "C"], ["BOOLEAN", "INTEGER"], ["c", "BOOLEAN"]>>, "A")
bool_value (true)
generate_java_code
type_check
bool_value (true)
addition
add_query("A", "b", <<["b", "BOOLEAN"], ["d", "B"], ["C", "INTEGER"], ["C", "INTEGER"]>>, "A")
add_attribute("A", "A", "C")
add_query("D", "C", <<["b", "BOOLEAN"], ["B", "BOOLEAN"], ["d", "A"]>>, "D")
int_value (1)
add_attribute("a", "b", "BOOLEAN")
add_call_chain(<<a,e,e,a,D,B,e,a,C>>)
logical_negation
add_call_chain(<<D,BOOLEAN,BOOLEAN,C,e,B,D,C,a>>)
add_class(A)
modulo
add_command("INTEGER", "d", <<["B", "INTEGER"]>>)
add_call_chain(<<e>>)
add_query("d", "A", <<["BOOLEAN", "a"], ["b", "BOOLEAN"], ["e", "INTEGER"], ["e", "INTEGER"], ["a", "INTEGER"]>>, "b")
add_query("A", "c", <<["d", "BOOLEAN"], ["A", "BOOLEAN"], ["C", "C"], ["B", "C"], ["d", "BOOLEAN"], ["D", "INTEGER"]>>, "INTEGER")
disjunction
type_check
add_query("D", "B", <<["A", "INTEGER"], ["A", "A"], ["e", "BOOLEAN"], ["e", "b"], ["e", "a"], ["A", "d"], ["a", "INTEGER"]>>, "d")
logical_negation
disjunction
conjunction
add_command("D", "B", <<["b", "BOOLEAN"], ["b", "e"]>>)
equals
add_attribute("d", "a", "BOOLEAN")
add_call_chain(<<d,d>>)
add_class(A)
add_query("INTEGER", "c", <<["INTEGER", "INTEGER"], ["a", "A"], ["c", "BOOLEAN"], ["A", "INTEGER"]>>, "D")
less_than
add_attribute("d", "D", "INTEGER")
add_class(B)
add_query("c", "c", <<["e", "INTEGER"], ["e", "BOOLEAN"], ["a", "c"], ["A", "BOOLEAN"], ["D", "INTEGER"], ["e", "C"], ["c", "INTEGER"]>>, "B")
add_command("A", "C", <<["C", "INTEGER"], ["D", "BOOLEAN"]>>)
int_value (46)
add_attribute("c", "a", "BOOLEAN")
add_class(d)
add_call_chain(<<c,c,c,BOOLEAN>>)
add_command("D", "c", <<["b", "INTEGER"], ["A", "A"], ["D", "INTEGER"], ["A", "BOOLEAN"]>>)
generate_java_code
add_call_chain(<<a,A,A>>)
add_command("D", "c", <<["D", "BOOLEAN"], ["a", "BOOLEAN"]>>)
add_query("b", "a", <<["e", "BOOLEAN"], ["D", "INTEGER"]>>, "a")
add_call_chain(<<c,e,A,B,d,d,D,c>>)
int_value (33)
generate_java_code
add_query("c", "c", <<["d", "INTEGER"], ["d", "INTEGER"], ["e", "BOOLEAN"], ["INTEGER", "BOOLEAN"], ["B", "D"], ["A", "e"], ["A", "BOOLEAN"], ["INTEGER", "INTEGER"], ["D", "INTEGER"]>>, "a")
add_attribute("d", "B", "INTEGER")
disjunction
int_value (22)
add_call_chain(<<A,D,INTEGER>>)
numerical_negation
bool_value (true)
add_call_chain(<<C>>)
int_value (7)
less_than
logical_negation
add_attribute("D", "B", "C")
less_than
add_call_chain(<<C,A,e>>)
less_than
add_attribute("B", "b", "BOOLEAN")
add_attribute("A", "B", "C")
add_attribute("B", "A", "B")
add_class(e)
type_check
numerical_negation
add_query("D", "e", <<["INTEGER", "A"], ["B", "B"], ["C", "BOOLEAN"], ["b", "INTEGER"], ["e", "BOOLEAN"], ["B", "BOOLEAN"], ["a", "a"], ["e", "BOOLEAN"]>>, "INTEGER")
type_check
quotient
numerical_negation
add_call_chain(<<a,D,INTEGER,A>>)
add_command("D", "c", <<["B", "BOOLEAN"], ["C", "INTEGER"], ["a", "BOOLEAN"], ["B", "c"], ["b", "INTEGER"], ["e", "e"], ["A", "BOOLEAN"]>>)
int_value (49)
add_class(D)
add_attribute("D", "C", "BOOLEAN")
bool_value (false)
type_check
add_query("a", "b", <<["BOOLEAN", "BOOLEAN"]>>, "C")
add_call_chain(<<a,c,D,c,A,a,a>>)
logical_negation
numerical_negation
bool_value (true)
numerical_negation
bool_value (true)
generate_java_code
add_class(b)
int_value (42)
add_call_chain(<<A>>)
type_check
type_check
generate_java_code
add_class(C)
add_attribute("BOOLEAN", "D", "a")
logical_negation
add_call_chain(<<a,b,b,d,e,C,e>>)
int_value (33)
add_command("B", "C", <<["D", "B"], ["c", "d"], ["D", "INTEGER"], ["A", "INTEGER"], ["d", "C"], ["b", "e"], ["b", "INTEGER"]>>)
generate_java_code
numerical_negation
add_query("B", "c", <<["D", "INTEGER"], ["e", "BOOLEAN"], ["A", "e"]>>, "a")
int_value (23)
add_attribute("C", "d", "INTEGER")
generate_java_code
add_class(INTEGER)
add_command("C", "D", <<["C", "INTEGER"], ["b", "D"]>>)
modulo
add_class(C)
add_query("INTEGER", "A", <<["d", "C"], ["d", "BOOLEAN"], ["a", "BOOLEAN"], ["b", "C"], ["A", "INTEGER"], ["A", "A"], ["A", "BOOLEAN"], ["d", "INTEGER"]>>, "d")
int_value (33)
add_call_chain(<<C,INTEGER,b,B,INTEGER,C,C,A,INTEGER>>)
add_attribute("D", "C", "BOOLEAN")
numerical_negation
bool_value (false)
add_call_chain(<<a,B,c,e,a,D,C,A>>)
multiplication
int_value (30)
logical_negation
int_value (27)
equals
add_call_chain(<<c,e,C,C,d,A,D>>)
addition
greater_than
add_attribute("b", "B", "BOOLEAN")
add_attribute("A", "a", "INTEGER")
int_value (20)
add_command("b", "INTEGER", <<["d", "BOOLEAN"], ["b", "C"], ["B", "BOOLEAN"], ["A", "BOOLEAN"], ["BOOLEAN", "BOOLEAN"], ["D", "d"], ["B", "INTEGER"]>>)
type_check
add_command("b", "c", <<["a", "INTEGER"], ["C", "B"], ["A", "BOOLEAN"], ["C", "BOOLEAN"], ["e", "INTEGER"], ["a", "d"], ["D", "BOOLEAN"], ["a", "BOOLEAN"]>>)
bool_value (true)
add_query("BOOLEAN", "e", <<["e", "BOOLEAN"], ["d", "D"], ["B", "BOOLEAN"]>>, "e")
add_query("b", "b", <<["C", "BOOLEAN"], ["c", "BOOLEAN"], ["A", "INTEGER"], ["d", "BOOLEAN"], ["b", "C"]>>, "a")
add_query("C", "B", <<["A", "INTEGER"], ["B", "INTEGER"], ["c", "e"], ["d", "C"], ["D", "INTEGER"]>>, "b")
add_query("b", "D", <<["INTEGER", "BOOLEAN"]>>, "C")
generate_java_code
add_call_chain(<<C,BOOLEAN,b,a,a,d>>)
